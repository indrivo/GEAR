@inject IStringLocalizer Localizer
@{
	ViewData["Title"] = "List of diagrams";
}

<div class="card">
	<div class="card-body">
		<h4 class="card-title">Processes</h4>
		<h6 class="card-subtitle">List of diagrams</h6>
		<div class="table-responsive">
			<div class="mt-2">
				<div class="d-flex">
					<div class="mr-auto">
						<div class="form-group">
							<a asp-action="Create" class="btn btn-primary btn-sm">
								<i class="mdi mdi-circle-edit-outline mr-2" aria-hidden="true"></i>Add Diagram
							</a>
							<small>New diagram will be added.</small>
						</div>
					</div>
				</div>
			</div>
			<table class="table table-striped table-bordered" id="tableDiagram">
				<thead>
				<tr>
					<th>Title</th>
					<th>Synchronized</th>
					<th>Created</th>
					<th>Author</th>
					<th>ModifiedBy</th>
					<th>Changed</th>
					<th>IsDeleted</th>
					<th style="max-width: 20px">Actions</th>
				</tr>
				</thead>
				<tbody></tbody>
				<tfoot></tfoot>
			</table>
		</div>
	</div>
</div>

@section Scripts{
	<script type="text/javascript" language="javascript">
		function getTokenAntiForgery() {
			const token = '@Html.AntiForgeryToken()';
			return $(token).val();
		}
	</script>
	<script language="javascript" type="text/javascript">
		$(document).ready(function($) {
			const tableId = '#tableDiagram';
			if ($.fn.DataTable.isDataTable(tableId)) {
				$(tableId).dataTable().fnDestroy();
				$(tableId).dataTable().empty();
			}

			$(tableId).DataTable({
				processing: true, // for show progress bar
				serverSide: true, // for process server side
				filter: true, // this is for disable filter (search box)
				orderMulti: false, // for disable multiple column at once
				destroy: true,
				ajax: {
					url: '@Url.Action("ProcessDiagramsList")',
					type: "POST"
				},
				columns: [
					{ data: "title" },
					{
						data: "synchronized",
						render: function(data) {
							return `<div class="label label-table label-${data ? 'success' : 'danger'}">${data}</div>`;
						}
					},
					{ data: "createdString" },
					{ data: "authorName" },
					{ data: "modifiedByName" },
					{ data: "changedString" },
					{
						data: "isDeleted",
						render: function(data) {
							return `<div class="checkbox checkbox-success form-group">
									<input ${data ? 'checked' : ''
								} id="isSystem" type="checkbox" class="check" disabled/>
									<label asp-for="isSystem"></label>
								</div>`;
						}
					},
					{
						data: null,
						render: function(data) {
							return `<div class="btn-group" role="group" aria-label="Action buttons">
									<a class="btn btn-info btn-sm" href="@Url.Action("Edit")?id=${data.id}">Edit</a>
									<button type="button" class='btn btn-danger btn-sm' onclick=CreateAlert('${data.id
								}'); >Delete</button>
									</div>`;
						}
					}
				]
			});
		});

		function CreateAlert(rowId) {
			const object = {
				alertTitle: "Delete this diagram?",
				alertText: "are you sure that you want to leave this diagram?",
				confirmButtonText: "Yes, delete it!",
				rowId: rowId,
				tableId: "#tableDiagram",
				urlForDelete: '@Url.Action("Delete")',
				type: "warning",
				onDeleteSuccess: "Diagram has been deleted.",
				onDeleteFail: "Something wrong",
				onServerNoResponse: "Api not respond or not have permissions."
			};
			DeleteData(object);
		}
	</script>

}