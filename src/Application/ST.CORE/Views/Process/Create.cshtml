@using ST.CORE.ViewModels.Process
@using System.Web;
@using System.IO;

@model CreateProcessViewModel

@{
	ViewData["Title"] = "Create process diagram";
}

<link rel="stylesheet" type="text/css" href="~/lib/codemirror/lib/codemirror.css" />
<link rel="stylesheet" type="text/css" href="~/lib/codemirror/theme/monokai.css" />
<style>
	.tabs {
		margin: 0.5em;
	}

	.bjs-powered-by-lightbox {
		display: none;
	}

	.shw-rside-bpm {
		right: 0em !important;
		width: 40em !important;
		display: block !important;
	}

	.right-sidebar-bpm {
		right: -40em;
		width: 40em;
		position: fixed;
		display: none;
		z-index: 1100;
		background: #ffffff;
		top: 0px;
		padding-bottom: 20px;
		height: 100%;
		-webkit-box-shadow: 5px 1px 40px rgba(0, 0, 0, 0.1);
		box-shadow: 5px 1px 40px rgba(0, 0, 0, 0.1);
		-webkit-transition: all 0.3s ease;
		-o-transition: all 0.3s ease;
		transition: all 0.3s ease;
	}
</style>

<div class="card card-outline-info">
	<div class="card-header">
		<h4 class="mb-0 text-white">Create Process Diagram</h4>
	</div>
	<div class="card-body">
		<form asp-action="Create" role="form" id="processCreate">
			@Html.HiddenFor(x => x.DiagramSettings)
			<div class="form-body">
				<h3 class="card-title">Process info</h3>
				<hr>
				<div asp-validation-summary="ModelOnly" class="text-danger"></div>
				<div class="row pt-2">
					<div class="col-md-12">
						<div class="form-group">
							<label asp-for="Title" class="control-label"></label>
							<input asp-for="Title" class="form-control" />
							<span asp-validation-for="Title" class="text-danger"></span>
						</div>
					</div>
				</div>
				<!--/row-->
				<div class="row">
					<div class="col-md-6">
						<div class="form-group">
							<label asp-for="Diagram" class="control-label"></label>
							<input type="text" class="form-control" asp-for="Diagram" style="visibility: collapse" />
						</div>
					</div>
				</div>

			</div>

		</form>
		<div class="row">
			<div class="col-md-12">
				<div class="tabs">
					<ul class="nav nav-tabs" role="tablist">
						<li class="nav-item"> <a class="nav-link active" data-toggle="tab" href="#diagram-build" role="tab"><span class="hidden-sm-up"><i class="ti-home"></i></span> <span class="hidden-xs-down">Diagram</span></a> </li>
						<li class="nav-item"> <a id="tabActivate" class="nav-link" data-toggle="tab" href="#diagram-xml" role="tab"><span class="hidden-sm-up"><i class="ti-user"></i></span> <span class="hidden-xs-down">Xml</span></a> </li>
					</ul>
					<!-- Tab panes -->
					<div class="tab-content tabcontent-border">
						<div class="tab-pane active" id="diagram-build" role="tabpanel">
							<div class="form-group">
								<div class="content with-diagram" id="js-drop-zone" style="min-height: 800px !important">
									<div class="canvas" id="canvas" style="height: 1000px !important;"></div>
								</div>
							</div>
						</div>
						<div class="tab-pane  p-20" id="diagram-xml" role="tabpanel">
							<textarea id="code">

							</textarea>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="row button-group">
			<div class="col-lg-2 col-md-3">
				<button type="button" id="finalyzeAction" class="btn btn-block btn-success"> <i class="fa fa-check"></i>Save</button>
			</div>
			<div class="col-lg-2 col-md-3">
				<button type="reset" class="btn btn-block  btn-inverse">Reset</button>
			</div>
			<div class="col-lg-2 col-md-3">
				<a asp-action="Index" class="btn btn-block btn-link">Back to list</a>
			</div>
		</div>
	</div>
</div>

<!-- ============================================================== -->
<!-- Right BPM sidebar -->
<!-- ============================================================== -->
<!-- .right-sidebar -->
<div class="right-sidebar-bpm right-sidebar">
	<div class="slimscrollright">
		<div class="rpanel-title"> <b id="sidebar-title"></b> <span><i class="ti-close right-side-toggle-bpm"></i></span> </div>
		<div class="r-panel-body">
			<ul id="bpm-sidebar-tabs-head" class="nav nav-tabs" role="tablist"></ul>
			<!-- Tab panes -->
			<div id="bpm-sidebar-tabs-body" class="tab-content tabcontent-border">

			</div>
		</div>
	</div>
</div>
<!-- ============================================================== -->
<!-- End BPM Right sidebar -->
<!-- ============================================================== -->

<link rel="stylesheet" href="~/lib/bpmn-js/dist/assets/diagram-js.css">
<link rel="stylesheet" href="~/lib/bpmn-js/dist/assets/bpmn-font/css/bpmn-embedded.css">
<script src="~/lib/bpmn-js/dist/bpmn-modeler.js"></script>

@section Scripts {
	<script src="~/lib/codemirror/lib/codemirror.js"></script>
	<script src="~/lib/codemirror/addon/display/autorefresh.js"></script>
	<script src="~/lib/codemirror/keymap/sublime.js"></script>
	<script src="~/lib/codemirror/mode/htmlmixed/htmlmixed.js"></script>
	<script src="~/lib/codemirror/mode/javascript/javascript.js"></script>
	<script src="~/lib/codemirror/mode/css/css.js"></script>
	<script src="~/lib/codemirror/mode/xml/xml.js"></script>
	<script>
		var tempDiagram = "@Model?.Diagram.ToString()";
		if (tempDiagram.length > 0) {
			tempDiagram = tempDiagram.replace(/&lt;/g, "<");
			tempDiagram = tempDiagram.replace(/&amp;/g, "&");
			tempDiagram = tempDiagram.replace(/&gt;/g, ">");
			tempDiagram = tempDiagram.replace(/&quot;/g, "\"");
			tempDiagram = tempDiagram.replace(/&apos;/g, "'");
		}

		console.log(tempDiagram);
		var tempSettings = "@Html.Raw(Model?.DiagramSettings)";

		console.log(tempSettings);
		const initialDiagram = tempDiagram.length > 0 ? tempDiagram : '<?xml version="1.0" encoding="UTF-8"?>' +
			'<bpmn:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
			'xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" ' +
			'xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" ' +
			'xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" ' +
			'targetNamespace="http://bpmn.io/schema/bpmn" ' +
			'id="Definitions_1">' +
			'<bpmn:process id="Process_1" isExecutable="false">' +
			'<bpmn:startEvent id="StartEvent_1"/>' +
			'</bpmn:process>' +
			'<bpmndi:BPMNDiagram id="BPMNDiagram_1">' +
			'<bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1">' +
			'<bpmndi:BPMNShape id="_BPMNShape_StartEvent_2" bpmnElement="StartEvent_1">' +
			'<dc:Bounds height="36.0" width="36.0" x="173.0" y="102.0"/>' +
			'</bpmndi:BPMNShape>' +
			'</bpmndi:BPMNPlane>' +
			'</bpmndi:BPMNDiagram>' +
			'</bpmn:definitions>';

		var viewer = new BpmnJS({
			container: '#canvas'
		});

		var editor = CodeMirror.fromTextArea(document.getElementById("code"),
			{
				lineNumbers: false,
				lineWrapping: true,
				mode: "xml",
				keyMap: "sublime",
				autoCloseBrackets: true,
				matchBrackets: true,
				showCursorWhenSelecting: true,
				theme: "monokai",
				tabSize: 2,
				autorefresh: true
			});

		editor.setSize(null, 1000);

		viewer.importXML(initialDiagram,
			function (err) {
				if (err) {
					console.log('error rendering', err);
				} else {
					$(".bjs-powered-by img").attr("src", "/images/logo-icon.png");
					$(".bjs-powered-by").attr("href", "#");
					$(".bjs-powered-by").removeClass("bjs-powered-by").addClass("power-by-indrivo");
					$(".power-by-indrivo").on("click", function () {
						swal("Info", "Power of Soft-Tehnica :D", "");
					});


					viewer.invoke(function (elementRegistry, modeling) {
						var elements = elementRegistry;
						console.log(elements);
					});

					var eventBus = viewer.get('eventBus');

					// you may hook into any of the following events
					var events = [
						'element.hover',
						'element.out',
						'element.click',
						'element.dblclick',
						'element.mousedown',
						'element.mouseup'
					];

					events.forEach(function (event) {
						eventBus.on(event, function (e) {
							if (e.originalEvent.type == "click") {
								console.log(e);
							}
							const isOpen = storage.isOpenSideBar();
							if (isOpen) {
								if (e.originalEvent.type == "click" || e.originalEvent.type == "dblclick") {
									loadContent(e);
								}
							}
							else {
								if (e.originalEvent.type == "dblclick") {
									loadContent(e);
								}
							}
						});
					});
				}
			});

		// save diagram on button click
		const saveButton = document.querySelector('#finalyzeAction');

		saveButton.addEventListener('click',
			function () {
				// get the diagram contents
				viewer.saveXML({ format: true },
					function (err, xml) {
						if (err) {
							console.error('diagram save failed', err);
						} else {
							document.getElementById("Diagram").value = xml;
							document.getElementById("DiagramSettings").value = JSON.stringify(storage.elements);
							document.getElementById("processCreate").submit();
						}
					});
			});
		const tabActivate = document.querySelector('#tabActivate');

		tabActivate.addEventListener("click", function () {
			if (storage.isOpenSideBar()) {
				toggleRightSideBar();
			}
			viewer.saveXML({ format: true },
				function (err, xml) {
					if (err) {
						console.error('diagram save failed', err);
					} else {
						editor.focus();
						editor.setValue(xml);
						editor.refresh();
					}
				});
		});


		$(document).ready(function () {
			$(".right-side-toggle-bpm").click(toggleRightSideBar);
		});

		function toggleRightSideBar() {
			$(".right-sidebar-bpm").slideDown(50);
			$(".right-sidebar-bpm").toggleClass("shw-rside-bpm");
		}

		const configs = load("/Process/GetBpmConfig");

		const storage = {
			currentId: "",
			isOpenSideBar: function () {
				return $(".right-sidebar-bpm").hasClass("shw-rside-bpm");
			},
			settings: {
				getConfigFor: function (elementType) {
					const match = this.elementsConfigurations.filter((x) => {
						return x.Id == elementType;
					});
					if (match.length >= 1) {
						return match[0];
					}
					return null;
				},
				elementsConfigurations: configs
			},
			isIdRegistered: function (id) {
				const match = this.elements.filter((x) => {
					return x.id == id;
				});
				if (match.length >= 1) {
					return true;
				}
				return false;
			},
			elements: tempDiagram.length > 0 ? JSON.parse(tempSettings) : []
		};

		function loadContent(e) {
			console.log(e);
			$("#sidebar-title").html(`Element Id: <code>${e.element.id}</code>`);
			if (storage.currentId != e.element.id) {
				const settings = storage.settings.getConfigFor(e.element.type);
				if (settings != null) {
					createPanelTabs(settings.Tabs, e);
				}
				else {
					clearPanelTabs();
					$("#bpm-sidebar-tabs-head").html("<h6>No settings available</h6>");
				}
			}

			if (storage.currentId === e.element.id) {
				toggleRightSideBar();
			}

			storage.currentId = e.element.id;
		}

		function clearPanelTabs() {
			$("#bpm-sidebar-tabs-head").html(null);
			$("#bpm-sidebar-tabs-body").html(null);
		}

		function getVal(element, e) {
			if (storage.isIdRegistered(e.element.id)) {
				const obj = storage.elements.find((x) => { return x.id == e.element.id });
				let response = obj[element.FormName];
				return response != undefined ? obj[element.FormName] : "";
			}
			return "";
		}

		function loadTabContent(tab, e) {
			if (tab.Sections.length == 0) return "<h6>No settings available</h6>";
			let container = "";
			$.each(tab.Sections, function (index, section) {
				container += `<h3>${section.Name}</h3>`;
				if (section.Elements.length > 0) {
					$.each(section.Elements, function (i, element) {
						let val = getVal(element, e);
						container += `<label style="padding-right: 3em">${element.Name}</label>`;
						switch (element.Type) {
							case "label": {
								container += `<code>${e.element[element.LoadValue]}</code>`;
							} break;
							case "textarea": {
								container += `<textarea data-id="${e.element.id}" name="${element.FormName}" class="form-control bpm-serializable">${val}</textarea>`;
							} break;
							case "input": {
								container += `<input data-id="${e.element.id}" name="${element.FormName}" value="${val}" type="text" class="form-control bpm-serializable" />`;
							} break;
							case "color": {
								container += `<input data-id="${e.element.id}" name="${element.FormName}" value="${val}" type="color" class="form-control bpm-serializable-color" />`;
							} break;
							case "select": {
								let c = document.createElement("select");
								c.setAttribute("class", "form-control bpm-serializable");
								c.setAttribute("data-id", e.element.id);
								c.setAttribute("name", element.FormName);
								if (element.hasOwnProperty("Settings")) {
									const req = load(element.Settings.Url);
									$.each(req, function (index, item) {
										let opt = document.createElement("option");
										opt.value = item[element.Settings.Params.Value];
										opt.innerHTML = item[element.Settings.Params.Name];
										if (item[element.Settings.Params.Value] == val) {
											opt.setAttribute("selected", "selected");
										}
										c.appendChild(opt);
									});
								}
								container += c.outerHTML;
							} break;
						}
						container += "<br>";
					});
				}
				else {
					container += "<h6>No settings available</h6>";
				}
			});
			return container;
		}

		function createPanelTabs(tabs, e) {
			clearPanelTabs();
			$.each(tabs, function (index, tab) {
				let header = document.createElement("li");
				header.setAttribute("class", "nav-item");
				let ha = document.createElement("a");
				if (index == 0) ha.setAttribute("class", "nav-link active");
				else ha.setAttribute("class", "nav-link");

				ha.setAttribute("data-toggle", "tab");
				ha.setAttribute("href", `#target_${index}`);
				ha.setAttribute("role", "tab");
				ha.innerHTML = `<span class="hidden-sm-up"><i class="ti-home"></i>
											</span> <span class="hidden-xs-down">${tab.Name}</span>`;
				header.appendChild(ha);

				let body = document.createElement("div");
				body.setAttribute("id", `target_${index}`);
				body.setAttribute("role", "tabpanel");
				body.innerHTML = loadTabContent(tab, e);
				if (index == 0) body.setAttribute("class", "tab-pane p-20 active");
				else body.setAttribute("class", "tab-pane p-20");

				$("#bpm-sidebar-tabs-head").append(header);
				$("#bpm-sidebar-tabs-body").append(body);
				$(".bpm-serializable").on("change", onChangeValue);
				$(".bpm-serializable-color").on("input", onChangeValue);
			});
		}


		function onChangeValue() {
			const id = $(this).attr("data-id");
			const name = $(this).attr("name");
			if (!storage.isIdRegistered(id)) {
				storage.elements.push({
					id: id
				});
			}
			const v = this.value;
			$.each(storage.elements, function () {
				if (this.id == id) {
					viewer.invoke(function (elementRegistry, modeling) {
						let elem = elementRegistry.get(id);
						let updateObj = {};
						updateObj[name] = v;
						if (name != "color") {
							modeling.updateProperties(elem, updateObj);
						}

						if (name == "color") {
							var elementsToColor = [];
							elementsToColor.push(elem);
							console.log(modeling);
							modeling.setColor(elementsToColor, {
								stroke: 'black',
								fill: v
							});
						}
					});
					this[name] = v;
				}
			});
		}
	</script>
	@{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}