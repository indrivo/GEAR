@model ST.Entities.Models.Nomenclator.NomenclatorItem
@inject IStringLocalizer Localizer

@{
	ViewData["Title"] = "Create new menu item";
}

<div class="card card-outline-primary">
	<div class="card-header">
		<h4 class="mb-0 text-white">Add menu </h4>
	</div>
	<div class="card-body">
		<form asp-action="CreateItem" role="form">
			@Html.HiddenFor(x => x.NomenclatorId)
			@Html.HiddenFor(x => x.ParentId)
			<div class="form-body">
				<div asp-validation-summary="ModelOnly" class="text-danger"></div>
				<div class="row p-t-20">
					<div class="col-md-12">
						<div class="form-group">
							<label class="control-label" asp-for="Name"></label>
							<input class="form-control" type="text" asp-for="Name" />
							<span asp-validation-for="Name" class="text-danger"></span><br />
							<small>Name of the NomenclatorItem</small>
						</div>
					</div>
				</div>
			</div>
			<div class="row button-group">
				<div class="col-lg-2 col-md-3">
					<button type="submit" class="btn btn-block btn-success"> <i class="fa fa-check"></i> @Localizer["save"]</button>
				</div>
				<div class="col-lg-2 col-md-3">
					<button type="reset" class="btn btn-block  btn-inverse"> @Localizer["reset"]</button>
				</div>
				<div class="col-lg-2 col-md-3">
					<a asp-action="Index" class="btn btn-block btn-link"> @Localizer["back"]</a>
				</div>
			</div>
		</form>
	</div>
</div>


@section Scripts {
	<script>
		const trans = load("/PageRender/GetTranslations");
		const options = $("#Translate");
		$.each(trans, function (index, data) {
			options.append(new Option(data, index));
		});
		$("#NomenclatorId").val("@ViewBag.NomenclatorId");
		$("#ParentId").val("@ViewBag.ParentId");

		$("#Routes").on("change", function () {
			const selected = $(this).find(":checked");
			$("#Href").val(selected.val());
		});


			var icons = function () {
			var get = $.ajax({
				url:
					"https://gist.githubusercontent.com/migliori/60154172ba0eea70e3c0dd4c3b5d82d0/raw/366789b2d001a99f5f41f1ceab980d991de059c3/fontawesome-icons-with-categories.json",
				type: "get",
				async: false,
				success: function (data) {
					return data;
				},
				error: function () {
					return [];
				}
			});

			try {
				const all = JSON.parse(get.responseText);
				let result = [];
				for (let cat in all) {
					for (let item in all[cat]) {
						result.push(all[cat][item]);
					}
				}
				result = result.map(function (x) { return x.replace("far ", "fa "); });
				result = result.map(function (x) { return x.replace("fas ", "fa "); });
				result = result.map(function (x) { return x.replace("fab ", "fa "); });
				return result;
			} catch (e) {
				return [];
			}
		};
		const opt = $("#Icon");
		$.each(icons(), function () {
			opt.append(new Option(this, this));
		});

		$("#Icon").on("change", function () {
			const selected = $(this).find(":checked");
			$("#iconView").attr("class", selected.val());
		});
	</script>
	@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
