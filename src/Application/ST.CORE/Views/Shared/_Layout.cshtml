@using ST.Identity.Data.UserProfiles
@using ST.Localization
@using Microsoft.AspNetCore.Http
@using ST.CORE.Models.LocalizationViewModels
@using ST.Identity.Abstractions


@inject UserManager<ApplicationUser> UserManager
@inject ILocalService LocalService
@inject IOptionsSnapshot<LocalizationConfigModel> LocalizationConfig
@inject IHttpContextAccessor Accesor


@if (User.Identity.IsAuthenticated)
{
	<!DOCTYPE html>

	var layoutId = (Guid?)ViewData["layoutId"];
	if (layoutId == null)
	{
		layoutId = WebPageSync.Layouts[0];
	}

	var user = await UserManager.GetUserAsync(User);
	var id = Accesor.HttpContext.Session.GetString(LocalizationConfig.Value.SessionStoreKeyName);
	var language = LocalizationConfig.Value.Languages.FirstOrDefault(l => l.Identifier == id);
	var languages = LocalizationConfig.Value.Languages.Where(x => x.IsDisabled == false);

	<html>
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<style>
			html, body {
				margin: 0px;
			}
		</style>
		<title>@ViewData["Title"] - Gear</title>
		<layout-css-code layout-id="@layoutId"></layout-css-code>
		<application-styles layout-id="@layoutId"></application-styles>

		<!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
		<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
		<!--[if lt IE 9]>
			<script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
			<script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
		<![endif]-->
	</head>
	<body class="fix-header fix-sidebar card-no-border">
		<application layout-id="@layoutId">
			@RenderBody()
		</application>

		<application-scripts layout-id="@layoutId"></application-scripts>

		<script>
			window.load = function (uri, data = null, type = "get") {
				try {
					const url = new URL(location.href);
					uri = `${url.origin}${uri}`;

					const req = $.ajax({
						url: uri,
						type: type,
						data: data,
						async: false
					});
					return JSON.parse(req.responseText);
				} catch (exp) {
					console.log(exp);
					return null;
				}
			};
			const notificator = new Notificator();
			st = new ST();
			const controller = "@ViewContext.RouteData.Values["controller"].ToString()";
			const view = "@ViewContext.RouteData.Values["action"].ToString()";

			const settings = {
				layout: {
					id : "@layoutId"
				}
			};
			settings.navigation = {
				view: view,
				controller : controller
			};

			settings.user = {
				userName: "@user.UserName",
				email: "@user.Email",
				id: "@user.Id"
			};

			settings.app = {
				name : "@LocalService.GetAppName("core")"
			};

			settings.localization = {
				languages: window.load("/PageRender/GetLanguages"),
				current: {
					identifier: "@language.Identifier",
					name: "@language.Name"
				}
			};

			localStorage.setItem("settings", JSON.stringify(settings));

		</script>
		<layout-js-code layout-id="@layoutId"></layout-js-code>

		<script src="~/assets/js/form/formeo.min.js"></script>
		<script src="~/assets/js/form/form-generate.js" asp-append-version="true"></script>
		<script src="~/js/signalar.js" asp-append-version="true"></script>
		<script>
			function getVisibility(id) {
				const cookie = getCookie(`_list_${id}`);
				var visibledItems = [];
				var hiddenItems = [];
				if (cookie) {
					var data = JSON.parse(cookie);

					for (let i = 0; i < data.values.length; i++) {
						if (data.values[i]) visibledItems.push(i);
						else hiddenItems.push(i);
					}
				}

				return {
					visibledItems: hiddenItems,
					hiddenItems: hiddenItems
				};
			}

			$('.table')
				.on('preInit.dt',
					function () {
						const cols = getVisibility(`#${$(this).attr("id")}`);
						$(`#${$(this).attr("id")}`).DataTable().columns(cols.visibledItems).visible(true);
						$(`#${$(this).attr("id")}`).DataTable().columns(cols.hiddenItems).visible(false);

						$("div.CustomizeColumns")
							.html(
								`<div class="col-md-2" style="margin-left: -1em;">
												<a data-id="#${$(this)[0].id
								}" style="margin-bottom: 0.5em;" class="list-side-toggle btn btn-primary btn-sm" href="#">Visibility of fields</a></div>`);
						$(".list-side-toggle").click(function () {
							toggleRightListSideBar($(this).attr("data-id"));
						});
					});


			function IsChecked(state) {
				if (state) return "checked";
				return "";
			}


			function toggleRightListSideBar(id) {
				try {
					const cols = $(id).DataTable().settings()[0].aoColumns;
					var items = "";
					const cookie = getCookie(`_list_${id}`);
					let display = null;
					if (cookie) {
						display = JSON.parse(cookie);
					}

					$.each(cols,
						function (index, data) {
							let vis = "checked";
							if (display) {
								vis = IsChecked(display.values[data.idx]);
							}
							items += `<li class="list-group-item">
																																<div class="checkbox checkbox-info">
																																<input type="checkbox" ${vis} data-table="${id}" id="${data.idx
								}" class="complete-activity-trigger vis-check" data-id="${
								data.idx}">
																																				<label  for="${data.idx}">${data.sTitle}</label>
																																			</div>
																																	</li>`;
						});

					const container =
						`<div class="to-do-widget"><ul class="todo-list list-group m-b-0">${
						items}</ul</div>`;
					$(".list-sidebar-central .slimscrollright .r-panel-body").html(container);

					$(".vis-check").change(function () {
						const checked = $(this).is(':checked');
						const idd = $(this).attr("data-id");
						const tabled = $(this).attr("data-table");
						const cookie = getCookie(`_list_${tabled}`);

						if (cookie) {
							const data = JSON.parse(cookie);
							data.values[idd] = checked;
							data.columns[idd] = idd;

							setCookie(`_list_${tabled}`, JSON.stringify(data), 9999);
						} else {
							const nrCols = $(id).DataTable().settings()[0].aoColumns.length;
							const newCookie = {
								columns: [],
								values: []
							};
							for (let i = 0; i < nrCols; i++) {
								newCookie.values[i] = i;
								newCookie.columns[i] = true;
							}
							newCookie.values[idd] = checked;
							newCookie.columns[idd] = idd;
							setCookie(`_list_${tabled}`, JSON.stringify(newCookie), 9999);
						}
						$(tabled).DataTable().columns([idd]).visible(checked);
					});
				} catch (error) {
					console.log(error);
				}

				$(".list-sidebar-central").slideDown(50);
				$(".list-sidebar-central").toggleClass("shw-rside");
			}

			function setCookie(cname, cvalue, exdays) {
				const d = new Date();
				d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
				const expires = "expires=" + d.toUTCString();
				document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
			}

			function getCookie(cname) {
				const name = cname + "=";
				const decodedCookie = decodeURIComponent(document.cookie);
				const ca = decodedCookie.split(';');
				for (let i = 0; i < ca.length; i++) {
					let c = ca[i];
					while (c.charAt(0) == ' ') {
						c = c.substring(1);
					}
					if (c.indexOf(name) == 0) {
						return c.substring(name.length, c.length);
					}
				}
				return "";
			}
		</script>
	</body>
</html>
}
else
{
@RenderBody()
}

@RenderSection("Scripts", required: false)
