@{
	var page = (Page)ViewBag.Page;

	ViewData["Title"] = page.Settings.Title;

	Layout = page.LayoutId == null ? null : "~/Views/Shared/_Layout.cshtml";

	ViewData["layoutId"] = page.LayoutId;

	var cssCode = PageRender.GetPageCss(page.Settings.Name);

	var styles = PageRender.GetPageStyles(page.Id);
	var scripts = PageRender.GetPageScripts(page.Id);
}

@if (styles.IsSuccess)
{
	foreach (var style in styles.Result)
	{
		@Html.Raw(style.Script)
	}
}

@if (!string.IsNullOrEmpty(cssCode))
{
	<style>
		@Html.Raw(cssCode)
	</style>
}

@Html.Raw(PageRender.GetPageHtml(page.Settings.Name))


@{
	var jsCode = PageRender.GetPageJavaScript(page.Settings.Name);
}

@section Scripts
{
	@if (scripts.IsSuccess)
	{
		foreach (var script in scripts.Result)
		{
			@Html.Raw(script.Script)
			;
		}
	}
	@if (!string.IsNullOrEmpty(jsCode))
	{
		<script>
			@Html.Raw(jsCode)
		</script>
	}
	<script>
		function restoreItem(rowId, tableId, viewModelId) {
			const object = {
				alertTitle: "Restore?",
				alertText: "Are you sure that you want to restore this item?",
				confirmButtonText: "Yes, restore it!",
				rowId: rowId,
				tableId: tableId,
				urlForDelete: "/PageRender/RestoreItemFromDynamicEntity",
				type: "warning",
				onDeleteSuccess: "Item has been restored.",
				onDeleteFail: "Something wrong",
				onServerNoResponse: "Api not respond or not have permissions."
			};

			swal({
				title: object.alertText,
				text: object.alertText,
				type: object.type,
				showCancelButton: true,
				confirmButtonColor: "#3085d6",
				cancelButtonColor: "#d33",
				confirmButtonText: object.confirmButtonText
			}).then((result) => {
				if (result.value) {
					$.ajax({
						url: `${object.urlForDelete}`,
						type: "post",
						data: {
							id: object.rowId,
							viewModelId: viewModelId
						},
						success: function(data) {
							if (data.success) {
								const oTable = $(`${object.tableId}`).DataTable();
								oTable.draw();
								swal("Restored!", object.message, "success");
							} else {
								swal("Fail!", data.message, "error");
							}
						},
						error: function() {
							swal("Fail!", object.onServerNoResponse, "error");
						}
					});
				}
			});
		}

		function deleteItem(rowId, tableId, viewModelId) {
			const object = {
				alertTitle: "Delete this item?",
				alertText: "Are you sure that you want to leave this item?",
				confirmButtonText: "Yes, delete it!",
				rowId: rowId,
				tableId: tableId,
				urlForDelete: "/PageRender/DeleteItemFromDynamicEntity",
				type: "warning",
				onDeleteSuccess: "Item has been deleted.",
				onDeleteFail: "Something wrong",
				onServerNoResponse: "Api not respond or not have permissions."
			};

			swal({
				title: object.alertText,
				text: object.alertText,
				type: object.type,
				showCancelButton: true,
				confirmButtonColor: "#3085d6",
				cancelButtonColor: "#d33",
				confirmButtonText: object.confirmButtonText
			}).then((result) => {
				if (result.value) {
					$.ajax({
						url: `${object.urlForDelete}`,
						type: "post",
						data: {
							id: object.rowId,
							viewModelId: viewModelId
						},
						success: function(data) {
							if (data.success) {
								const oTable = $(`${object.tableId}`).DataTable();
								oTable.draw();
								swal("Deleted!", object.message, "success");
							} else {
								swal("Fail!", data.message, "error");
							}
						},
						error: function() {
							swal("Fail!", object.onServerNoResponse, "error");
						}
					});
				}
			});
		}

		var tables = Array.prototype.filter.call(
			document.getElementsByTagName('table'),
			function(el) {
				return el.getAttribute("db-viewmodel") != null;
			}
		);

		const form = new Form();

		$.each(tables,
			function(index, table) {
				const viewmodelId = $(table).attr("db-viewmodel");
				const listId = $(table).attr("id");
				const tableId = `#${listId}`;
				if ($.fn.DataTable.isDataTable(tableId)) {
					$(tableId).dataTable().fnDestroy();
					$(tableId).dataTable().empty();
				}

				const viewmodelData = load(`/PageRender/GetViewModelById?viewModelId=${viewmodelId}`);
				const renderColumns = [];
				if (viewmodelData.is_success) {
					if (viewmodelData.result.viewModelFields.length > 0) {
						const columns = $(`#${listId} thead tr`);
						columns.html(null);
						let rows = "";
						//let rows = "<th>#</th>";
						//renderColumns.push({
						//	data: null,
						//	"render": function(data, type, row, meta) {
						//		return `<div class="custom-control custom-checkbox">
						//				<input data-viewmodel="${viewmodelId}" data-table="#${listId}" data-id="${row
						//			.id
						//			}" type="checkbox" class="list-select-delete custom-control-input" onchnage="alert();" id="custom_check_${
						//			row.id}">
						//			 <label class="custom-control-label" for="custom_check_${row.id}"></label>
						//					</div>`;
						//	}
						//});
						$.each(viewmodelData.result.viewModelFields,
							function(index, column) {
								rows += `<th translate='${column.translate}'>${column.name}</th>`;
								renderColumns.push({
									data: null,
									"render": function(data, type, row, meta) {
										return `<div class="data-cell" data-viewmodel="${viewmodelId}" data-id="${row.id
											}" data-column-id="${column.id}">${eval(column.template)}</div>`;
									}
								});
							});
						rows += "<th>Actions</th>";
						columns.html(rows);
						renderColumns.push({
							data: null,
							"render": function(data, type, row, meta) {
								return `<div class="btn-group" role="group" aria-label="Action buttons">
									<a data-viewmodel="${viewmodelData.result.id
									}" class="inline-edit btn btn-warning btn-sm" href="#">Edit inline</a>
									<a class="btn btn-info btn-sm" href="?entityId=${row.id}">Edit</a>
									${row.isDeleted
									? `<a href="#" class='btn btn-danger btn-sm' onclick="restoreItem('${row.id
									}', '#${listId}', '${viewmodelData.result.id}')">Restore</a>`
									: `<a href="#" class='btn btn-danger btn-sm' onclick="deleteItem('${row.id
									}', '#${listId}', '${viewmodelData.result.id}')">Delete</a>`}
									</div>`;
							}
						});
					}
				}

				$(tableId).DataTable({
					"language": {
						"url": `http://cdn.datatables.net/plug-ins/1.10.19/i18n/${window.getCookie("language")}.json`
					},
					dom: '<"CustomizeColumns">lBfrtip',
					"processing": true, // for show progress bar
					"serverSide": true, // for process server side
					"filter": true, // this is for disable filter (search box)
					"orderMulti": false, // for disable multiple column at once
					"destroy": true,
					"ajax": {
						"url": "/PageRender/LoadPagedData",
						"type": "POST",
						"data": {
							"viewModelId": viewmodelId
						}
					},
					"columns": renderColumns
				});
			});

		var forms = Array.prototype.filter.call(
			document.getElementsByTagName('form'),
			function(el) {
				return el.getAttribute('db-form') != null;
			}
		);

		$.each(forms,
			function(index, form) {
				let formId = $(form).attr("db-form");
				const st = new ST();
				const id = `render_${st.newGuid()}`;
				$(form).attr("id", id);
				$(form).html(null);
				renderForm(formId, id);
			});

		function renderForm(formId, place) {
			let data = form.getFormFronServer(formId);

			if (data != null) {
				if (data.is_success) {
					const json = form.cleanJson(data.result);

					try {
						let formeo = new window.Formeo(
							{
								allowEdit: false
							},
							JSON.stringify(json));

						const renderContainer = document.querySelector(`#${place}`);

						$(function() {
							formeo.render(renderContainer);
							const selects = Array.prototype.filter.call(
								renderContainer.getElementsByTagName('select'),
								function(el) {
									return el.getAttribute('table-field-id') != null;
								}
							);
							populateSelect(selects);
						});

					} catch (exp) {
						console.log(exp);
					}

					$(`#${place}`).on("submit",
						function() {
							const st = new ST();
							const serialized = st.serializeToJson($(`#${place}`));

							const final = {};
							for (let s in serialized) {
								if (serialized.hasOwnProperty(s)) {
									const id = $(`#${place} #${s}`).attr("table-field-id");

									if (id != undefined) {
										final[id] = serialized[s];
									} else
										final[s] = serialized[s];
								}
							}

							$.ajax({
								url: "@Url.Action("PostForm", "PageRender")",
								type: "post",
								data: {
									model: {
										data: final,
										formId: formId
									}
								},
								success: function(data) {
									if (data != null) {
										if (data.is_success) {
											location.href = data.result.redirectUrl;
										}
									}
								}
							});
							return false;
						});
				}
			} else {
				console.log("fail");
			}
		}


		function populateSelect(selects) {
			$.each(selects,
				function(index, select) {
					const fieldId = $(select).attr("table-field-id");
					$(select).html(null);
					const req = load("/PageRender/GetInputSelectValues",
						{
							fieldId: fieldId
						});
					console.log(req);
					if (req.is_success) {
						$.each(req.result,
							function(index, item) {
								$(select).append(new Option(item.name, item.id));
							});
					}
				});
		}
	</script>
}
