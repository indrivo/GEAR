@{
	ViewData["Title"] = "Runtime logs";
}

<link rel="stylesheet" type="text/css" href="~/lib/codemirror/codemirror.min.css" />
<link rel="stylesheet" type="text/css" href="~/lib/codemirror/theme/monokai.css" />

<style>
	.select-error {
		color: red;
	}

	.select-warn {
		color: orange;
	}

	.select-info {
		color: green;
	}

	.select-trace {
		color: white;
	}
</style>

<textarea id="code"></textarea>


@section Scripts{
	<script src="~/lib/codemirror/codemirror.min.js"></script>
	<script src="~/lib/codemirror/keymap/sublime.js"></script>
	<script src="~/lib/codemirror/mode/htmlmixed/htmlmixed.js"></script>
	<script src="~/lib/codemirror/mode/javascript/javascript.js"></script>
	<script src="~/lib/codemirror/mode/css/css.js"></script>
	<script src="~/lib/codemirror/mode/xml/xml.js"></script>
	<script>
		var editor = CodeMirror.fromTextArea(document.getElementById("code"),
			{
				lineNumbers: true,
				mode: "xml",
				keyMap: "sublime",
				autoCloseBrackets: true,
				matchBrackets: true,
				showCursorWhenSelecting: true,
				theme: "monokai",
				tabSize: 2
			});

		editor.on('change', function () {
			editor.save();
		});

		editor.setSize(null, 700);

		//On receive log
		connection.on("SendLog", (logs) => {
			const data = JSON.parse(logs);
			var cm = $(".CodeMirror")[0].CodeMirror;
			$.each(data, function (index, log) {
				const text = `${log.Level.Name}  ${log.Message}`;;
				insertText(text);
				var lineStyle = "";

				switch (log.Level.Name) {
					case 'Info':
						{
							lineStyle = "select-info";
						}; break;
					case 'Error':
						{
							lineStyle = "select-error";
						}; break;
					case 'Fatal':
						{
							lineStyle = "select-error";
						}; break;
					case 'Trace':
						{
							lineStyle = "select-trace";
						}; break;
					case 'Warn':
						{
							lineStyle = "select-warn";
						}; break;
				}

				var doc = cm.getDoc();
				var cursor = doc.getCursor();
				var lines = (text.match(new RegExp("\n", "g")) || []).length;
				for (let i = 0; i <= lines; i++) {
					editor.addLineClass(cursor.line - i, 'wrap', lineStyle);
				}

				insertText("--------------------------------------------------------------------------------------------");
			});
		});

		function insertText(data) {
			var cm = $(".CodeMirror")[0].CodeMirror;
			var doc = cm.getDoc();
			var cursor = doc.getCursor(); // gets the line number in the cursor position

			var line = doc.getLine(cursor.line); // get the line contents
			var pos = {
				line: cursor.line
			};
			if (line.length === 0) {
				// check if the line is empty
				// add the data
				doc.replaceRange(data, pos);
			} else {
				// add a new line and the data
				doc.replaceRange("\n" + data, pos);
			}
		}
	</script>
}