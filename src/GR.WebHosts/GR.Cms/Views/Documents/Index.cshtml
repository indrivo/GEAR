@using GR.Core.Razor.Enums
@{
	ViewData["Title"] = Localizer["system_documents"];
}


@{
	ViewData["Title"] = Localizer["system_documents"];
	var conf = new ListTagHelperModel
	{
		Title = Localizer["system_document_categories"],
		ListIdentifier = "document_Categories",
		Api = new ListApiConfigurationViewModel
		{
			Url = Url.Action("ListDocuments", "Documents")
		},
		RenderColumns = new List<ListRenderColumn>
{

			new ListRenderColumn(Localizer["created"], "created"),
			new ListRenderColumn(Localizer["changed"], "changed"),
			new ListRenderColumn(Localizer["author"], "author"),

			new ListRenderColumn("Title", "title"),
			new ListRenderColumn("Document code", "documentCode"),
			new ListRenderColumn("Description", "description"),
			new ListRenderColumn("File", "fileName"),
			new ListRenderColumn("Group", "group"),
			new ListRenderColumn("Type", "documentType.name"),
		   // new ListRenderColumn("Category", "created"),
			new ListRenderColumn("Version", "lastVersion"),
		  //  new ListRenderColumn("Status", "created"),
			new ListRenderColumn("Is delete", "isDeleted")
			{
				BodySystemTemplate = RenderCellBodySystemTemplate.Boolean
			},

		},
		HeadButtons = new List<UrlTagHelperViewModel>
{
			new UrlTagHelperViewModel
			{
				AspAction = "",
				AspController = "",
				ButtonName = "Add new document",
				Description = "New document  will be added",
				HtmlAttributes = new List<HtmlAttribute>
		{
					new HtmlAttribute("Id", "addDocument"),
					new HtmlAttribute("onclick", "AddNewDocument()")
				}
			}
		},
		HasActions = true,
		ListActions = new List<ListActionViewModel>
{
			new ListActionViewModel
			{
				HasIcon = false,
				Name = Localizer["edit"],
				ButtonType = BootstrapButton.Info,
				IsJsEvent = true,
				ButtonEvent = new JsActionButtonEvent
				{
					JsEvent = JsEvent.OnClick,
					JsEventHandler = "EditDocument('${row.id}');"
				},
			},
			new ListActionViewModel
			{
				HasIcon = false,
				Name = Localizer["delete"],
				Url = Url.Action("Delete", "DocumentCategories"),
				IsJsEvent = true,
				ButtonEvent = new JsActionButtonEvent
				{
					JsEvent = JsEvent.OnClick,
					JsEventHandler = "createAlert('${row.id}');"
				},
				ButtonType = BootstrapButton.Danger,
				ActionParameters = new List<ActionParameter>
{
					new ActionParameter("id", "id")
				}
			},
		},
		Documentation = "This tab allow to manage your document category"
	};

}

<JList asp-for="@conf"></JList>







<!-- Modal add document -->
<div class="modal fade" id="AddDocumentModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
	 aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLongTitle">Add document</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<form id="formAddDocument" role="form" enctype="multipart/form-data">
					<input id="DocumentCategoryId" name="DocumentCategoryId" class="form-control" type="hidden" />
					<div class="form-body">
						<div class="row p-t-20">

							<div class="col-md-12">
								<div class="col-md-12">
									<div class="form-group">
										<label>Document category</label>
										<select asp-items="ViewBag.ListDocumentCategory" class="form-control" id="AddDocumentSelectCategoryId" required>
											<option value=""></option>
										</select>
									</div>
								</div>
							</div>

							<div id="blockAddDocuments" class="col-md-12" style="display: none">
								<div class="col-md-12" id="DocumentTypeBlock">
									<div class="form-group">
										<label>Document type</label>
										<select name="DocumentTypeId" asp-items="ViewBag.ListDocumentType" class="form-control">
											<option value=""></option>
										</select>
									</div>
								</div>
								<div class="col-md-12">
									<div class="form-group">
										<label>Document Code</label>
										<input id="DocumentCode" name="DocumentCode" class="form-control" value="" maxlength="20" />
									</div>
								</div>
								<div class="col-md-12">
									<div class="form-group">
										<label>Tile</label>
										<input name="Tile" class="form-control" value="" required />
									</div>
								</div>
								<div class="col-md-12">
									<div class="form-group">
										<label>Description</label>
										<textarea name="Description" class="form-control ckeditor" value=""></textarea>

									</div>
								</div>
								<div class="col-md-12">
									<div class="form-group">
										<label>Group</label>
										<input name="Group" class="form-control" value="" />
									</div>
								</div>
								<div class="col-md-12" id="UrlDocument">
									<div class="form-group">
										<label>Url</label>
										<input id="UrlDocumentInput" name="Url" class="form-control" value="" />
									</div>
								</div>
								<div class="col-md-12">
									<div class="form-group">
										<label>Comments</label>
										<textarea name="Comments" class="form-control ckeditor" value=""></textarea>
									</div>
								</div>
								<div class="col-md-12" id="FileInputDocument">
									<div class="form-group">
										<label>File</label>
										<input id="fileinput" name="File" class="dropify" type="file" onchange="ValidateSize(this)" />
									</div>
								</div>
							</div>
						</div>
					</div>
					<button type="submit" class="btn btn-primary">Save changes</button>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
				<!-- <button type="button" class="btn btn-primary">Save changes</button> -->
			</div>
		</div>
	</div>
</div>


<!-- Modal show all document versions -->
<div class="modal fade bd-example-modal-lg" id="ShowDocumentVersions" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
	 aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered  modal-lg" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLongTitle">Add document</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<table id="DocumentVersionTabe-table" class="table table-striped mb-4 bg-white table-bordered">
					<thead>
						<tr>
							<th>Title</th>
							<th>Coments</th>
							<th>File</th>
							<th>Version</th>
						</tr>
					</thead>
					<tbody id="DocumntVersionList">
					</tbody>

				</table>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
				<!-- <button type="button" class="btn btn-primary">Save changes</button> -->
			</div>
		</div>
	</div>
</div>


<!-- Modal add new document version  -->
<div class="modal fade" id="AddNewVersionModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
	 aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLongTitle">Add document</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<form id="formAddDocumentVersion" role="form" enctype="multipart/form-data">
					<input id="DocumentId" name="DocumentId" class="form-control" type="hidden" />
					<div class="form-body">
						<div class="row p-t-20">
							<div class="col-md-12">
								<div class="form-group">
									<div class="checkbox-container">
										<div class="custom-control custom-checkbox">
											<input type="checkbox" name="IsMajorVersion" class="custom-control-input " id="IsMajorVersion" />
											<label class="custom-control-label" for="IsMajorVersion">Is Major version </label>
										</div>
									</div>
								</div>

							</div>
							<div class="col-md-12">
								<div class="form-group">
									<label>Comments</label>
									<textarea name="Comments" class="form-control ckeditor" value=""></textarea>
								</div>
							</div>
							<div class="col-md-12">
								<div class="form-group">
									<label>File</label>
									<input id="NewVersionFileInput" name="File" class="dropify custom-file-input" type="file" onchange="ValidateSize(this)" required />
								</div>
							</div>
						</div>
					</div>
					<button type="submit" class="btn btn-primary">Save changes</button>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
				<!-- <button type="button" class="btn btn-primary">Save changes</button> -->
			</div>
		</div>
	</div>
</div>


<!-- Modal edit document info -->
<div class="modal fade" id="EditDocumentModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
	 aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLongTitle">Add document</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<form id="formEditDocument" role="form" enctype="multipart/form-data">
				<div class="modal-body">

					<input id="DocumenEdittId" name="DocumentId" class="form-control" type="hidden" />
					<div class="form-body">
						<div class="row p-t-20">

							<div class="col-md-12">
								<label>Document type</label>
								<select name="DocumentTypeId" asp-items="ViewBag.ListDocumentType" class="form-control" id="DocumentTypeId">
									<option value=""></option>
								</select>
							</div>

							<div class="col-md-12">
								<div class="form-group">
									<label>Document Code</label>
									<input id="DocumentCode" name="DocumentCode" class="form-control" value="" maxlength="20" />
								</div>
							</div>
							<div class="col-md-12">
								<div class="form-group">
									<label>Tile</label>
									<input id="Tile" name="Tile" class="form-control" value="" required />
								</div>
							</div>
							<div class="col-md-12">
								<div class="form-group">
									<label>Description</label>
									<textarea id="Description" name="Description" class="form-control ckeditor" value=""></textarea>

								</div>
							</div>
							<div class="col-md-12">
								<div class="form-group">
									<label>Group</label>
									<input id="Group" name="Group" class="form-control" value="" />
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
					<button type="submit" class="btn btn-primary">Edit</button>
				</div>
			</form>
		</div>
	</div>
</div>


@section Scripts
{
	<script type="text/javascript">

		const toast = new ToastNotifier();

		$(document).ready(function () {
		});

		function AddNewDocument() {

			$('#AddDocumentModal').modal('show');

		}


		$('#AddDocumentSelectCategoryId').change(function () {

			const categoryId = $(this).val().split('_')[0];
			const categoryCode = $(this).val().split("_").pop();
			$("#DocumentCategoryId").val(categoryId);
			

			switch(categoryCode) {
			case '1':
					$("#UrlDocument").hide();
					$("#DocumentTypeBlock").show();
					$("#FileInputDocument").show();
					$("#blockAddDocuments").show();

					$('#UrlDocumentInput').removeAttr('required');
					$('#fileinput').attr('required', 'required');
				break;
			case '2':
					$("#UrlDocument").hide();
					$("#DocumentTypeBlock").hide();
					$("#FileInputDocument").show();
					$("#blockAddDocuments").show();

					$('#UrlDocumentInput').removeAttr('required');
					$('#fileinput').attr('required', 'required');
				break;
			case '3':
					$("#UrlDocument").show();
					$("#DocumentTypeBlock").hide();
					$("#FileInputDocument").hide();
					$("#blockAddDocuments").show();

					$('#fileinput').removeAttr('required');
					$('#UrlDocumentInput').attr('required', 'required');
				break;
			default:
				$("#blockAddDocuments").hide();
			}

			
		});

		function AddNewDocumntVersions(documentId) {
			$('#AddNewVersionModal').modal('show');
			$("#DocumentId").val(documentId);
		}

		function getDocumntVersions(documentId) {
			$.ajax({
				url: '/Documents/GetAllDocumentVersion',
				method: 'get',
				contentType: "application/json; charset=utf-8",
				data: { documentId: documentId },
				success: function (data) {
					if (data.is_success) {

						$("#DocumntVersionList").empty();
						$('#ShowDocumentVersions').modal('show');

						$.each(data.result,
							function (index, value) {
								var html =
									`<tr>
																			<td>${value.document.title}</td>"
																			<td> ${value.comments}</td>
																			<td><a href="#" onclick ="downloadFile('${value
										.fileStorageId
									}')">${
									value.fileName}</a></td>
																			<td>${value.versionNumber.toFixed(1)}</td>`;
								$("#DocumntVersionList").append(html);
							});
					} else {
						toast.notifyErrorList(data.error_keys);
					}

				},
				error: function (error) {
					console.log(error);
				}
			});
		}

		function downloadFile(fileId) {

			if (fileId != null && fileId != 'null')
				window.location.href = '/api/File/' + "GetFile?id=" + fileId;
		}

		$("#formAddDocumentVersion").submit(function (e) {
			var formData = new FormData();
			var file = $('#NewVersionFileInput')[0].files[0];
			formData.append('file', file);

			console.log($(this).serializeArray());

			$.each($(this).serializeArray(),
				function (i, input) {

					if (input.name === "IsMajorVersion")
						input.value = true;

					formData.append(input.name, input.value);
				});

			console.log(formData);

			$.ajax({
				type: "POST",
				processData: false,
				contentType: false,
				url: "/Documents/AddNewDocumentVersion",
				data: formData,
				success: function (data) {
					if (data.is_success) {
						GetAllDocuments();
						$('#AddNewVersionModal').modal('hide');
						$("#formAddDocumentVersion").trigger('reset');
						toast.notifySuccess("Save succes");
					} else {
						toast.notifyErrorList(data.error_keys);
					}
				}
			});

			return false;
		});

		$("#formAddDocument").submit(function (e) {

			var formData = new FormData();
			var file = $('#fileinput')[0].files[0];
			formData.append('file', file);

			$.each($(this).serializeArray(),
				function (i, input) {
					formData.append(input.name, input.value);
				});

			$.ajax({
				type: "POST",
				processData: false,
				contentType: false,
				url: "/Documents/Create",
				data: formData,
				success: function (data) {
					if (data.is_success) {
						toast.notifySuccess("Save succes");
						$('#AddDocumentModal').modal('hide');
						$("#formAddDocument").trigger('reset');
						$("#render_document_Categories").DataTable().draw();

					} else {
						toast.notifyErrorList(data.error_keys);
					}
				}
			});

			return false;
		});

		$("#formEditDocument").submit(function (e) {

			var formData = new FormData();

			$.each($(this).serializeArray(),
				function (i, input) {
					formData.append(input.name, input.value);
				});

			$.ajax({
				type: "POST",
				processData: false,
				contentType: false,
				url: "/Documents/Edit",
				data: formData,
				success: function (data) {
					if (data.is_success) {
						GetAllDocuments();
						$('#EditDocumentModal').modal('hide');
					} else {
						toast.notifyErrorList();
					}
				}
			});

			return false;
		});

		function getAllChechedDeleteDocuments() {

			var listDocumetId = [];
			$('input:checkbox.checkedDocumentsToDelete').each(function () {

				if ($(this).is(':checked'))
					listDocumetId.push($(this).attr('id'));

			});

			if (listDocumetId.length > 0) {
				$.ajax({
					type: "POST",
					url: '/Documents/DeleteDocumnetsByListIdAsync',
					method: 'post',
					data: { listDocumetId: listDocumetId },
					success: function (data) {
						if (data.is_success) {
							GetAllDocuments();
							$(listDocumetId).each(function (index) {
								deleteDocuments(index);
							});
						}
					},
					error: function (error) {
						console.log(error);
					}
				});
			}
		}

		function deleteDocuments(DocumentId) {
			const dbService = new DataInjector();
			const filters = [
				{
					parameter: "DocumentId",
					criteria: "equals",
					value: DocumentId
				}
			];

			dbService.deletePermanentWhereAsync("ControlDocuments", filters).then(response => {
				if (response.is_success) {

				} else {
					toast.notifyErrorList(response.error_keys);
				}
			}).catch(e => {
				toast.notifyErrorList(e);
			});

			dbService.deletePermanentWhereAsync("RequirementDocuments", filters).then(response => {
				if (response.is_success) {

				} else {
					toast.notifyErrorList(response.error_keys);
				}
			}).catch(e => {
				toast.notifyErrorList(e);
			});
		}

		function EditDocument(documentId) {
			$.ajax({
				url: '/api/Documents/GetDocumentsByIdAsync',
				method: 'get',
				contentType: "application/json; charset=utf-8",
				data: { documentId: documentId },
				success: function (data) {
					if (data.is_success) {

						$('#DocumentTypeId option[value=' + data.result.documentTypeId + ']').attr('selected', 'selected');
						$("#DocumenEdittId").val(data.result.documentId);
						$("#DocumentCode").val(data.result.documentCode);
						$("#Tile").val(data.result.title);
						$("#Description").val(data.result.description);
						$("#Group").val(data.result.group);
						$('#EditDocumentModal').modal('show');

						$("#render_document_Categories").DataTable().draw();

					} else {
						toast.notifyErrorList(data.error_keys);
					}
				},
				error: function (error) {
					console.log(error);
				}
			});
		}

		function htmlStatus(id, currentStateName, listNextState) {

			var lisstateHtml = "";

			if (listNextState.length > 0) {
				$.each(listNextState,
					function (key, value) {
						lisstateHtml += `<a class="dropdown-item" href="#" onclick="changeStatus('${id}','${
							value.workFlowId}','${value.id}')">${value.name}</a>`;
					});

				var html = `
								<div class="dropdown">
									<button type="button" class="btn btn-link text-black-50"  data-toggle="dropdown"
										aria-haspopup="true" aria-expanded="false" id="Status_${id}">
										<span class="align-middle button-label">${currentStateName}</span>
										<span class="material-icons mr-1 align-middle">arrow_drop_down</span>
									</button>
									<div class="dropdown-menu" aria-labelledby="Status_${id}">
										${lisstateHtml}
									</div>
								</div>`;

				return html;
			}

			var html = `
									<button type="button" class="btn btn-link text-black-50" aria-haspopup="true" aria-expanded="false">
										<span class="align-middle button-label">${currentStateName}</span>
									</button>`;

			return html;


		}

		function changeStatus(entryId, workFlowId, newStateId) {
			$.ajax({
				type: "POST",
				url: "/Documents/ChangeDocumentStatus",
				data: { EntryId: entryId, WorkFlowId: workFlowId, NewStateId: newStateId },
				success: function (data) {
					if (data.is_success) {
						$("#" + data.result.entryId).empty();
						$("#" + data.result.entryId).append(htmlStatus(data.result.entryId, data.result.currentStateName, data.result.listNextState));

					} else {
						toast.notifyErrorList();
					}
				}
			});
		}

		function ValidateSize(file) {
			var FileSize = file.files[0].size / 1024 / 1024;
			if (FileSize > 25) {
				alert('File size exceeds 25 MB');
				$(file).val(''); //for clearing with Jquery
			} else {

			}
		}


			//function AddListDocumentType() {

			//	$.ajax({
			//		url: '/DocumentTypes/GetAllDocumetTypesAsync',
			//		method: 'get',
			//		contentType: "application/json; charset=utf-8",
			//		success: function (data) {
			//			if (data.is_success) {

			//				$(".DocumentTypeList").empty();
			//				$.each(data.result,
			//					function (index, value) {

			//						var html =
			//							`<a class="dropdown-item" href="#" onclick="addNewDocument('${value.id}','${value
			//								.code}')" >${value.name}</a>`;
			//						$(".DocumentTypeList").append(html);
			//					});
			//			} else {
			//				toast.notifyErrorList(data.error_keys);
			//			}
			//		},
			//		error: function (error) {
			//			console.log(error);
			//		}
			//	});
			//}

			//function GetAllDocuments() {

			//	$.ajax({
			//		type: "Get",
			//		url: '/Documents/GetAllDocuments',
			//		method: 'get',
			//		dataType: 'json',
			//		success: function (data) {
			//			if (data.is_success) {
			//				$("#tableListDocuments").empty();
			//				$.each(data.result,
			//					function (index, value) {

			//						var html =
			//							`<tr>
			//									<td>
			//										<div class="checkbox-container">
			//											<div class="custom-control custom-checkbox">
			//												<input type="checkbox" class="custom-control-input checkedDocumentsToDelete" id="${
			//							value.id}"/>
			//												<label class="custom-control-label" for="${value.id}"></label>
			//											</div>
			//										</div>
			//									</td>
			//									<td> ${value.title}</td>
			//									<td> ${value.documentCode}</td>
			//									<td style="white-space: pre-wrap;">${value.description === null
			//								? ""
			//								: value.description}</td>
			//									<td><a href="${value.documentType.code == 3 ? value.lastUrl : "#"
			//							}" onclick ="downloadFile('${value.lastFileId}')" target="_blank">${value
			//								.documentType.code ==
			//								3
			//								? value.lastUrl
			//								: value.fileName}</a></td>
			//									<td>${value.group == null ? "" : value.group}</td>
			//									<td>${value.documentType.name}</td>
			//									<td> ${value.lastVersion.toFixed(1)}</td>
			//									<td id="${value.lastVersionId}">
			//										${value.documentType.code == 1 ? htmlStatus(value.lastVersionId, value.currentStateName, value.listNextState) : ""}
			//									</td>

			//									<td> ${
			//							value.isDeleted}</td>
			//									<td>
			//										<button type="button" class="btn btn-light" onclick ="getDocumntVersions('${
			//							value.id}')" ${
			//							value.documentType.code == 1 ? "" : "disabled"
			//							}><span class="material-icons material-icons-outlined mr-1 align-middle">remove_red_eye</span>Show version</button>
			//										<button type="button" class="btn btn-light" onclick ="AddNewDocumntVersions('${
			//							value.id}')" ${
			//							value.documentType.code == 1 ? "" : "disabled"
			//							}><span class="material-icons mr-1 align-middle">add_circle_outline</span>Add version</button>
			//										<button type="button" class="btn btn-light" onclick ="EditDocument('${
			//							value.id}')"><i class="material-icons">edit</i></button>
		//									</td>
		//								</tr>`;
		//						$("#tableListDocuments").append(html);
		//					});
		//			} else {
		//				toast.notifyErrorList(data.error_keys);
		//			}

		//		},
		//		error: function (error) {
		//			console.log(error);
		//		}
		//	});
		//}

	</script>
}


@*<div class="common-control">
		<div class="control-area justify-content-end">
			<div class="dropdown">
				<button type="button" class="btn btn-link text-black-50" data-toggle="dropdown"
						aria-haspopup="true" aria-expanded="false" id="DocumentTypeList">
					<span class="material-icons mr-1 align-middle">add_circle_outline</span>
					<span class="align-middle button-label">Adaugă</span>
					<span class="material-icons mr-1 align-middle">arrow_drop_down</span>
				</button>
				<div class="dropdown-menu DocumentTypeList" aria-labelledby="DocumentTypeList">
				</div>
			</div>

			<button type="button" class="btn btn-link text-black-50" onclick="getAllChechedDeleteDocuments()">
				<span class="material-icons mr-1 align-middle">clear</span>
				<span class="align-middle button-label">Șterge</span>
			</button>
		</div>
	</div>*@




@*<table id="data-table" class="table table-striped mb-4 bg-white table-bordered">
		<thead>
			<tr>
				<th></th>
				<th>Title</th>
				<th>Document Code</th>
				<th>Document/Description</th>
				<th>File</th>
				<th>Group</th>
				<th>Type</th>
				<th>Version</th>
				<th>Status</th>
				<th>Is delete</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody id="tableListDocuments">
		</tbody>

	</table>*@