@using GR.Core.Razor.Enums
@using GR.Core.Razor.TagHelpers.Drawers
@{
    ViewData["Title"] = Localizer["tables"];
}

@{
    var dynamicTableListConfig = new ListTagHelperModel
    {
        Title = Localizer["tables"],
        SubTitle = "",
        ListIdentifier = "dynamicTableGrid",
        Api = new ListApiConfigurationViewModel
        {
            Url = Url.Action("OrderList"),
            Parameters = new Dictionary<string, string>
{
                { "isStatic",  "false" }
            }
        },
        StyleAttributes = new List<InlineStyleAttribute>
{
                    new InlineStyleAttribute("width", "100%")
                },
        ListActionDrawer = new DropDownListActionDrawer(),
        RenderColumns = new List<ListRenderColumn>
{
                    new ListRenderColumn(Localizer["entity_name"], "name"),
                    new ListRenderColumn(Localizer["entity_type"], "entityType"),
                    new ListRenderColumn(Localizer["is_deleted"], "isDeleted")
                    {
                        BodySystemTemplate = RenderCellBodySystemTemplate.Boolean
                    },
                    new ListRenderColumn(Localizer["created"], "created"),
                    new ListRenderColumn(Localizer["author"], "author"),
                    new ListRenderColumn(Localizer["changed"], "changed"),
                    new ListRenderColumn(Localizer["modified_by"], "modifiedBy")
                },
        HeadButtons = new List<UrlTagHelperViewModel>
{
                    new UrlTagHelperViewModel
                    {
                        AspAction = "Create",
                        AspController = "Table",
                        ButtonName = $"<i class='mdi mdi-plus mr-2' aria-hidden='true'></i> {Localizer["add_table"]}",
                        Description = Localizer["add_table_info"],
                        BootstrapButton = BootstrapButton.Success
                    }
                },
        HasActions = true,
        ListActions = new List<ListActionViewModel>
{
                    new ListActionViewModel
                    {
                        HasIcon = false,
                        Name = Localizer["edit"],
                        Url = Url.Action("Edit"),
                        ActionParameters = new List<ActionParameter>
{
                            new ActionParameter("id", "id"),
                        },
                        ButtonType = BootstrapButton.Info
                    },
                    new ListActionViewModel
                    {
                        HasIcon = false,
                        Name = "Scaffold",
                        IsJsEvent = true,
                        ButtonEvent = new JsActionButtonEvent
                        {
                            JsEvent = JsEvent.OnClick,
                            JsEventHandler = "scaffoldClickHandler('${row.id}')"
                        },
                        ButtonType = BootstrapButton.Warning
                    },
                    new ListActionViewModel
                    {
                        HasIcon = false,
                        Name = Localizer["delete"],
                        IsJsEvent = true,
                        ButtonEvent = new JsActionButtonEvent
                        {
                            JsEvent = JsEvent.OnClick,
                            JsEventHandler = "deleteTableClickHandler('${row.id}')"
                        },
                        ActionParameters = new List<ActionParameter>
{
                            new ActionParameter("userId", "id")
                        },
                        ButtonType = BootstrapButton.Danger
                    }
                },
        Documentation = ""
    };

    var staticTableListConfig = new ListTagHelperModel
    {
        Title = Localizer["tables"],
        SubTitle = "",
        ListIdentifier = "staticTableGrid",
        Api = new ListApiConfigurationViewModel
        {
            Url = Url.Action("OrderList"),
            Parameters = new Dictionary<string, string>
{
                { "isStatic",  "true" }
            }
        },
        StyleAttributes = new List<InlineStyleAttribute>
{
                    new InlineStyleAttribute("width", "100%")
                },
        ListActionDrawer = new DropDownListActionDrawer(),
        RenderColumns = new List<ListRenderColumn>
{
                    new ListRenderColumn(Localizer["entity_name"], "name"),
                    new ListRenderColumn(Localizer["entity_type"], "entityType"),
                    new ListRenderColumn(Localizer["is_deleted"], "isDeleted")
                    {
                        BodySystemTemplate = RenderCellBodySystemTemplate.Boolean
                    },
                    new ListRenderColumn(Localizer["created"], "created"),
                    new ListRenderColumn(Localizer["author"], "author"),
                    new ListRenderColumn(Localizer["changed"], "changed"),
                    new ListRenderColumn(Localizer["modified_by"], "modifiedBy")
                },
        HeadButtons = new List<UrlTagHelperViewModel>(),
        HasActions = true,
        ListActions = new List<ListActionViewModel>
{
                    new ListActionViewModel
                    {
                        HasIcon = false,
                        Name = Localizer["edit"],
                        Url = Url.Action("Edit"),
                        ActionParameters = new List<ActionParameter>
{
                            new ActionParameter("id", "id"),
                        },
                        ButtonType = BootstrapButton.Info
                    },
                    new ListActionViewModel
                    {
                        HasIcon = false,
                        Name = "Scaffold",
                        IsJsEvent = true,
                        ButtonEvent = new JsActionButtonEvent
                        {
                            JsEvent = JsEvent.OnClick,
                            JsEventHandler = "scaffoldClickHandler('${row.id}')"
                        },
                        ButtonType = BootstrapButton.Warning
                    }
},
        Documentation = ""
    };
}


<div class="card mb-4">
    <div class="card-header p-0">
        <ul class="nav nav-tabs active-thik nav-primary border-0" id="myTab" role="tablist">
            <li class="nav-item">
                <a class="nav-link px-4 py-3 rounded-0 active" id="custom-tab" data-toggle="tab" href="#custom" role="tab" aria-controls="custom" aria-selected="true">Custom entities</a>
            </li>
            <li class="nav-item">
                <a class="nav-link px-4 py-3  rounded-0" id="system-tab" data-toggle="tab" href="#system" role="tab" aria-controls="system" aria-selected="false">System entities</a>
            </li>
        </ul>
    </div>
    <div class="card-body">
        <div class="tab-content" id="myTabContent">
            <div class="tab-pane fade show active" id="custom" role="tabpanel" aria-labelledby="custom-tab">
                <JList asp-for="dynamicTableListConfig"></JList>
            </div>
            <div class="tab-pane fade" id="system" role="tabpanel" aria-labelledby="system-tab">
                <JList asp-for="staticTableListConfig"></JList>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script src="~/assets/entity-service.js" asp-append-version="true"></script>
    <script language="javascript" type="text/javascript">
        const service = new EntityService();

        function deleteTableClickHandler(id) {
            service.deleteTableByIdWithPrompt(id);
        }

        function scaffoldClickHandler(id) {
            service.scaffold(id);
        }
    </script>
}
