@using GR.Core.Razor.Enums
@using GR.Core.Razor.TagHelpers.Drawers
@{
    ViewData["Title"] = Localizer["tables"];
}

@{
    var dynamicTableListConfig = new ListTagHelperModel
    {
        Title = Localizer["tables"],
        SubTitle = "",
        ListIdentifier = "dynamicTableGrid",
        Api = new ListApiConfigurationViewModel
        {
            Url = Url.Action("OrderList"),
            Parameters = new Dictionary<string, string>
            {
                { "isStatic",  "false" }
            }
        },
        StyleAttributes = new List<InlineStyleAttribute>
{
                    new InlineStyleAttribute("width", "100%")
                },
        ListActionDrawer = new DropDownListActionDrawer(),
        RenderColumns = new List<ListRenderColumn>
{
                    new ListRenderColumn(Localizer["entity_name"], "name"),
                    new ListRenderColumn(Localizer["entity_type"], "entityType"),
                    new ListRenderColumn(Localizer["is_deleted"], "isDeleted")
                    {
                        BodySystemTemplate = RenderCellBodySystemTemplate.Boolean
                    },
                    new ListRenderColumn(Localizer["created"], "created"),
                    new ListRenderColumn(Localizer["author"], "author"),
                    new ListRenderColumn(Localizer["changed"], "changed"),
                    new ListRenderColumn(Localizer["modified_by"], "modifiedBy")
                },
        HeadButtons = new List<UrlTagHelperViewModel>
{
                    new UrlTagHelperViewModel
                    {
                        AspAction = "Create",
                        AspController = "Table",
                        ButtonName = $"<i class='mdi mdi-plus mr-2' aria-hidden='true'></i> {Localizer["add_table"]}",
                        Description = Localizer["add_table_info"],
                        BootstrapButton = BootstrapButton.Success
                    }
                },
        HasActions = true,
        ListActions = new List<ListActionViewModel>
{
                    new ListActionViewModel
                    {
                        HasIcon = false,
                        Name = Localizer["edit"],
                        Url = Url.Action("Edit"),
                        ActionParameters = new List<ActionParameter>
{
                            new ActionParameter("id", "id"),
                        },
                        ButtonType = BootstrapButton.Info
                    },
                    new ListActionViewModel
                    {
                        HasIcon = false,
                        Name = "Scaffold",
                        IsJsEvent = true,
                        ButtonEvent = new JsActionButtonEvent
                        {
                            JsEvent = JsEvent.OnClick,
                            JsEventHandler = "scaffoldClickEvent('${row.id}')"
                        },
                        ButtonType = BootstrapButton.Warning
                    },
                    new ListActionViewModel
                    {
                        HasIcon = false,
                        Name = Localizer["delete"],
                        IsJsEvent = true,
                        ButtonEvent = new JsActionButtonEvent
                        {
                            JsEvent = JsEvent.OnClick,
                            JsEventHandler = "CreateAlert('${row.id}"
                        },
                        ActionParameters = new List<ActionParameter>
{
                            new ActionParameter("userId", "id")
                        },
                        ButtonType = BootstrapButton.Danger
                    }
                },
        Documentation = ""
    };

    var staticTableListConfig = new ListTagHelperModel
    {
        Title = Localizer["tables"],
        SubTitle = "",
        ListIdentifier = "staticTableGrid",
        Api = new ListApiConfigurationViewModel
        {
            Url = Url.Action("OrderList"),
            Parameters = new Dictionary<string, string>
            {
                { "isStatic",  "true" }
            }
        },
        StyleAttributes = new List<InlineStyleAttribute>
{
                    new InlineStyleAttribute("width", "100%")
                },
        ListActionDrawer = new DropDownListActionDrawer(),
        RenderColumns = new List<ListRenderColumn>
{
                    new ListRenderColumn(Localizer["entity_name"], "name"),
                    new ListRenderColumn(Localizer["entity_type"], "entityType"),
                    new ListRenderColumn(Localizer["is_deleted"], "isDeleted")
                    {
                        BodySystemTemplate = RenderCellBodySystemTemplate.Boolean
                    },
                    new ListRenderColumn(Localizer["created"], "created"),
                    new ListRenderColumn(Localizer["author"], "author"),
                    new ListRenderColumn(Localizer["changed"], "changed"),
                    new ListRenderColumn(Localizer["modified_by"], "modifiedBy")
                },
        HeadButtons = new List<UrlTagHelperViewModel>(),
        HasActions = true,
        ListActions = new List<ListActionViewModel>
{
                    new ListActionViewModel
                    {
                        HasIcon = false,
                        Name = Localizer["edit"],
                        Url = Url.Action("Edit"),
                        ActionParameters = new List<ActionParameter>
{
                            new ActionParameter("id", "id"),
                        },
                        ButtonType = BootstrapButton.Info
                    },
                    new ListActionViewModel
                    {
                        HasIcon = false,
                        Name = "Scaffold",
                        IsJsEvent = true,
                        ButtonEvent = new JsActionButtonEvent
                        {
                            JsEvent = JsEvent.OnClick,
                            JsEventHandler = "scaffoldClickEvent('${row.id}')"
                        },
                        ButtonType = BootstrapButton.Warning
                    }
},
        Documentation = ""
    };
}


<div class="card mb-4">
    <div class="card-header p-0">
        <ul class="nav nav-tabs active-thik nav-primary border-0" id="myTab" role="tablist">
            <li class="nav-item">
                <a class="nav-link px-4 py-3 rounded-0 active" id="custom-tab" data-toggle="tab" href="#custom" role="tab" aria-controls="custom" aria-selected="true">Custom entities</a>
            </li>
            <li class="nav-item">
                <a class="nav-link px-4 py-3  rounded-0" id="system-tab" data-toggle="tab" href="#system" role="tab" aria-controls="system" aria-selected="false">System entities</a>
            </li>
        </ul>
    </div>
    <div class="card-body">
        <div class="tab-content" id="myTabContent">
            <div class="tab-pane fade show active" id="custom" role="tabpanel" aria-labelledby="custom-tab">
                <JList asp-for="dynamicTableListConfig"></JList>
            </div>
            <div class="tab-pane fade" id="system" role="tabpanel" aria-labelledby="system-tab">
                <JList asp-for="staticTableListConfig"></JList>
            </div>
        </div>
    </div>
</div>






@*<div class="card">
        <div class="card-body">
            <h4 class="card-title">@Localizer["tables"]</h4>
            <h6 class="card-subtitle"></h6>
            <div class="table-responsive">
                <div class="mt-2">
                    <div class="d-flex">
                        <div class="mr-auto">
                            <div class="form-group">
                                <a asp-action="Create" class="btn btn-primary btn-sm">
                                    <i class="mdi mdi-circle-edit-outline mr-2" aria-hidden="true"></i>@Localizer["add_table"]
                                </a>
                                <small>@Localizer["add_table_info"]</small>
                            </div>
                        </div>
                    </div>
                </div>
                <table class="table table-striped table-bordered" id="tableGrid">
                    <thead class="full-width">
                        <tr>
                            <th>@Localizer["entity_name"]</th>
                            <th>@Localizer["entity_type"]</th>
                            <th>@Localizer["created"]</th>
                            <th>@Localizer["changed"]</th>
                            <th>@Localizer["list_actions"]</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>*@

@section Scripts{
    <script type="text/javascript" language="javascript">

		function getTokenAntiForgery() {
			const token = '@Html.AntiForgeryToken()';
			return $(token).val();
		}
    </script>
    <script language="javascript" type="text/javascript">
		@*$(document).ready(function($) {
			const tableId = '#tableGrid';
			if ($.fn.DataTable.isDataTable(tableId)) {
				$(tableId).dataTable().fnDestroy();
				$(tableId).dataTable().empty();
			}

			$(tableId).DataTable({
				"language": {
					"url": `http://cdn.datatables.net/plug-ins/1.10.19/i18n/${window.getCookie("language")}.json`
				},
				dom: '<"CustomizeColumns">lBfrtip',
				"processing": true, // for show progress bar
				"serverSide": true, // for process server side
				"filter": true, // this is for disable filter (search box)
				"orderMulti": false, // for disable multiple column at once
				"destroy": true,
				"ajax": {
					"url": '@Url.Action("OrderList")',
					"type": "POST"
				},
				"columns": [
					{ "data": "name" },
					{ "data": "entityType" },
					{ "data": "created" },
					{ "data": "changed" },
					{
						data: null,
						render: function(data, type, row) {
							return `<div class="btn-group" role="group" aria-label="Action buttons">
									<a class="btn btn-info btn-sm" href="@Url.Action("Edit")?id=${row.id}">${window
								.translate("edit")}</a>
									<a class="btn btn-warning btn-sm" onclick="scaffoldClickEvent('${row.id
								}')" href="javascript:void(0)">Scaffold</a>
									${!row.isSystem ? `<a href="javascript:void(0)" class='btn btn-danger btn-sm' onclick="CreateAlert('${row.id}');">${window.translate("delete")}</a>` : ``}
									</div>`;
						}
					}
				]
			});
		});*@

		function CreateAlert(rowId) {
			const object = {
				alertTitle: "Delete this table?",
				alertText: "Are you sure that you want to leave this table?",
				confirmButtonText: "Yes, delete it!",
				rowId: rowId,
				tableId: "#tableGrid",
				urlForDelete: '@Url.Action("DeleteTable")',
				type: "warning",
				onDeleteSuccess: "Table has been deleted.",
				onDeleteFail: "Something wrong",
				onServerNoResponse: "Api not respond or not have permissions."
			};
			DeleteData(object);
		}

		function scaffoldClickEvent(id) {
			if (!id) {
				Swal.fire({
					type: 'error',
					title: 'Oops...',
					text: 'Something went wrong!'
				});
				return;
			}
			swal({
				title: window.translate("scaffold_modal_title"),
				text: window.translate("scaffold_modal_text"),
				type: "warning",
				showCancelButton: true,
				confirmButtonColor: "#3085d6",
				cancelButtonColor: "#d33",
				confirmButtonText: window.translate("scaffold_modal_confirm"),
				cancelButtonText: window.translate("cancel")
			}).then((result) => {
				if (result.value) {
					location.href = `@Url.Action("Scaffold", "Page")?tableId=${id}`;
				}
			});
		}
    </script>
}
