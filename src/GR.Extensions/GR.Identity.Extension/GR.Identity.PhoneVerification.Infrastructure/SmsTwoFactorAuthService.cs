using System.Collections.Generic;
using System.Threading.Tasks;
using GR.Core.Attributes.Documentation;
using GR.Core.Extensions;
using GR.Core.Helpers;
using GR.Core.Helpers.Global;
using GR.Core.Helpers.Responses;
using GR.Identity.Abstractions;
using GR.Identity.PhoneVerification.Abstractions;
using GR.TwoFactorAuthentication.Abstractions;
using GR.TwoFactorAuthentication.Abstractions.Events;
using GR.TwoFactorAuthentication.Abstractions.Events.EventArgs;
using Microsoft.AspNetCore.Http;

namespace GR.Identity.PhoneVerification.Infrastructure
{
    /// <summary>
    /// This class is an implementation of ITwoFactorAuthService
    /// and serve as 2-Factor via sms code verification
    /// </summary>
    [Author(Authors.LUPEI_NICOLAE, 1.1)]
    public class SmsTwoFactorAuthService : ITwoFactorAuthService
    {
        #region Injectable

        /// <summary>
        /// Inject authy
        /// </summary>
        private readonly IAuthy _authy;

        /// <summary>
        /// Inject context accessor
        /// </summary>
        private readonly IHttpContextAccessor _accessor;

        #endregion

        public SmsTwoFactorAuthService(IAuthy authy, IHttpContextAccessor accessor)
        {
            _authy = authy;
            _accessor = accessor;
        }

        /// <summary>
        /// Send code
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        public virtual async Task<ResultModel<string>> SendCodeAsync(GearUser user)
        {
            var authyToken = _accessor.HttpContext.Session.Get<string>("authy_token");
            if (authyToken.IsNullOrEmpty())
            {
                var tokenRequest = await _authy.GetUserAuthyTokenAsync(user);
                if (!tokenRequest.IsSuccess) return tokenRequest;
                authyToken = tokenRequest.Result;
            }

            var sendSmsRequest = await _authy.SendSmsAsync(authyToken);
            if (!sendSmsRequest.IsSuccess) return sendSmsRequest;

            _accessor.HttpContext.Session.Set("authy_token", authyToken);
            return sendSmsRequest;
        }

        /// <summary>
        /// Get action message
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        public virtual async Task<string> GetActionMessageAsync(GearUser user)
        {
            var hiddenNumber = _authy.GenerateHiddenPhoneNumber(user?.PhoneNumber);
            var message = $"Enter the verification code generated by your phone ending in {hiddenNumber}.";
            return await Task.FromResult(message);
        }

        /// <summary>
        /// Validate received code
        /// </summary>
        /// <param name="user"></param>
        /// <param name="code"></param>
        /// <returns></returns>
        public virtual async Task<ResultModel<string>> ValidateReceivedCodeAsync(GearUser user, string code)
        {
            var authyToken = _accessor.HttpContext.Session.Get<string>("authy_token");
            if (authyToken.IsNullOrEmpty() || user == null || code == null)
                return new InvalidParametersResultModel<string>("Invalid code or user, try to re login");

            var verifyResponse = await _authy.VerifyTokenAsync(authyToken, code, user.Id);
            if (!verifyResponse.IsSuccess) return verifyResponse;

            if (!verifyResponse.IsSuccess) return verifyResponse;
            TwoFactorAuthEvents.Events.TwoFactorVerified(new SecondFactorVerifiedEventArgs
            {
                HttpContext = _accessor.HttpContext,
                Data = new Dictionary<string, string>
                {
                    { "authyId", authyToken },
                    { "code", code }
                },
                UserId = user.Id,
                AuthMethod = "Sms"
            });

            _accessor.HttpContext.Session.Remove("authy_token");
            return verifyResponse;
        }
    }
}
