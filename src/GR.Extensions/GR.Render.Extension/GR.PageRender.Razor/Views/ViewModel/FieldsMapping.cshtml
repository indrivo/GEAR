@using GR.Entities.Abstractions.Models.Tables
@using GR.PageRender.Abstractions.Models.ViewModels
@{
    ViewData["Title"] = Localizer["system_view_model_mapping_title"];
    var viewModel = (ViewModel)ViewBag.ViewModel;
    var availableTableFields = (IList<TableModelField>
    )ViewBag.TableFields;
    var baseProps = (List<string>
        )ViewBag.BaseProps;
}

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>@Localizer["system_view_model_field_name"]</th>
                        <th>@Localizer["system_map_table_field"]</th>
                        <th>Virtual data type</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in viewModel.ViewModelFields.OrderBy(x => x.Name).ToList())
                    {
                        <tr data-id="@item.Id">
                            <td>@item.Name</td>
                            <td>
                                @if (!baseProps.Contains(item.Name))
                                {
                                    <select class="mapChangeEvent form-control" asp-items="@(new SelectList(availableTableFields, "Id", "Name" , item.TableModelFieldsId))">
                                        <option value="#">@Localizer["system_viewmodel_field_no_reference"]</option>
                                    </select>
                                }
                                else
                                {
                                    <code>System field</code>
                                }
                            </td>
                            <td>
                                @if (!baseProps.Contains(item.Name))
                                {
                                    <select asp-for="@item.VirtualDataType" class="virtualTypeChangeEvent form-control" asp-items="Html.GetEnumSelectList<ViewModelVirtualDataType>()"></select>
                                }
                                else
                                {
                                    <code>System field</code>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="card-footer">
        <a asp-action="Index" class="btn btn-link"> @Localizer["back"]</a>
    </div>
</div>

@section Scripts{
    <script>
        const db = new DataInjector();
        const toast = new ToastNotifier();
                $(document).ready(function() {
                    $(".mapChangeEvent").on("change",
                        function() {
                            const ctx = $(this);
                            const tableFieldId = ctx.val();
                            const viewModelFieldId = ctx.closest("tr").data("id");

                            $.ajax({
                                url: "@Url.Action("FieldsMapping")",
                                method: "post",
                                data: {
                                    viewModelFieldId: viewModelFieldId,
                                    tableFieldId: tableFieldId
                                },
                                success: function(data) {
                                    if (data && data.is_success) {
                                        Swal.fire(
                                            'Info',
                                            'Field mapped',
                                            'success'
                                        );
                                    } else {
                                        Swal.fire(
                                            'Error',
                                            'Internal Server error!',
                                            'error'
                                        );
                                    }
                                },
                                error: function(error) {
                                    Swal.fire(
                                        'Error',
                                        error,
                                        'error'
                                    );
                                }
                            });
                        });

                    $(".virtualTypeChangeEvent").on("change",
                        function() {
                            const ctx = $(this);
                            const virtualType = ctx.val();
                            const viewModelFieldId = ctx.closest("tr").data("id");
                            switch (virtualType) {
                            case "3":
                                {
                                    initManyToManyConfigurations({
                                        type: virtualType,
                                        fieldId: viewModelFieldId
                                    });
                                }
                                    break;
                                default:
                                {
                                    toast.notify({ heading: "Error", text: "On development, only Many to Many reference" });
                                }break;
                            }
                        });

                    function initManyToManyConfigurations(data) {
                        const { type, fieldId } = data;
                        Swal.fire({
                            title: window.translate("system_viewmodelfield_many_to_many_message"),
                            text: "",
                            type: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: window.translate("system_yes_continue")
                        }).then((result) => {
                            if (result.value) {
                                db.getAllWhereNoIncludesAsync("Table").then(tables => {
                                    if (tables.is_success) {
                                        const tData = tables.result.filter(x => !x.isPartOfDbContext);
                                        const tOptions = {};
                                        $.each(tData,
                                            (index, item) => {
                                                tOptions[item.id] = item.name;
                                            });
                                        const storage = [];
                                        Swal.mixin({
                                            input: 'select',
                                            inputPlaceholder: 'required',
                                            confirmButtonText: window.translate("next_step"),
                                            showCancelButton: true,
                                            preConfirm: function(prevStateData) {
                                                return new Promise((resolve, reject) => {
                                                    if (!prevStateData) reject("Data not specified");
                                                    storage.push({
                                                        index: storage.length + 1,
                                                        data: prevStateData
                                                    });
                                                    resolve();
                                                });
                                            },
                                            progressSteps: ['1', '2']
                                        }).queue([
                                            {
                                                title: window.translate("system_many_to_many_right_join_select_message"),
                                                inputOptions: tOptions
                                            },
                                            {
                                                title: window.translate("system_many_to_many_storage_entity_select"),
                                                inputOptions: tOptions
                                            }
                                        ]).then((all) => {
                                            if (all.value) {
                                                const sendData = {
                                                    referenceEntity: all.value[0],
                                                    storageEntity: all.value[1],
                                                    fieldId: fieldId
                                            };
                                                saveManyToManyConfigurations(sendData);
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }

                    function saveManyToManyConfigurations(data) {
                        $.ajax({
                            url: "@Url.Action("SaveManyToManyConfigurations")",
                            method: "post",
                            data: data,
                            success: function(data) {
                                if (data && data.is_success) {
                                    Swal.fire(
                                        'Info',
                                        window.translate("system_many_to_many_success_mapping"),
                                        'success'
                                    );
                                } else {
                                    toast.notifyErrorList(data.error_keys);
                                }
                            },
                            error: function(error) {
                                Swal.fire(
                                    'Error',
                                    window.translate("system_internal_error"),
                                    'error'
                                );
                            }
                        });
                    }
                });
    </script>
}