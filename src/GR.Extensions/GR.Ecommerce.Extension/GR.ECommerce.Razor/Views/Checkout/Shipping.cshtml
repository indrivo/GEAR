@model GR.Orders.Abstractions.ViewModels.CheckoutViewModels.CheckoutShippingViewModel

@{
	ViewData["Title"] = "Checkout";

	Guid? defaultAddress = null;
}

@section Styles {
	<style>
		.list-group {
			list-style: none;
		}

		.adress-item > label {
			cursor: pointer;
		}

		.custom-control-label {
			line-height: 1;
		}

			.custom-control-label::before,
			.custom-control-label::after {
				top: 0;
				width: 20px;
				height: 20px;
			}

		.weight-600 {
			font-weight: 600;
		}

		.fz-16 {
			font-size: 16px;
		}

		.w-130px {
			width: 130px;
			display: inline-block;
		}

		.ml-32px {
			margin-left: 32px;
		}

		.mt-38px {
			margin-top: 38px;
		}

		.adress-item:not(:last-child) > label {
			border-bottom: 1px solid #D8DCE0;
		}

		.payment-actions {
			bottom: 0;
			left: 0px;
			width: 100vw;
			padding-left: 60px;
			background-color: white;
		}

		.button-border {
			border: 1px solid #D3D4D7;
			border-radius: 4px;
		}

		.btn-cancel-order {
			color: #707070;
		}

		.btn-payment,
		.btn-cancel-order {
			font-size: 1rem;
		}

		thead {
			background-color: white;
		}

		.table tbody tr td,
		.table thead tr th {
			color: #081018;
			padding: 0 !important;
			padding-top: 7px !important;
			border: 0;
		}

			.table tbody tr td.pt-4 {
				padding-top: 1em !important;
			}

		.table tbody .product-item:last-child td {
			padding-bottom: 1em !important;
		}

		.table tbody tr td.pb-4 {
			padding-bottom: 1em !important;
		}

		.border-top-row {
			border-top: 1px solid #D8DCE0;
		}

		.address-item-new input,
		.address-item-new .select2 {
			border: 1px solid #D3D4D7;
			border-radius: 2px;
			width: 300px !important;
		}

		.select2-selection {
			border: 1px solid #D3D4D7;
		}
	</style>
}

<div class="row">
	<div class="col-md-5">
		<div class="card p-4">
			<h2 class="w-400">@Localizer["system_billing_address"]</h2>
			<ul id="address-list" class="list-group">
				@foreach (var address in Model.Addresses)
				{
					if (address.IsDefault)
					{
						defaultAddress = address.Id;
					}

					<li class="adress-item">
						<label for="a_@address.Id" class="w-100 m-0 pt-4 pb-4">
							<div class="custom-control custom-radio d-flex align-items-center weight-600">
								<input type="radio" @(address.IsDefault ? "checked='checked'" : "") id="a_@address.Id" name="customRadio" class="custom-control-input billing-address" value="@address.Id"/>
								<div class="custom-control-label ml-2"><span class="w-130px">@Localizer["system_city"]: </span>@address.ContactName</div>
							</div>

							<div class="address-data ml-32px">
								<div class="mt-2">
									<span class="w-130px">@Localizer["user_address_line_1"]:</span>
									@address.AddressLine1
								</div>
								<div class="mt-2">
									<span class="w-130px">@Localizer["user_address_line_2"]:</span>
									@address.AddressLine2
								</div>
								<div class="mt-2">
									<span class="w-130px">@Localizer["system_phone"]:</span>
									@address.Phone
								</div>
								<div class="mt-2">
									<span class="w-130px">@Localizer["user_postal_code"]:</span>
									@address.ZipCode
								</div>
							</div>
						</label>
					</li>
				}
				<li class="address-item address-item-new">
					<form id="new-address" class="w-100 pt-4 pb-4 ml-32px">
						<div class="address-data-input">
							<div class="mt-2">
								<span class="w-130px">@Localizer["system_country"]:</span>
								<select type="text" id="add-address-country" class="form-control address-city d-inline-block" required></select>
							</div>
							<div class="mt-2">
								<span class="w-130px">@Localizer["system_city"]:</span>
								<select type="text" id="add-address-city" class="form-control address-city d-inline-block" required></select>
							</div>
							<div class="mt-2">
								<span class="w-130px">@Localizer["user_address_line_1"]:</span>
								<input type="text" id="add-address-line-1" class="form-control address-line-1 d-inline-block">
							</div>
							<div class="mt-2">
								<span class="w-130px">@Localizer["user_address_line_2"]:</span>
								<input type="text" id="add-address-line-2" class="form-control address-line-2 d-inline-block">
							</div>
							<div class="mt-2">
								<span class="w-130px">@Localizer["system_phone"]:</span>
								<input type="text" id="add-address-phone" class="form-control address-phone d-inline-block">
							</div>
							<div class="mt-2">
								<span class="w-130px">@Localizer["user_postal_code"]:</span>
								<input type="text" id="add-address-postal-code" class="form-control address-postal-code d-inline-block" required>
							</div>
						</div>
					</form>
				</li>
			</ul>
		</div>

	</div>
	<div class="col-md-3">
		<div class="card h-100 p-4">
			<partial name="_OrderSummaryPartialView" model="@Model.Order" />
		</div>
	</div>
</div>

<div>
	<button class="btn btn-primary mt-3 d-flex align-items-center" type="submit" form="new-address">
		<svg class="mr-2" xmlns="http://www.w3.org/2000/svg" width="16.001" height="16" viewBox="0 0 16.001 16">
			<path id="Icon" d="M8,16a8,8,0,1,1,8-8A8.009,8.009,0,0,1,8,16ZM8,1.6A6.4,6.4,0,1,0,14.4,8,6.407,6.407,0,0,0,8,1.6ZM6.4,12h0L3.2,8.8,4.328,7.672,6.4,9.736l5.272-5.272L12.8,5.6,6.4,12Z" transform="translate(0)" fill="#fff" />
		</svg>
		Save address
	</button>
</div>

<div style="height: 100px">

</div>

<div class="position-fixed payment-actions py-2">
	<form asp-action="Shipping">
		@Html.HiddenFor(x => x.Order.Id)
		<input asp-for="BillingAddressId" type="hidden" value="@defaultAddress" />
		<input asp-for="ShipmentAddress" type="hidden" value="@defaultAddress" />

		<div asp-validation-summary="ModelOnly" class="text-danger"></div>
		<div class="pull-left d-flex h-100 pl-3 py-2">
			<a id="cancel-order" href="#" class="btn-cancel-order btn btn-block btn-inverse button-border d-flex align-items-center py-2 px-3">
				<svg class="mr-2" xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14">
					<path id="Icon" d="M245,3448a7,7,0,1,1,7-7A7.008,7.008,0,0,1,245,3448Zm0-12.6a5.6,5.6,0,1,0,5.6,5.6A5.606,5.606,0,0,0,245,3435.4Zm-2.513,9.1h0l-.986-.987,2.513-2.513-2.513-2.513.987-.987,2.513,2.513,2.512-2.513.987.987L245.986,3441l2.513,2.513-.987.987L245,3441.986l-2.513,2.513Z" transform="translate(-238 -3434)" fill="rgba(0,0,0,0.6)" />
				</svg>
				@Localizer["system_cancel_order"]
			</a>
			<button type="submit" class="btn-payment btn btn-block mt-0 ml-2 btn-primary d-flex align-items-center py-2 px-3">
				<svg class="mr-2" xmlns="http://www.w3.org/2000/svg" width="16.001" height="16" viewBox="0 0 16.001 16">
					<path id="Icon" d="M8,16a8,8,0,1,1,8-8A8.009,8.009,0,0,1,8,16ZM8,1.6A6.4,6.4,0,1,0,14.4,8,6.407,6.407,0,0,0,8,1.6ZM6.4,12h0L3.2,8.8,4.328,7.672,6.4,9.736l5.272-5.272L12.8,5.6,6.4,12Z" transform="translate(0)" fill="#fff" />
				</svg>
				@Localizer["system_payment"]
			</button>
		</div>
	</form>
</div>


@section Scripts{
	@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

	<script>

		class Address {
			ajaxRequest(requestUrl, requestType, requestData) {
				const baseUrl = '/api/Address';
				return new Promise((resolve, reject) => {
					$.ajax({
						url: baseUrl + requestUrl,
						type: requestType,
						data: requestData,
						success: (data) => {
							if (data.is_success) {
								resolve(data.result);
							} else if (!data.is_success) {
								reject(data.error_keys);
							} else {
								resolve(data);
							}
						},
						error: (e) => {
							reject(e);
						}
					});
				});
			}

			getAllCountries() {
				const requestUrl = '/GetAllCountries';
				return this.ajaxRequest(requestUrl, 'get', null);
			}

			getCitiesByCountryId(countryId) {
				const requestUrl = '/GetCitiesByCountryId';
				return this.ajaxRequest(requestUrl, 'get', { countryId });
			}

			addNewAddress(address = {
				contactName: '',
				phone: '',
				addressLine1: '',
				addressLine2: '',
				zipCode: '',
				cityId: 0,
				countryId: '',
				isDefault: false
			}) {
				const requestUrl = '/AddNewAddress';
				return this.ajaxRequest(requestUrl, 'post', address);
			}
		}
	</script>

	<script>
		const toast = new ToastNotifier();
		const addressManager = new Address();

		addressManager.getAllCountries().then(countries => {
			const countriesInput = $('#new-address #add-address-country');
			countriesInput.html(null);
			$.each(countries, function (index, value) {
				const option = new Option(value.name, value.id);
				countriesInput.append(option);
			});
			countriesInput.select2();
			updateCityInput($('#new-address #add-address-city'), countriesInput);
		});

		function updateCityInput(input, countriesInput) {
			const countryId = countriesInput.val();
			addressManager.getCitiesByCountryId(countryId).then(cities => {
				input.html(null);
				$.each(cities, function (index, value) {
					const option = new Option(value.name, value.id);
					input.append(option);
				});
			});
			input.select2();
		}

		$(document).ready(function () {
			$("#cancel-order").on("click", function () {
                $.ajax({
                    method: "delete",
					url: "/api/Orders/CancelOrder",
					data: {
						orderId: "@Model.Order.Id"
					},
					success: function (response) {
						if (response.is_success) {
							toast.notifySuccess("Info", "Order was canceled");
							setTimeout(function () {
								location.href = "/Orders/MyOrders";
							}, 300);
						} else {
							toast.notifyErrorList(response.error_keys);
						}
					},
					error: function () {
						toast.notifyErrorList("Error");
					}
				});
			});

			$('#new-address #add-address-country').on('change', function () {
				updateCityInput($('#new-address #add-address-city'), $(this));
			});

			$('#new-address').submit(function (e) {
				e.preventDefault();

				const scope = $(this);
				const address = {
					contactName: scope.find('#add-address-city option:selected').text(),
					phone: scope.find('#add-address-phone').val(),
					addressLine1: scope.find('#add-address-line-1').val(),
					addressLine2: scope.find('#add-address-line-2').val(),
					zipCode: scope.find('#add-address-postal-code').val(),
					cityId: scope.find('#add-address-city').val(),
					countryId: scope.find('#add-address-country').val(),
					isDefault: true
				}
				addressManager.addNewAddress(address).then(addressId => {
					address.id = addressId;
					prependAddress(address, $('#address-list'));
					scope[0].reset();
					scope.find('select').val('').select2();
				});

			});

            $(".billing-address").on("change", function () {
                $("#BillingAddressId").val($(this).val());
                $("#ShipmentAddress").val($(this).val());
			});

			function prependAddress(address, target) {
				const htmlMarkup = `
					<li class="adress-item">
						<label for="a_${address.id}" class="w-100 m-0 pt-4 pb-4">
							<div class="custom-control custom-radio d-flex align-items-center weight-600">
								<input type="radio" checked='checked' id="a_${address.id}" name="customRadio" class="custom-control-input billing-address" value="${address.id}">
								<label class="custom-control-label ml-2"><span class="w-130px">@Localizer["system_city"]: </span>${address.contactName}</label>
							</div>

							<div class="address-data ml-32px">
								<div class="mt-2">
									<span class="w-130px">@Localizer["user_address_line_1"]:</span>
									${address.addressLine1}
								</div>
								<div class="mt-2">
									<span class="w-130px">@Localizer["user_address_line_2"]:</span>
									${address.addressLine2}
								</div>
								<div class="mt-2">
									<span class="w-130px">@Localizer["system_phone"]:</span>
									${address.phone}
								</div>
								<div class="mt-2">
									<span class="w-130px">@Localizer["user_postal_code"]:</span>
									${address.zipCode}
								</div>
							</div>
						</label>
					</li>`;
				target.prepend(htmlMarkup);
			}
		});
	</script>
}
