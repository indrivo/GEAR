@using GR.Core.Razor.Enums
@{
    ViewData["Title"] = Localizer["system_documents"];
}

@{
    ViewData["Title"] = Localizer["system_documents"];
    var conf = new ListTagHelperModel
    {
        Title = Localizer["system_documents"],
        ListIdentifier = "document_Categories",
        Api = new ListApiConfigurationViewModel
        {
            Url = Url.Action("ListDocuments", "Documents")
        },
        StyleAttributes = new List<InlineStyleAttribute>
{
            new InlineStyleAttribute("white-space", "pre-wrap")

        },
        RenderColumns = new List<ListRenderColumn>
{

            new ListRenderColumn(Localizer["created"], "created"),
            new ListRenderColumn(Localizer["changed"], "changed"),
            new ListRenderColumn(Localizer["author"], "author"),

            new ListRenderColumn(Localizer["system_title"], "title"),
            new ListRenderColumn(Localizer["system_document_code"], "documentCode"),
            new ListRenderColumn(Localizer["description"], "description")
            {

                HasTemplate = true,
                Template = @"{data: null,
                            render: function(data, type, row, meta){

                                return `<div style=""white-space: pre-wrap;"">${row.description}</div>`;
                            }
                        },"
            },
            new ListRenderColumn(Localizer["file"], "fileName"),
            new ListRenderColumn(Localizer["group"], "group"),
            new ListRenderColumn(Localizer["type"], "documentType.name"),
            new ListRenderColumn(Localizer["iso_category"], "documentCategory.name"),
            new ListRenderColumn(Localizer["version"], "lastVersion"),
            new ListRenderColumn(Localizer["system_status"], "currentStateName")
            {
                HasTemplate = true,
                Template = @"{data: null,
                            render: function(data, type, row, meta){

                               if(row.currentStateName != null && row.currentStateName != 'null')
                                    return `<div id='DocumentState_${row.lastVersionId}' onclick='ChangeState(""${row.lastVersionId}"")'>${row.currentStateName}</div>`;

                                return '';
                            }
                        },"
            },
            new ListRenderColumn(Localizer["id_deleted"], "isDeleted")
            {
                BodySystemTemplate = RenderCellBodySystemTemplate.Boolean
            },

        },
        HeadButtons = new List<UrlTagHelperViewModel>
{
            new UrlTagHelperViewModel
            {
                AspAction = "",
                AspController = "",
                ButtonName = Localizer["add_document"],
                HtmlAttributes = new List<HtmlAttribute>
        {
                    new HtmlAttribute("Id", "addDocument"),
                    new HtmlAttribute("onclick", "AddNewDocument()")
                }
            }
        },
        HasActions = true,
        ListActions = new List<ListActionViewModel>
{
            new ListActionViewModel
            {
                HasIcon = false,
                Name = Localizer["edit"],
                ButtonType = BootstrapButton.Info,
                IsJsEvent = true,
                ButtonEvent = new JsActionButtonEvent
                {
                    JsEvent = JsEvent.OnClick,
                    JsEventHandler = "EditDocument('${row.id}');"
                },
            },
            new ListActionViewModel
            {
                HasIcon = false,
                Name = Localizer["delete"],
                IsJsEvent = true,
                ButtonEvent = new JsActionButtonEvent
                {
                    JsEvent = JsEvent.OnClick,
                    JsEventHandler = "deleteDocuments('${row.id}');"
                },
                ButtonType = BootstrapButton.Danger,
            },
            new ListActionViewModel
            {
                HasIcon = false,
                Name = Localizer["all_versions"],
                IsJsEvent = true,
                ButtonEvent = new JsActionButtonEvent
                {
                    JsEvent = JsEvent.OnClick,
                    JsEventHandler = "getDocumentVersions('${row.id}');"
                },
                ButtonType = BootstrapButton.Info,
            },
            new ListActionViewModel
            {
                HasIcon = false,
                Name =  Localizer["add_version"],
                IsJsEvent = true,
                ButtonEvent = new JsActionButtonEvent
                {
                    JsEvent = JsEvent.OnClick,
                    JsEventHandler = "AddNewDocumentVersions('${row.id}');"
                },
                ButtonType = BootstrapButton.Info,
            },
        },
        Documentation = "This tab allow to manage your document category"
    };

}

<JList asp-for="@conf"></JList>



<!-- Modal add document -->
<div class="modal fade" id="AddDocumentModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
     aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">@Localizer["add_document"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="formAddDocument" role="form" enctype="multipart/form-data">
                <div class="modal-body">
                    <input id="DocumentCategoryId" name="DocumentCategoryId" class="form-control" type="hidden" />
                    <div class="form-body">
                        <div class="row p-t-20">

                            <div class="col-md-12">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label>@Localizer["document_category"]</label>
                                        <select asp-items="ViewBag.ListDocumentCategory" class="form-control" id="AddDocumentSelectCategoryId" required>
                                            <option value="">@Localizer["no_value_selected"]</option>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <div id="blockAddDocuments" class="col-md-12" style="display: none">
                                <div class="col-md-12" id="DocumentTypeBlock">
                                    <div class="form-group">
                                        <label>@Localizer["system_document_type"]</label>
                                        <select name="DocumentTypeId" asp-items="ViewBag.ListDocumentType" class="form-control">
                                            <option value=""></option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label>@Localizer["system_document_code"]</label>
                                        <input id="DocumentCode" name="DocumentCode" class="form-control" value="" maxlength="20" />
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label>@Localizer["system_title"]</label>
                                        <input name="Title" class="form-control" value="" required />
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label>@Localizer["description"]</label>
                                        <textarea name="Description" class="form-control ckeditor" value=""></textarea>

                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label>@Localizer["group"]</label>
                                        <input name="Group" class="form-control" value="" />
                                    </div>
                                </div>
                                <div class="col-md-12" id="UrlDocument">
                                    <div class="form-group">
                                        <label>@Localizer["url"]</label>
                                        <input id="UrlDocumentInput" name="Url" class="form-control" value="" />
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label>@Localizer["iso_active_comments"]</label>
                                        <textarea name="Comments" class="form-control ckeditor" value=""></textarea>
                                    </div>
                                </div>
                                <div class="col-md-12" id="FileInputDocument">
                                    <div class="form-group">
                                        <label>@Localizer["file"]</label>
                                        <input id="fileinput" name="File" class="dropify" type="file" onchange="ValidateSize(this)" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>


                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">@Localizer["system_close"]</button>
                    <button type="submit" class="btn btn-primary">@Localizer["save"]</button>
                </div>
            </form>
        </div>
    </div>
</div>


<!-- Modal show all document versions -->
<div class="modal fade bd-example-modal-lg" id="ShowDocumentVersions" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
     aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered  modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">@Localizer["all_versions"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table id="DocumentVersionTabe-table" class="table table-striped mb-4 bg-white table-bordered">
                    <thead>
                        <tr>
                            <th>@Localizer["iso_active_comments"]</th>
                            <th>@Localizer["file"]</th>
                            <th>@Localizer["version"]</th>
                            <th>@Localizer["system_status"]</th>
                        </tr>
                    </thead>
                    <tbody id="DocumentVersionList">
                    </tbody>

                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <!-- <button type="button" class="btn btn-primary">Save changes</button> -->
            </div>
        </div>
    </div>
</div>


<!-- Modal add new document version  -->
<div class="modal fade" id="AddNewVersionModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
     aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">@Localizer["add_document_version"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="formAddDocumentVersion" role="form" enctype="multipart/form-data">
                <div class="modal-body">

                    <input id="DocumentId" name="DocumentId" class="form-control" type="hidden" />
                    <div class="form-body">
                        <div class="row p-t-20">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <div class="checkbox-container">
                                        <div class="custom-control custom-checkbox">
                                            <input type="checkbox" name="IsMajorVersion" class="custom-control-input " id="IsMajorVersion" />
                                            <label class="custom-control-label" for="IsMajorVersion">@Localizer["is_major_version"] </label>
                                        </div>
                                    </div>
                                </div>

                            </div>
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label>@Localizer["coments"]</label>
                                    <textarea name="Comments" class="form-control ckeditor" value=""></textarea>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label>@Localizer["file"]</label>
                                    <input id="NewVersionFileInput" name="File" type="file" onchange="ValidateSize(this)" required />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">@Localizer["system_close"]</button>
                    <button type="submit" class="btn btn-primary">@Localizer["save"]</button>
                </div>
            </form>
        </div>
    </div>
</div>


<!-- Modal edit document info -->
<div class="modal fade" id="EditDocumentModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
     aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Localizer["edit"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="formEditDocument" role="form" enctype="multipart/form-data">
                <div class="modal-body">

                    <input id="DocumentEditId" name="DocumentId" class="form-control" type="hidden" />
                    <div class="form-body">
                        <div class="row p-t-20">

                            <div class="col-md-12">
                                <div class="form-group">
                                    <label>@Localizer["type"]</label>
                                    <select name="DocumentTypeId" asp-items="ViewBag.ListDocumentType" class="form-control" id="DocumentTypeId">
                                        <option value=""></option>
                                    </select>
                                </div>
                            </div>

                            <div class="col-md-12">
                                <div class="form-group">
                                    <label>Document Code</label>
                                    <input id="DocumentCodeEdit" name="DocumentCode" class="form-control" value="" maxlength="20" />
                                </div>
                            </div>

                            <div class="col-md-12">
                                <div class="form-group">
                                    <label>@Localizer["system_title"]</label>
                                    <input id="Title" name="Title" class="form-control" value="" required />
                                </div>
                            </div>

                            <div class="col-md-12">
                                <div class="form-group">
                                    <label>@Localizer["group"]</label>
                                    <input id="Group" name="Group" class="form-control" value="" />
                                </div>
                            </div>

                            <div class="col-md-12">
                                <div class="form-group">
                                    <label>@Localizer["description"]</label>
                                    <textarea id="Description" name="Description" class="form-control ckeditor" value=""></textarea>
                                </div>
                            </div>


                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">@Localizer["system_close"]</button>
                    <button type="submit" class="btn btn-primary">@Localizer["edit"]</button>
                </div>
            </form>
        </div>
    </div>
</div>


<!-- Modal change document SMSI status -->
<div id="ChangeDocumentStatus" class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title">@Localizer["change_state"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <form id="formChangeDocumentState" role="form" enctype="multipart/form-data">
                    <div id="CurentStatus">

                    </div>
                    <div class="col-md-12">
                        <div class="form-group">
                            <label>@Localizer["iso_active_comments"]</label>
                            <textarea id="CommentsChangeState" name="Comments" class="form-control ckeditor" value=""></textarea>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary">@Localizer["change_state"]</button>
                </form>


                <table class="table table-striped mb-4 mt-4 bg-white table-bordered">
                    <thead>
                        <tr>
                            <th>Created by</th>
                            <th>@Localizer["iso_active_comments"]</th>
                            <th>@Localizer["start_state"]</th>
                            <th>@Localizer["next_state"]</th>
                        </tr>
                    </thead>
                    <tbody id="DocumentChangeStatusHistory">
                    </tbody>

                </table>
            </div>

        </div>
    </div>
</div>


@section Scripts
{
    <script type="text/javascript">

        const toast = new ToastNotifier();
        var newState = new FormData();

        $(document).ready(function () {
        });

        function AddNewDocument() {

            $('#AddDocumentModal').modal('show');

        }

        $('#AddDocumentSelectCategoryId').change(function () {

            const categoryId = $(this).val().split('_')[0];
            const categoryCode = $(this).val().split("_").pop();
            $("#DocumentCategoryId").val(categoryId);


            switch (categoryCode) {
                case '1':
                    $("#UrlDocument").hide();
                    $("#DocumentTypeBlock").show();
                    $("#FileInputDocument").show();
                    $("#blockAddDocuments").show();

                    $('#UrlDocumentInput').removeAttr('required');
                    $('#fileinput').attr('required', 'required');
                    break;
                case '2':
                    $("#UrlDocument").hide();
                    $("#DocumentTypeBlock").hide();
                    $("#FileInputDocument").show();
                    $("#blockAddDocuments").show();

                    $('#UrlDocumentInput').removeAttr('required');
                    $('#fileinput').attr('required', 'required');
                    break;
                case '3':
                    $("#UrlDocument").show();
                    $("#DocumentTypeBlock").hide();
                    $("#FileInputDocument").hide();
                    $("#blockAddDocuments").show();

                    $('#fileinput').removeAttr('required');
                    $('#UrlDocumentInput').attr('required', 'required');
                    break;
                default:
                    $("#blockAddDocuments").hide();
            }


        });

        function AddNewDocumentVersions(documentId) {
            $('#AddNewVersionModal').modal('show');
            $("#DocumentId").val(documentId);
        }

        function getDocumentVersions(documentId) {
            $.ajax({
                url: '/api/Documents/GetAllDocumentVersion',
                method: 'get',
                contentType: "application/json; charset=utf-8",
                data: { documentId: documentId },
                success: function (data) {
                    if (data.is_success) {

                        $("#DocumentVersionList").empty();
                        $.each(data.result,
                            function (index, value) {
                                console.log(value);
                                var html =
                                    `<tr>

                                                        <td> ${value.comments}</td>
                                                        <td><a href="#" onclick ="downloadFile('${value.fileStorageId
                                    }')">${value
                                        .fileName}</a></td>
                                                        <td>${value.versionNumber.toFixed(1)}</td>
                                                        <td>${value.currentStateName}</td>`;
                                $("#DocumentVersionList").append(html);
                            });
                        $('#ShowDocumentVersions').modal('show');
                    } else {
                        toast.notifyErrorList(data.error_keys);
                    }

                },
                error: function (error) {
                    console.log(error);
                }
            });
        }

        function downloadFile(fileId) {

            if (fileId != null && fileId !== 'null')
                window.location.href = `/api/File/GetFile?id=${fileId}`;
        }

        $("#formAddDocumentVersion").submit(function (e) {
            var formData = new FormData();
            const file = $('#NewVersionFileInput')[0].files[0];
            formData.append('file', file);


            $.each($(this).serializeArray(),
                function (i, input) {

                    if (input.name === "IsMajorVersion")
                        input.value = true;

                    formData.append(input.name, input.value);
                });

            console.log(formData);

            $.ajax({
                type: "POST",
                processData: false,
                contentType: false,
                url: "/api/Documents/AddNewDocumentVersion",
                data: formData,
                success: function (data) {
                    if (data.is_success) {
                        $("#render_document_Categories").DataTable().draw();
                        $('#AddNewVersionModal').modal('hide');
                        $("#formAddDocumentVersion").trigger('reset');
                        toast.notifySuccess("Save success");
                    } else {
                        toast.notifyErrorList(data.error_keys);
                    }
                }
            });

            return false;
        });

        $("#formAddDocument").submit(function (e) {

            var formData = new FormData();
            const file = $('#fileinput')[0].files[0];
            formData.append('file', file);

            $.each($(this).serializeArray(),
                function (i, input) {
                    formData.append(input.name, input.value);
                });

            $.ajax({
                type: "POST",
                processData: false,
                contentType: false,
                url: "/Documents/Create",
                data: formData,
                success: function (data) {
                    if (data.is_success) {
                        toast.notifySuccess("Save succes");
                        $('#AddDocumentModal').modal('hide');
                        $("#formAddDocument").trigger('reset');
                        $("#render_document_Categories").DataTable().draw();

                    } else {
                        toast.notifyErrorList(data.error_keys);
                    }
                }
            });

            return false;
        });

        $("#formEditDocument").submit(function (e) {

            var formData = new FormData();

            $.each($(this).serializeArray(),
                function (i, input) {
                    formData.append(input.name, input.value);
                });

            $.ajax({
                type: "POST",
                processData: false,
                contentType: false,
                url: "/api/Documents/Edit",
                data: formData,
                success: function (data) {
                    if (data.is_success) {
                        $('#EditDocumentModal').modal('hide');
                    } else {
                        toast.notifyErrorList();
                    }
                }
            });

            return false;
        });

        function deleteDocuments(documentId) {
            const dbService = new DataInjector();
            const filters = [
                {
                    parameter: "DocumentId",
                    criteria: "equals",
                    value: documentId
                }
            ];

            dbService.deletePermanentWhereAsync("ControlDocuments", filters).then(response => {
                if (response.is_success) {

                } else {
                    toast.notifyErrorList(response.error_keys);
                }
            }).catch(e => {
                toast.notifyErrorList(e);
            });

            dbService.deletePermanentWhereAsync("RequirementDocuments", filters).then(response => {
                if (response.is_success) {

                } else {
                    toast.notifyErrorList(response.error_keys);
                }
            }).catch(e => {
                toast.notifyErrorList(e);
            });
        }

        function EditDocument(documentId) {
            $.ajax({
                url: '/api/Documents/GetDocumentsByIdAsync',
                method: 'get',
                contentType: "application/json; charset=utf-8",
                data: { documentId: documentId },
                success: function (data) {
                    if (data.is_success) {

                        $(`#DocumentTypeId option[value=${data.result.documentTypeId}]`)
                            .attr('selected', 'selected');
                        $("#DocumentEditId").val(data.result.documentId);
                        $("#DocumentCodeEdit").val(data.result.documentCode);
                        $("#Title").val(data.result.title);
                        $("#Description").val(data.result.description);
                        $("#Group").val(data.result.group);
                        $('#EditDocumentModal').modal('show');

                        $("#render_document_Categories").DataTable().draw();

                    } else {
                        toast.notifyErrorList(data.error_keys);
                    }
                },
                error: function (error) {
                    console.log(error);
                }
            });
        }

        function htmlStatus(id, currentStateName, listNextState) {

            var listNextStateHtml = "";

            if (listNextState.length > 0) {
                $.each(listNextState,
                    function (key, value) {
                        listNextStateHtml += `<a class="dropdown-item" href="#" onclick="SetNewState('${id}',
                        '${value.workFlowId}','${value.id}', '${value.name}')">${value.name}</a>`;
                    });

                var html = `
                                                <div class="dropdown">
                                                    <button type="button" class="btn btn-link text-black-50"  data-toggle="dropdown"
                                                        aria-haspopup="true" aria-expanded="false" id="Status_${id}">
                                                        <span class="align-middle button-label" id="StateName_${id}">${currentStateName}</span>
                                                        <span class="material-icons mr-1 align-middle">arrow_drop_down</span>
                                                    </button>
                                                    <div class="dropdown-menu" aria-labelledby="Status_${id}">
                                                        ${listNextStateHtml}
                                                    </div>
                                                </div>`;

                return html;
            }

            var html = `
                       <button type="button" class="btn btn-link text-black-50" aria-haspopup="true" aria-expanded="false">
                           <span class="align-middle button-label">${currentStateName}</span>
                       </button>`;

            return html;
        }

        function ChangeState(versionId) {

            $.ajax({
                url: '/api/Documents/GetDocumentStateAsync',
                method: 'get',
                contentType: "application/json; charset=utf-8",
                data: { versionId: versionId },
                success: function (data) {
                    if (data.is_success) {

                        $("#CurentStatus").empty();
                        var html = htmlStatus(data.result.id, data.result.currentStateName, data.result.listNextState);
                        $("#CurentStatus").append(html);

                        $("#DocumentChangeStatusHistory").empty();
                        $("#DocumentChangeStatusHistory").append(AddStateHistory(data.result.history));

                        $("#ChangeDocumentStatus").modal('show');


                    } else {
                        toast.notifyErrorList(data.error_keys);
                    }

                },
                error: function (error) {
                    console.log(error);
                }
            });


        }

        function SetNewState(entryId, workFlowId, newStateId, selectStateName) {

            newState = { EntryId: entryId, WorkFlowId: workFlowId, NewStateId: newStateId, Comments: "" };
            $(`#StateName_${entryId}`).empty();
            $(`#StateName_${entryId}`).append(selectStateName);

        }

        $("#ChangeDocumentStatus").submit(function (e) {

            newState.Comments = $("#CommentsChangeState").val();

            $.ajax({
                type: "POST",
                url: "/api/Documents/ChangeDocumentStatus",
                data: newState,
                success: function (data) {
                    if (data.is_success) {

                        $(`#DocumentState_${data.result.entryId}`).empty();
                        $(`#DocumentState_${data.result.entryId}`).append(data.result.currentStateName);
                        $("#CommentsChangeState").val('');
                        ChangeState(data.result.entryId);
                    } else {
                        toast.notifyErrorList(data.error_keys);
                    }
                }
            });

            return false;
        });

        function AddStateHistory(listHistory) {

            var html = "";

            $.each(listHistory, function (key, value) {
                html += `
                            <tr>
                                <td>${value.author}</td>
                                <td style="white-space: pre-wrap;">${value.message}</td>
                                <td>${value.fromState.name}</td>
                                <td>${value.toState.name}</td>
                            </tr>`;
            });

            return html;
        }

        function ValidateSize(file) {
            const fileSize = file.files[0].size / 1024 / 1024;
            if (fileSize > 25) {
                alert('File size exceeds 25 MB');
                $(file).val(''); //for clearing with Jquery
            } 
        }
    </script>
}