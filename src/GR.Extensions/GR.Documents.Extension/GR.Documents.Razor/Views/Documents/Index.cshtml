@model IEnumerable<GR.Documents.Abstractions.ViewModels.DocumentViewModels.DocumentViewModel>

@{
	ViewData["Title"] = "Documents";
}

<div class="common-control">
	<div class="control-area justify-content-end">
		<div class="dropdown">
			<button type="button" class="btn btn-link text-black-50" data-toggle="dropdown"
					aria-haspopup="true" aria-expanded="false" id="visualize">
				<span class="material-icons mr-1 align-middle">add_circle_outline</span>
				<span class="align-middle button-label">Adaugă</span>
				<span class="material-icons mr-1 align-middle">arrow_drop_down</span>
			</button>
			<div class="dropdown-menu" aria-labelledby="visualize">
				@*<a class="dropdown-item" href="#">Document SMSI</a>
					<a class="dropdown-item" href="#">Document Extern</a>
					<a class="dropdown-item" href="#">Link</a>*@
			</div>
		</div>

		<button type="button" class="btn btn-link text-black-50" onclick="getAllChechedDeleteDocuments()">
			<span class="material-icons mr-1 align-middle">clear</span>
			<span class="align-middle button-label">Șterge</span>
		</button>
	</div>
</div>



<table id="data-table" class="table table-striped mb-4 bg-white table-bordered">
	<thead>
		<tr>
			<th></th>
			<th>Title</th>
			<th>Document/Description</th>
			<th>File</th>
			<th>Group</th>
			<th>Type</th>
			<th>Version</th>
			<th>Is delete</th>
			<th>Actions</th>
		</tr>
	</thead>
	<tbody id="tableListDocuments">
		
	</tbody>

</table>





<!-- Modal add document -->
<div class="modal fade" id="AddDocumentModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
	 aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLongTitle">Add document</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<form id="formAddDocument" role="form" enctype="multipart/form-data">
					<input id="DocumentTypeId" name="DocumentTypeId" class="form-control" type="hidden" />
					<div class="form-body">
						<div class="row p-t-20">
							<div class="col-md-12">
								<div class="form-group">
									<label>Document Code</label>
									<input name="DocumentCode" class="form-control" value="" />
								</div>
							</div>
							<div class="col-md-12">
								<div class="form-group">
									<label>Tile</label>
									<input name="Tile" class="form-control" value="" required />
								</div>
							</div>
							<div class="col-md-12">
								<div class="form-group">
									<label>Description</label>
									<textarea name="Description" class="form-control ckeditor" value=""></textarea>

								</div>
							</div>
							<div class="col-md-12">
								<div class="form-group">
									<label>Group</label>
									<input name="Group" class="form-control" value="" />
								</div>
							</div>
							<div class="col-md-12" id="UrlDocument">
								<div class="form-group">
									<label>Url</label>
									<input id="UrlDocumentInput" name="Url" class="form-control" value="" />
								</div>
							</div>
							<div class="col-md-12">
								<div class="form-group">
									<label>Comments</label>
									<textarea name="Comments" class="form-control ckeditor" value=""></textarea>
								</div>
							</div>
							<div class="col-md-12" id="FileInputDocument">
								<div class="form-group">
									<label>File</label>
									<input id="fileinput" name="File" class="dropify" type="file" />
								</div>
							</div>
						</div>
					</div>
					<button type="submit" class="btn btn-primary">Save changes</button>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
				<!-- <button type="button" class="btn btn-primary">Save changes</button> -->
			</div>
		</div>
	</div>
</div>


<!-- Modal show all document versions -->
<div class="modal fade bd-example-modal-lg" id="ShowDocumentVersions" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
	 aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered  modal-lg" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLongTitle">Add document</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<table id="DocumentVersionTabe-table" class="table table-striped mb-4 bg-white table-bordered">
					<thead>
						<tr>
							<th>Title</th>
							<th>Coments</th>
							<th>File</th>
							<th>Version</th>
						</tr>
					</thead>
					<tbody id="DocumntVersionList">
					</tbody>

				</table>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
				<!-- <button type="button" class="btn btn-primary">Save changes</button> -->
			</div>
		</div>
	</div>
</div>


<!-- Modal add new document version  -->
<div class="modal fade" id="AddNewVersionModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
	 aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLongTitle">Add document</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<form id="formAddDocumentVersion" role="form" enctype="multipart/form-data">
					<input id="DocumentId" name="DocumentId" class="form-control" type="hidden" />
					<div class="form-body">
						<div class="row p-t-20">
							<div class="col-md-12">
								<div class="form-group">
									<div class="checkbox-container">
										<div class="custom-control custom-checkbox">
											<input type="checkbox" name="IsMajorVersion" class="custom-control-input " id="IsMajorVersion"/>
											<label class="custom-control-label" for="IsMajorVersion">Is Major version </label>
										</div>
									</div>
								</div>
								
							</div>
							<div class="col-md-12">
								<div class="form-group">
									<label>Comments</label>
									<textarea name="Comments" class="form-control ckeditor" value=""></textarea>
								</div>
							</div>
							<div class="col-md-12">
								<div class="form-group">
									<label>File</label>
									<input id="NewVersionFileInput" name="File" class="dropify" type="file" required />
								</div>
							</div>
						</div>
					</div>
					<button type="submit" class="btn btn-primary">Save changes</button>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
				<!-- <button type="button" class="btn btn-primary">Save changes</button> -->
			</div>
		</div>
	</div>
</div>


<!-- Modal edit document info -->
<div class="modal fade" id="EditDocumentModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
	 aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLongTitle">Add document</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<form id="formEditDocument" role="form" enctype="multipart/form-data">
					<input id="DocumenEdittId" name="DocumentId" class="form-control" type="hidden" />
					<input id="DocumenTypeId" name="DocumentTypeId" class="form-control" type="hidden" />
					<div class="form-body">
						<div class="row p-t-20">
							<div class="col-md-12">
								<div class="form-group">
									<label>Document Code</label>
									<input id="DocumentCode" name="DocumentCode" class="form-control" value="" />
								</div>
							</div>
							<div class="col-md-12">
								<div class="form-group">
									<label>Tile</label>
									<input id="Tile" name="Tile" class="form-control" value="" required />
								</div>
							</div>
							<div class="col-md-12">
								<div class="form-group">
									<label>Description</label>
									<textarea id="Description" name="Description" class="form-control ckeditor" value=""></textarea>

								</div>
							</div>
							<div class="col-md-12">
								<div class="form-group">
									<label>Group</label>
									<input id="Group" name="Group" class="form-control" value="" />
								</div>
							</div>
						</div>
					</div>
					<button type="submit" class="btn btn-primary">Edit</button>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
				<!-- <button type="button" class="btn btn-primary">Save changes</button> -->
			</div>
		</div>
	</div>
</div>


@section Scripts
{
	<script type="text/javascript">

		const toast = new ToastNotifier();

		$(document).ready(function() {
			AddListDocumentType();
			GetAllDocuments();
		});

		function AddListDocumentType() {

			$.ajax({
				url: '/DocumentTypes/GetAllDocumetTypesAsync',
				method: 'get',
				contentType: "application/json; charset=utf-8",
				success: function(data) {
					if (data.is_success) {

						$(".dropdown-menu").empty();
						$.each(data.result,
							function(index, value) {

								var html =
									`<a class="dropdown-item" href="#" onclick="addNewDocument('${value.id}','${value
										.code}')" >${value.name}</a>`;
								$(".dropdown-menu").append(html)
							});
					} else {
						toast.notifyErrorList(data.error_keys);
					}
				},
				error: function(error) {
					console.log(error);
				}
			});
		}

		function addNewDocument(DocumentTypeId, typeCode) {
			if (typeCode == 3) {
				$("#UrlDocument").show();
				$("#UrlDocumentInput").attr('required', 'required');

				$("#FileInputDocument").hide();
				$("#fileinput").removeAttr("required");
			} else {
				$("#FileInputDocument").show();
				$("#fileinput").attr('required', 'required');

				$("#UrlDocument").hide();
				$("#UrlDocumentInput").removeAttr("required");
			}

			$('#AddDocumentModal').modal('show');
			$("#DocumentTypeId").val(DocumentTypeId);
		}

		function AddNewDocumntVersions(documentId) {
			$('#AddNewVersionModal').modal('show');
			$("#DocumentId").val(documentId);
		}

		function getDocumntVersions(documentId) {
			$.ajax({
				url: '/Documents/GetAllDocumentVersion',
				method: 'get',
				contentType: "application/json; charset=utf-8",
				data: { documentId: documentId },
				success: function(data) {
					if (data.is_success) {

						$("#DocumntVersionList").empty();
						$('#ShowDocumentVersions').modal('show');

						$.each(data.result,
							function(index, value) {
								var html =
									`<tr>
															<td>${value.document.title}</td>"
															<td> ${value.comments}</td>
															<td><a href="#" onclick ="downloadFile('${value
										.fileStorageId
										}')">${
										value.fileName}</a></td>
															<td>${value.versionNumber.toFixed(1)}</td>`;
								$("#DocumntVersionList").append(html);
							});
					} else {
						toast.notifyErrorList(data.error_keys);
					}

				},
				error: function(error) {
					console.log(error);
				}
			});
		}

		function downloadFile(fileId) {

			if (fileId != null && fileId != 'null')
				window.location.href = '/api/File/' + "GetFile?id=" + fileId;
		}

		function GetAllDocuments() {

			$.ajax({
				type: "Get",
				url: '/Documents/GetAllDocuments',
				method: 'get',
				dataType: 'json',
				success: function(data) {
					if (data.is_success) {
						$("#tableListDocuments").empty();
						$.each(data.result,
							function(index, value) {

								var html =
									`<tr>
								<td>
									<div class="checkbox-container">
										<div class="custom-control custom-checkbox">
                                            <input type="checkbox" class="custom-control-input checkedDocumentsToDelete" id="${
										value.id}"/>
                                            <label class="custom-control-label" for="${value.id}"></label>
									    </div>
								    </div>
								</td>
								<td> ${value.title}</td>
								<td style="white-space: pre-wrap;">${value.description == "null" ? "" : value.description}</td>
								<td><a href="${value.documentType.code == 3 ? value.lastUrl : "#"
										}" onclick ="downloadFile('${value.lastFileId}')" target="_blank">${value
										.documentType.code ==
										3
										? value.lastUrl
										: value.fileName}</a></td>
								<td>${value.group == null ? "" : value.group}</td>
								<td>${value.documentType.name}</td>
								<td> ${value.lastVersion.toFixed(1)}</td>
                                <td> ${value.isDeleted}</td>
                                <td>
                                    <button type="button" class="btn btn-light" onclick ="getDocumntVersions('${
										value.id}')" ${value.documentType.code == 1 ? "" : "disabled"
										}>All version</button>
                                    <button type="button" class="btn btn-light" onclick ="AddNewDocumntVersions('${
										value.id}')" ${value.documentType.code == 1 ? "" : "disabled"
										}>New version</button>
									<button type="button" class="btn btn-light" onclick ="EditDocument('${value.id}')">Edit</button>
                                </td>
							</tr>`;
								$("#tableListDocuments").append(html);
							});
					} else {
						toast.notifyErrorList(data.error_keys);
					}

				},
				error: function(error) {
					console.log(error);
				}
			});
		}

		$("#formAddDocumentVersion").submit(function(e) {
			var formData = new FormData();
			var file = $('#NewVersionFileInput')[0].files[0];
			formData.append('file', file);

			console.log($(this).serializeArray());

			$.each($(this).serializeArray(),
				function(i, input) {

					if (input.name === "IsMajorVersion")
						input.value = true;

					formData.append(input.name, input.value);
				});

			console.log(formData);

			$.ajax({
				type: "POST",
				processData: false,
				contentType: false,
				url: "/Documents/AddNewDocumentVersion",
				data: formData,
				success: function(data) {
					if (data.is_success) {

						GetAllDocuments();
						toast.notifySuccess("Save succes");
						$('#AddNewVersionModal').modal('hide');
						$("#formAddDocumentVersion").trigger('reset');
					} else {
						toast.notifyErrorList(data.error_keys);
					}
				}
			});

			return false;
		});

		$("#formAddDocument").submit(function(e) {

			var formData = new FormData();
			var file = $('#fileinput')[0].files[0];
			formData.append('file', file);

			$.each($(this).serializeArray(),
				function(i, input) {
					formData.append(input.name, input.value);
				});

			$.ajax({
				type: "POST",
				processData: false,
				contentType: false,
				url: "/Documents/Create",
				data: formData,
				success: function(data) {
					if (data.is_success) {
						GetAllDocuments();
						toast.notifySuccess("Save succes");
						$('#AddDocumentModal').modal('hide');
						$("#formAddDocument").trigger('reset');

					} else {
						toast.notifyErrorList();
					}
				}
			});

			return false;
		});

		$("#formEditDocument").submit(function(e) {

			var formData = new FormData();

			$.each($(this).serializeArray(),function(i, input) {
				formData.append(input.name, input.value);
			});

			$.ajax({
				type: "POST",
				processData: false,
				contentType: false,
				url: "/Documents/Edit",
				data: formData,
				success: function(data) {
					if (data.is_success) {
						GetAllDocuments();
						$('#EditDocumentModal').modal('hide');
					} else {
						toast.notifyErrorList();
					}
				}
			});

			return false;
		});


		function getAllChechedDeleteDocuments() {

			var listDocumetId = [];
			$('input:checkbox.checkedDocumentsToDelete').each(function() {

				if ($(this).is(':checked'))
					listDocumetId.push($(this).attr('id'));

			});

			if (listDocumetId.length > 0) {
				$.ajax({
					type: "POST",
					url: '/Documents/DeleteDocumnetsByListIdAsync',
					method: 'post',
					data: { listDocumetId: listDocumetId },
					success: function(data) {
						if (data.is_success) {
							GetAllDocuments();
							$(listDocumetId).each(function(index) {
								deleteDocuments(index);
							});
						}
					},
					error: function(error) {
						console.log(error);
					}
				});
			}
		}

		function deleteDocuments(DocumentId) {
			const dbService = new DataInjector();
			const filters = [
				{
					parameter: "DocumentId",
					criteria: "equals",
					value: DocumentId
				}
			];

			dbService.deletePermanentWhereAsync("ControlDocuments", filters).then(response => {
				if (response.is_success) {

				} else {
					toast.notifyErrorList(response.error_keys);
				}
			}).catch(e => {
				toast.notifyErrorList(e);
			});

			dbService.deletePermanentWhereAsync("RequirementDocuments", filters).then(response => {
				if (response.is_success) {

				} else {
					toast.notifyErrorList(response.error_keys);
				}
			}).catch(e => {
				toast.notifyErrorList(e);
			});
		}

		function EditDocument(documentId) {
			$.ajax({
				url: '/Documents/GetDocumentsByIdAsync',
				method: 'get',
				contentType: "application/json; charset=utf-8",
				data: { documentId: documentId },
				success: function(data) {
					if (data.is_success) {
						console.log(data);

						$("#DocumenTypeId").val(data.result.documentTypeId);
						$("#DocumenEdittId").val(data.result.documentId);
						$("#DocumentCode").val(data.result.documentCode);
						$("#Tile").val(data.result.tile);
						$("#Description").val(data.result.description);
						$("#Group").val(data.result.group);

						$('#EditDocumentModal').modal('show');

					} else {
						toast.notifyErrorList(data.error_keys);
					}
				},
				error: function(error) {
					console.log(error);
				}
			});
		}

	</script>
}


