@using Newtonsoft.Json
@using GR.Cache.Abstractions
@model IEnumerable<StackExchange.Redis.RedisKey>
@inject ICacheService CacheService

@{
    ViewData["Title"] = "Redis keys";
}

<div class="row">
    <div class="col-lg-6">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Redis keys</h4>
                <a href="javascript:void(0)" id="flush-all" class="btn btn-danger">
                    <span class="fa fa-trash"></span> Flush All
                </a>
                <div class="m-b-30">
                    <label>Is connected</label>
                    @if (ViewBag.IsConnected)
                    {
                        <input type="checkbox" checked disabled data-on-color="success" data-off-color="info">
                    }
                    else
                    {
                        <input type="checkbox" readonly data-on-color="info" data-off-color="success">
                    }
                </div>
                <div id="keys-container" class="table-responsive">
                    <table class="table color-table primary-table">
                        <thead>
                            <tr>
                                <th>Key</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.Any())
                            {
                                foreach (var item in Model)
                                {
                                    var key = item.ToString().Split('@')?[1];
                                    var pre = await CacheService.Get
                                        <dynamic>
                                        (key);
                                    var value = (pre != null) ? JsonConvert.SerializeObject(pre)
                                        : JsonConvert.SerializeObject(await CacheService.Get<string>
                                            (key));
                                    <tr>
                                        <td>@key</td>
                                        <td>
                                            <input type="hidden" class="json" value="@value" />
                                            <a href="javascript:void(0)" class="btn btn-primary showJson">
                                                <span class="fa fa-eye"></span>
                                            </a>
                                            <a href="javascript:void(0)" class="btn btn-danger del" data-key="@key">
                                                <span class="fa fa-trash"></span>
                                            </a>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="2">No items!</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <pre id="jsonPlace" style="min-height: 45em;"></pre>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        $(document).ready(function () {
            $("#flush-all").on("click", function () {
                $.ajax({
                    url: "@Url.Action("FlushAll")",
                    success: function (data) {
                        location.reload();
                    },
                    error: function (error) {
                        alert("Fail to flush keys");
                    }
                });
            });

            $(".del").on("click", function () {
                const key = $(this).attr("data-key");
                $.ajax({
                    url: "@Url.Action("RemoveItem")",
                    data: {
                        key: key
                    },
                    success: function (data) {
                        location.reload();
                    },
                    error: function (error) {
                        alert("Fail to remove key!");
                    }
                });
            });
            $(".showJson").on("click", function () {
                var obj = JSON.parse($(this).parent().find("input").val());

                function output(inp) {
                    $("#jsonPlace").html(inp);
                }

                function syntaxHighlight(json) {
                    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                    return json.replace(
                        /("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g,
                        function (match) {
                            var cls = 'number';
                            if (/^"/.test(match)) {
                                if (/:$/.test(match)) {
                                    cls = 'key';
                                } else {
                                    cls = 'string';
                                }
                            } else if (/true|false/.test(match)) {
                                cls = 'boolean';
                            } else if (/null/.test(match)) {
                                cls = 'null';
                            }
                            return '<span class="' + cls + '">' + match + '</span>';
                        });
                }

                var str = JSON.stringify(obj, null, 4);

                output(syntaxHighlight(str));
            });
        });
    </script>
}


@section Styles
{
    <style>
        #jsonPlace {
            outline: 1px solid #ccc;
            padding: 5px;
            margin: 5px;
        }

        .string {
            color: green;
        }

        .number {
            color: darkorange;
        }

        .boolean {
            color: blue;
        }

        .null {
            color: magenta;
        }

        .key {
            color: red;
        }

        #keys-container {
            min-height: 70vh;
        }
    </style>
}