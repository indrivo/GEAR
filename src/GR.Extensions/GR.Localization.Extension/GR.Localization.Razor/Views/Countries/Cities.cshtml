@using GR.Localization.Abstractions.Models.Countries

@{
    var country = (Country)ViewBag.country;
    ViewData["Title"] = country.Name + ' ' + Localizer["system_cities"];
}
@section Styles
{
    <style>
        .editable-input {
            position: relative;
        }

            .editable-input input[type="text"] {
                background-color: transparent;
                border: none;
                width: 100%;
                padding-left: 5px;
                padding-right: 30px;
            }

            .editable-input .input-edit-line {
                display: block;
                width: 100%;
                height: 1px;
                background-color: black;
                transition: 0.5s ease-in-out;
            }

            .editable-input .city-save {
                position: absolute;
                right: 0;
                top: 0;
                opacity: 1;
                transition: 0.5s ease-in-out;
            }

            .editable-input input[type="text"]:read-only {
                cursor: pointer;
            }

                .editable-input input[type="text"]:read-only ~ .input-edit-line .city-save {
                    transition: 0.5s ease-in-out;
                    opacity: 0;
                }

                .editable-input input[type="text"]:read-only ~ .input-edit-line {
                    transition: 0.5s ease-in-out;
                    width: 0;
                }

        #countries .city:nth-child(even) {
            background-color: #f4f6f8;
        }

        .city-delete,
        .city-save {
            cursor: pointer;
        }

        .city-code,
        .city-id {
            text-transform: uppercase;
        }

        .city-save {
            color: #009010;
        }

        .city-delete {
            color: #FF0000;
        }

        .new-city {
            border-bottom: 1px solid #cecece;
        }

        .save-new-city {
            padding: 2px 40px;
        }
    </style>
}

<div class="row">
    <div class="col-xl-6 col-lg-8 col-md-10 col-sm-12">
        <div class="card p-4">
            <div class="new-city pb-3 mb-3">
                <form id="add-new-city">
                    <div class="row">
                        <div class="col-2">
                            <div class="form-group">
                                <label for="city-code">@Localizer["system_city_code"]</label>
                                <input type="text" id="city-code" name="title" class="form-control city-code" required maxlength="3" />
                            </div>
                        </div>
                        <div class="col-5">
                            <div class="form-group">
                                <label for="city-name">@Localizer["system_city_name"]</label>
                                <input type="text" id="city-name" name="title" class="form-control city-name" required />
                            </div>
                        </div>
                        <div class="col">
                            <label class="w-100">&nbsp;</label>
                            <button type="submit" class="btn btn-primary save-new-city">@Localizer["save"]</button>
                        </div>
                    </div>
                </form>
            </div>
            <div id="cities"></div>
        </div>
    </div>
</div>

@section Scripts
{

    <script id="cityTemplate" type="text/x-jsrender">
        <div id="{{:id}}" class="city p-2" data-city-name="{{:name}}">
            <div class="row">
                <div class="col-2">
                    <div class="editable-input">
                        <input type="text" class="city-code" readonly maxlength="3" value="{{:code}}">
                        <div class="input-edit-line">
                            <span class="city-save city-code-save">
                                <i class="material-icons">done</i>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="col-3">
                    <div class="editable-input">
                        <input type="text" class="city-name" readonly value="{{:name}}">
                        <div class="input-edit-line">
                            <span class="city-save city-name-save">
                                <i class="material-icons">done</i>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="col-2 ml-auto city-actions">
                    <div class="d-flex justify-content-end">
                        <div class="city-delete">
                            <i class="material-icons">close</i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </script>

    <script>
		class Location {
			ajaxRequest(requestUrl, requestType, requestData) {
				const baseUrl = '/api/Country';
				return new Promise((resolve, reject) => {
					$.ajax({
						url: baseUrl + requestUrl,
						type: requestType,
						data: requestData,
						success: (data) => {
							if (Array.isArray(data)) {
								resolve(data);
							}
							else {
								if (data.is_success) {
									resolve(data.result);
								} else if (!data.is_success) {
									reject(data.error_keys);
								} else {
									resolve(data);
								}
							}
						},
						error: (e) => {
							reject(e);
						}
					});
				});
			}

			addNewCity(city = {
				cityId: @country.Id,
				code: '',
				name: '',
			}) {
				const requestUrl = '/AddCityToCountry';
				return this.ajaxRequest(requestUrl, 'post', city);
			}

			updateCity(city) {
				const requestUrl = '/UpdateCity';
				return this.ajaxRequest(requestUrl, 'post', city);
			}

			getCity(city) {
				const requestUrl = '/UpdateCity';
				return this.ajaxRequest(requestUrl, 'post', city);
			}

			deleteCity(cityId) {
				const requestUrl = '/RemoveCity';
				return this.ajaxRequest(requestUrl, 'delete', { cityId });
            }

            getCities(countryId) {
                const requestUrl = '/GetCitiesByCountry';
				return this.ajaxRequest(requestUrl, 'get', { countryId });
            }
		}
    </script>
    <script>
		!function ($) {
			const locationManager = new Location();
			const toast = new ToastNotifier();
			const citiesWrapper = $('#cities');
			const cityTemplate = $.templates("#cityTemplate");
			let citiesList = [];
			const addForm = $('#add-new-city');

			addForm.submit(e => {
				e.preventDefault();
				const formData = {
					name: addForm.find('#city-name').val(),
                    code: addForm.find('#city-code').val().toUpperCase(),
                    countryId: "@country.Id"
				}
				if (checkForDuplicates(formData.code)) {
					toast.notify({ text: window.translate('system_countries_code_duplicates_error'), icon: 'error' });
				} else {
					locationManager.addNewCity(formData).then(cityId => {
						formData.id = cityId;
						citiesList.push(formData);
						appendToAlphabeticalPosition(formData);
					}).catch(e => {
						toast.notifyErrorList(e);
					});
					addForm[0].reset();
				}
			});

			const appendToAlphabeticalPosition = city => {
				const htmlOutput = cityTemplate.render(city);
				citiesWrapper.append(htmlOutput);
				$(citiesWrapper).find('.city').sort(function (a, b) {
					return $(a).data('city-name').toLowerCase().localeCompare($(b).data('city-name').toLowerCase());
				}).each(function () {
					$(citiesWrapper).append(this);
				});

				addClickEventsOnItem(city.id);
			}

			const findObjectsByProperty = (array, property, propertyValue) => {
				return array.filter(obj => { return obj[property] === propertyValue });
			}

            const checkForDuplicates = code => {
                if (!code) return false;
				const matchedElements = findObjectsByProperty(citiesList, 'code', code.toUpperCase());
				if (matchedElements.length > 1) {
					return true;
				} else {
					return false;
				}
			}

			const addClickEventsOnItem = itemId => {
				const item = `.city#${itemId}`;
				const city = findObjectsByProperty(citiesList, 'id', itemId)[0];
				const originalcityCode = city.code;
				let newValues = {
					name: '',
					code: ''
				}
				$.each($(`${item} input[type="text"]`), function () {
					const input = $(this);
					const originalValue = $(this).val();
					input.focus(() => {
						input.attr('readonly', false);
					}).focusout(() => {
						input.attr('readonly', true);
						if (input.hasClass('city-code')) {
							newValues.code = input.val();
						} else if (input.hasClass('city-name')) {
							newValues.name = input.val();
						}
						input.val(originalValue);
					});
					input.siblings('.input-edit-line').find('.city-save').click(() => {
						if (input.hasClass('city-code')) {
							city.code = newValues.code;
							input.val(newValues.code);
						} else if (input.hasClass('city-name')) {
							city.name = newValues.name;
							input.val(newValues.name);
						} else {
							console.warn('Something went wrong when trying to get field name');
						}
						if (checkForDuplicates(city.code)) {
							toast.notify({ text: window.translate('system_countries_code_duplicates_error'), icon: 'error' });
							$(`${item} .city-code`).val(originalcityCode);

						} else {
							locationManager.updateCity(city).then(() => {
								toast.notify({ text: window.translate('system_countries_added_success'), icon: 'success' });
							}).catch(e => {
								toast.notifyErrorList(e);
							});
						}
					});
				});
				$(`${item} .city-delete`).click(() => {
					locationManager.deleteCity(itemId).then(() => {
						toast.notify({ text: window.translate('system_countries_deleted_success'), icon: 'success' });
						$(`${item}`).remove();
						citiesList = citiesList.filter(function (obj) {
							return obj.id !== city.id;
						});
					}).catch(e => {
						toast.notifyErrorList(e);
					});
				});
			}

			const appendcitytoList = city => {
				const htmlOutput = cityTemplate.render(city);
				citiesWrapper.append(htmlOutput);
				addClickEventsOnItem(city.id);
			}

			const loadCities = () => {
                citiesWrapper.html(null);
                locationManager.getCities("@country.Id").then(data => {
                citiesList = data.sort(function (a, b) {
					return a.name.localeCompare(b.name);
				});
				$.each(data, function (i, city) {
					appendcitytoList(city);
				});
                }).catch(e => {
                    console.error(e);
                });
			}

			loadCities();

		}(window.jQuery);
    </script>
}