// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using GR.Dashboard.Data;

namespace GR.Dashboard.Migrations
{
    [DbContext(typeof(DashBoardDbContext))]
    partial class DashBoardDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("DashBoard")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("GR.Audit.Abstractions.Models.TrackAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("DatabaseContextName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("RecordId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("TrackEventType");

                    b.Property<string>("TypeFullName");

                    b.Property<string>("UserName");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("TrackAudits");
                });

            modelBuilder.Entity("GR.Audit.Abstractions.Models.TrackAuditDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("PropertyName");

                    b.Property<string>("PropertyType");

                    b.Property<Guid?>("TenantId");

                    b.Property<Guid>("TrackAuditId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TrackAuditId");

                    b.ToTable("TrackAuditDetails");
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.DashBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("DashboardId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.RowWidgets.RowChartWidget", b =>
                {
                    b.Property<Guid>("ChartWidgetId");

                    b.Property<Guid>("RowId");

                    b.Property<string>("BackGroundColor");

                    b.Property<int>("BorderRadius");

                    b.Property<string>("BorderStyle");

                    b.Property<string>("ClassAttribute");

                    b.Property<string>("Height");

                    b.Property<int>("Order");

                    b.Property<string>("Width");

                    b.HasKey("ChartWidgetId", "RowId");

                    b.HasIndex("RowId");

                    b.ToTable("RowChartWidgets");
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.RowWidgets.RowCustomWidget", b =>
                {
                    b.Property<Guid>("CustomWidgetId");

                    b.Property<Guid>("RowId");

                    b.Property<string>("BackGroundColor");

                    b.Property<int>("BorderRadius");

                    b.Property<string>("BorderStyle");

                    b.Property<string>("ClassAttribute");

                    b.Property<string>("Height");

                    b.Property<int>("Order");

                    b.Property<string>("Width");

                    b.HasKey("CustomWidgetId", "RowId");

                    b.HasIndex("RowId");

                    b.ToTable("RowCustomWidgets");
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.RowWidgets.RowReportWidget", b =>
                {
                    b.Property<Guid>("ReportWidgetId");

                    b.Property<Guid>("RowId");

                    b.Property<string>("BackGroundColor");

                    b.Property<int>("BorderRadius");

                    b.Property<string>("BorderStyle");

                    b.Property<string>("ClassAttribute");

                    b.Property<string>("Height");

                    b.Property<int>("Order");

                    b.Property<string>("Width");

                    b.HasKey("ReportWidgetId", "RowId");

                    b.HasIndex("RowId");

                    b.ToTable("RowReportWidgets");
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.WidgetGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSystem");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("WidgetGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aced3174-744a-48e4-82b9-de80d8d76114"),
                            Changed = new DateTime(2019, 9, 29, 20, 12, 6, 425, DateTimeKind.Utc).AddTicks(8413),
                            Created = new DateTime(2019, 9, 29, 20, 12, 6, 425, DateTimeKind.Utc).AddTicks(7821),
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Charts",
                            Order = 1,
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("05490637-ba30-4bbb-9165-2cbeba51995a"),
                            Changed = new DateTime(2019, 9, 29, 20, 12, 6, 456, DateTimeKind.Utc).AddTicks(518),
                            Created = new DateTime(2019, 9, 29, 20, 12, 6, 456, DateTimeKind.Utc).AddTicks(510),
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Reports",
                            Order = 2,
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("c67f5e2f-507d-4ed2-aab3-c107384b1937"),
                            Changed = new DateTime(2019, 9, 29, 20, 12, 6, 456, DateTimeKind.Utc).AddTicks(935),
                            Created = new DateTime(2019, 9, 29, 20, 12, 6, 456, DateTimeKind.Utc).AddTicks(935),
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Custom",
                            Order = 3,
                            Version = 0
                        });
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.WidgetTypes.ChartWidget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowCache");

                    b.Property<string>("Author");

                    b.Property<TimeSpan>("CacheRefreshSpan");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSystem");

                    b.Property<DateTime?>("LastRefreshTime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Template")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.Property<Guid>("WidgetGroupId");

                    b.Property<int>("WidgetTemplateType");

                    b.HasKey("Id");

                    b.HasIndex("WidgetGroupId");

                    b.ToTable("ChartWidgets");
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.WidgetTypes.CustomWidget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowCache");

                    b.Property<string>("Author");

                    b.Property<TimeSpan>("CacheRefreshSpan");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSystem");

                    b.Property<DateTime?>("LastRefreshTime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Template")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.Property<Guid>("WidgetGroupId");

                    b.Property<int>("WidgetTemplateType");

                    b.HasKey("Id");

                    b.HasIndex("WidgetGroupId");

                    b.ToTable("CustomWidgets");
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.WidgetTypes.ListWidget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowCache");

                    b.Property<string>("Author");

                    b.Property<TimeSpan>("CacheRefreshSpan");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSystem");

                    b.Property<DateTime?>("LastRefreshTime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Template")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.Property<Guid>("WidgetGroupId");

                    b.Property<int>("WidgetTemplateType");

                    b.HasKey("Id");

                    b.HasIndex("WidgetGroupId");

                    b.ToTable("ListWidgets");
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.WidgetTypes.ReportWidget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowCache");

                    b.Property<string>("Author");

                    b.Property<TimeSpan>("CacheRefreshSpan");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSystem");

                    b.Property<DateTime?>("LastRefreshTime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("ReportId");

                    b.Property<string>("Template")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.Property<Guid>("WidgetGroupId");

                    b.Property<int>("WidgetTemplateType");

                    b.HasKey("Id");

                    b.HasIndex("WidgetGroupId");

                    b.ToTable("ReportWidgets");
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.WidgetTypes.TabbedWidget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowCache");

                    b.Property<string>("Author");

                    b.Property<TimeSpan>("CacheRefreshSpan");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSystem");

                    b.Property<DateTime?>("LastRefreshTime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Template")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.Property<Guid>("WidgetGroupId");

                    b.Property<int>("WidgetTemplateType");

                    b.HasKey("Id");

                    b.HasIndex("WidgetGroupId");

                    b.ToTable("TabbedWidgets");
                });

            modelBuilder.Entity("GR.Audit.Abstractions.Models.TrackAuditDetails", b =>
                {
                    b.HasOne("GR.Audit.Abstractions.Models.TrackAudit")
                        .WithMany("AuditDetailses")
                        .HasForeignKey("TrackAuditId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.Row", b =>
                {
                    b.HasOne("GR.Dashboard.Abstractions.Models.DashBoard", "DashBoard")
                        .WithMany("Rows")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.RowWidgets.RowChartWidget", b =>
                {
                    b.HasOne("GR.Dashboard.Abstractions.Models.WidgetTypes.ChartWidget", "ChartWidget")
                        .WithMany("ChartWidgets")
                        .HasForeignKey("ChartWidgetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GR.Dashboard.Abstractions.Models.Row", "Row")
                        .WithMany("ChartWidgets")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.RowWidgets.RowCustomWidget", b =>
                {
                    b.HasOne("GR.Dashboard.Abstractions.Models.WidgetTypes.CustomWidget", "CustomWidget")
                        .WithMany("CustomWidgets")
                        .HasForeignKey("CustomWidgetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GR.Dashboard.Abstractions.Models.Row", "Row")
                        .WithMany("CustomWidgets")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.RowWidgets.RowReportWidget", b =>
                {
                    b.HasOne("GR.Dashboard.Abstractions.Models.WidgetTypes.ReportWidget", "ReportWidget")
                        .WithMany("ReportWidgets")
                        .HasForeignKey("ReportWidgetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GR.Dashboard.Abstractions.Models.Row", "Row")
                        .WithMany("ReportWidgets")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.WidgetTypes.ChartWidget", b =>
                {
                    b.HasOne("GR.Dashboard.Abstractions.Models.WidgetGroup", "WidgetGroup")
                        .WithMany()
                        .HasForeignKey("WidgetGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.WidgetTypes.CustomWidget", b =>
                {
                    b.HasOne("GR.Dashboard.Abstractions.Models.WidgetGroup", "WidgetGroup")
                        .WithMany()
                        .HasForeignKey("WidgetGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.WidgetTypes.ListWidget", b =>
                {
                    b.HasOne("GR.Dashboard.Abstractions.Models.WidgetGroup", "WidgetGroup")
                        .WithMany()
                        .HasForeignKey("WidgetGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.WidgetTypes.ReportWidget", b =>
                {
                    b.HasOne("GR.Dashboard.Abstractions.Models.WidgetGroup", "WidgetGroup")
                        .WithMany()
                        .HasForeignKey("WidgetGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Dashboard.Abstractions.Models.WidgetTypes.TabbedWidget", b =>
                {
                    b.HasOne("GR.Dashboard.Abstractions.Models.WidgetGroup", "WidgetGroup")
                        .WithMany()
                        .HasForeignKey("WidgetGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
