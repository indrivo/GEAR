// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ST.Procesess.Data;

namespace ST.Procesess.Migrations
{
    [DbContext(typeof(ProcessesDbContext))]
    [Migration("20190311121710_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Processes")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ST.Audit.Models.TrackAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("DatabaseContextName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("RecordId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("TrackEventType");

                    b.Property<string>("TypeFullName");

                    b.Property<string>("UserName");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("TrackAudits");
                });

            modelBuilder.Entity("ST.Audit.Models.TrackAuditDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("PropertyName");

                    b.Property<string>("PropertyType");

                    b.Property<Guid?>("TenantId");

                    b.Property<Guid>("TrackAuditId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TrackAuditId");

                    b.ToTable("TrackAuditDetails");
                });

            modelBuilder.Entity("ST.Procesess.Models.STIncomingTransition", b =>
                {
                    b.Property<Guid>("ProcessTransitionId");

                    b.Property<Guid>("IncomingTransitionId");

                    b.HasKey("ProcessTransitionId", "IncomingTransitionId");

                    b.HasIndex("IncomingTransitionId");

                    b.ToTable("IncomingTransitions");
                });

            modelBuilder.Entity("ST.Procesess.Models.STOutgoingTransition", b =>
                {
                    b.Property<Guid>("ProcessTransitionId");

                    b.Property<Guid>("OutgoingTransitionId");

                    b.HasKey("ProcessTransitionId", "OutgoingTransitionId");

                    b.HasIndex("OutgoingTransitionId");

                    b.ToTable("OutGoingTransitions");
                });

            modelBuilder.Entity("ST.Procesess.Models.STProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("IntitialProcessId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("ProcessSchemaId");

                    b.Property<string>("ProcessSettings");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("IntitialProcessId");

                    b.HasIndex("ProcessSchemaId");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("ST.Procesess.Models.STProcessInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<int>("InstanceState");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("ProcessId");

                    b.Property<double>("Progress");

                    b.Property<Guid>("StartedBy");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("ProcessInstances");
                });

            modelBuilder.Entity("ST.Procesess.Models.STProcessInstanceHistory", b =>
                {
                    b.Property<Guid>("ProcessTransitionId");

                    b.Property<Guid>("ProcessInstanceId");

                    b.Property<int>("TransitionState");

                    b.HasKey("ProcessTransitionId", "ProcessInstanceId");

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("ProcessInstanceHistories");
                });

            modelBuilder.Entity("ST.Procesess.Models.STProcessSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("Diagram")
                        .IsRequired();

                    b.Property<Guid?>("InitialSchemaId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<bool>("Synchronized");

                    b.Property<Guid?>("TenantId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("InitialSchemaId");

                    b.ToTable("ProcessSchemas");
                });

            modelBuilder.Entity("ST.Procesess.Models.STProcessTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("Assigned");

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Life");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ProcessTaskState");

                    b.Property<Guid>("ProcessTransitionId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ProcessTransitionId");

                    b.ToTable("ProcessTasks");
                });

            modelBuilder.Entity("ST.Procesess.Models.STProcessTransition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("ProcessId");

                    b.Property<Guid?>("TenantId");

                    b.Property<string>("TransitionSettings");

                    b.Property<int>("TransitionType");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("ProcessTransitions");
                });

            modelBuilder.Entity("ST.Procesess.Models.STTransitionActor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActorSettings");

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("ProcessTransitionId");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ProcessTransitionId");

                    b.ToTable("TransitionActors");
                });

            modelBuilder.Entity("ST.Procesess.Models.UserProcessTasks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("ProcessTaskId");

                    b.Property<Guid?>("TenantId");

                    b.Property<Guid>("UserId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ProcessTaskId");

                    b.ToTable("UserProcessTasks");
                });

            modelBuilder.Entity("ST.Audit.Models.TrackAuditDetails", b =>
                {
                    b.HasOne("ST.Audit.Models.TrackAudit")
                        .WithMany("AuditDetailses")
                        .HasForeignKey("TrackAuditId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Procesess.Models.STIncomingTransition", b =>
                {
                    b.HasOne("ST.Procesess.Models.STProcessTransition", "IncomingTransition")
                        .WithMany("IncomingTransitions")
                        .HasForeignKey("IncomingTransitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Procesess.Models.STOutgoingTransition", b =>
                {
                    b.HasOne("ST.Procesess.Models.STProcessTransition", "OutgoingTransition")
                        .WithMany("OutgoingTransitions")
                        .HasForeignKey("OutgoingTransitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Procesess.Models.STProcess", b =>
                {
                    b.HasOne("ST.Procesess.Models.STProcess", "IntitialProcess")
                        .WithMany()
                        .HasForeignKey("IntitialProcessId");

                    b.HasOne("ST.Procesess.Models.STProcessSchema", "ProcessSchema")
                        .WithMany()
                        .HasForeignKey("ProcessSchemaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Procesess.Models.STProcessInstance", b =>
                {
                    b.HasOne("ST.Procesess.Models.STProcess", "Process")
                        .WithMany("ProcessInstances")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Procesess.Models.STProcessInstanceHistory", b =>
                {
                    b.HasOne("ST.Procesess.Models.STProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ST.Procesess.Models.STProcessTransition", "ProcessTransition")
                        .WithMany()
                        .HasForeignKey("ProcessTransitionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ST.Procesess.Models.STProcessSchema", b =>
                {
                    b.HasOne("ST.Procesess.Models.STProcessSchema", "InitialSchema")
                        .WithMany()
                        .HasForeignKey("InitialSchemaId");
                });

            modelBuilder.Entity("ST.Procesess.Models.STProcessTask", b =>
                {
                    b.HasOne("ST.Procesess.Models.STProcessTransition", "ProcessTransition")
                        .WithMany()
                        .HasForeignKey("ProcessTransitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Procesess.Models.STProcessTransition", b =>
                {
                    b.HasOne("ST.Procesess.Models.STProcess", "Process")
                        .WithMany("ProcessTransitions")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Procesess.Models.STTransitionActor", b =>
                {
                    b.HasOne("ST.Procesess.Models.STProcessTransition", "ProcessTransition")
                        .WithMany("TransitionActors")
                        .HasForeignKey("ProcessTransitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Procesess.Models.UserProcessTasks", b =>
                {
                    b.HasOne("ST.Procesess.Models.STProcessTask", "ProcessTask")
                        .WithMany()
                        .HasForeignKey("ProcessTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
