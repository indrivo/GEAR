@{
	ViewData["Title"] = "Internal Calendar";
}

@section Styles
{
	<link rel="stylesheet" type="text/css" href="~/calendar/css/fullcalendar-rewrite.css" />
	<style>
		thead {
			background-color: transparent !important;
		}

		.fc .fc-view .fc-body td {
			padding: 0 !important;
		}

		.fc-toolbar .fc-button {
			background: transparent;
			outline: none;
			border: 0;
			box-shadow: none;
			cursor: pointer;
			text-transform: capitalize;
			border-radius: 0;
		}

		.fc-toolbar .fc-center h2 {
			font-size: 24px;
		}

		.fc-toolbar .fc-month-button,
		.fc-toolbar .fc-agendaWeek-button,
		.fc-toolbar .fc-agendaDay-button {
			color: #818999;
			border-bottom: 2px solid transparent;
			margin-right: 10px;
			font-size: 18px;
		}

		.fc-toolbar .fc-left .fc-state-active {
			color: #2862D6;
			border-bottom: 2px solid #2862D6;
		}

		.fc-toolbar .fc-right .fc-button-group {
			background-color: #FFFFFF;
			border: 1px solid #D8DCE0;
			height: 40px;
			display: flex;
			align-items: center;
		}

		.fc-toolbar .fc-prev-button,
		.fc-toolbar .fc-next-button {
			height: 100%;
			width: 40px;
			display: inline-flex;
			justify-content: center;
			align-items: center;
		}

		.fc-toolbar .fc-prev-button {
			border-right: 1px solid #D8DCE0;
		}

		.fc-toolbar .fc-next-button {
			border-left: 1px solid #D8DCE0;
		}

		.fc-toolbar .fc-today-button {
			height: 100%;
			padding-left: 16px;
			padding-right: 16px;
			font-size: 14px;
		}

		.fc-toolbar .fc-prev-button .fc-icon:after,
		.fc-toolbar .fc-next-button .fc-icon:after {
			top: 0;
			color: #B1B1B1;
		}

		.fc-head .fc-day-header {
			padding: 10px 5px;
			font-size: 18px;
			color: #818999;
		}

		.fc-widget-content .fc-day-top .fc-day-number {
			float: right !important;
		}

		.fc-widget-content .fc-day-top.fc-today .fc-day-number {
			background-color: #0848C8;
			padding: 1px 5px;
			font-size: 18px;
			color: white;
		}

		.details-popup {
			z-index: 999;
			box-shadow: 0px 2px 20px 0px rgba(0,0,0,0.1);
		}

			.details-popup .popup-content {
				background-color: white;
				border-radius: 4px;
				border: 1px solid #D8DCE0;
				width: 280px;
				max-width: 280px;
				padding-top: 10px;
				padding-bottom: 10px;
			}

		.details-popup-section {
			padding: 10px 15px;
		}

			.details-popup-section:not(:last-child) {
				border-bottom: 1px solid #D8DCE0;
			}

		.details-popup-actions {
			position: absolute;
			right: 10px;
			top: 15px;
			cursor: pointer;
		}

			.details-popup-actions .dropdown-menu.show {
				top: -10px !important;
				min-width: 0;
				padding: 10px 15px;
				margin: 0px;
				height: auto;
				left: 15px !important;
				display: flex;
				width: auto;
				min-height: 0;
				align-items: center;
				box-shadow: 0px 2px 20px 0px rgba(0,0,0,0.1);
				border-color: #D8DCE0;
			}

			.details-popup-actions .dropdown-item {
				width: auto;
				padding: 0;
				color: #081018;
				border: 0;
				line-height: 0;
			}

			.details-popup-actions .dropdown-arrow {
				width: 0;
				height: 0;
				border-style: solid;
				position: absolute;
				margin: 5px;
				border-color: #FFFFFF;
				border-width: 10px 10px 10px 0;
				border-left-color: transparent;
				border-top-color: transparent;
				border-bottom-color: transparent;
				left: -10px;
				top: calc(50% - 15px);
				margin-left: 0;
				margin-right: 0;
			}

			.details-popup-actions .dropdown-item:not(:last-child) {
				margin-right: 10px;
			}

			.details-popup-actions .dropdown-item i {
				font-size: 18px;
				line-height: 18px;
			}

		.details-popup-title {
			color: #081018;
			font-size: 16px;
			font-weight: bold;
		}

		.popper .popper__arrow {
			width: 0;
			height: 0;
			border-style: solid;
			position: absolute;
			margin: 5px;
			border-color: #FFFFFF;
		}

		.popper[x-placement^="top"] {
			margin-bottom: 3px;
		}

			.popper[x-placement^="top"] .popper__arrow {
				border-width: 10px 10px 0 10px;
				border-left-color: transparent;
				border-right-color: transparent;
				border-bottom-color: transparent;
				bottom: -9px;
				left: calc(50% - 5px);
				margin-top: 0;
				margin-bottom: 0;
			}

		.popper[x-placement^="bottom"] {
			margin-top: 3px;
		}

			.popper[x-placement^="bottom"] .popper__arrow {
				border-width: 0 10px 10px 10px;
				border-left-color: transparent;
				border-right-color: transparent;
				border-top-color: transparent;
				top: -9px;
				left: calc(50% - 5px);
				margin-top: 0;
				margin-bottom: 0;
			}

		.popper[x-placement^="right"] {
			margin-left: 3px;
		}

			.popper[x-placement^="right"] .popper__arrow {
				border-width: 10px 10px 10px 0;
				border-left-color: transparent;
				border-top-color: transparent;
				border-bottom-color: transparent;
				left: -9px;
				top: calc(50% - 5px);
				margin-left: 0;
				margin-right: 0;
			}

		.popper[x-placement^="left"] {
			margin-right: 3px;
		}

			.popper[x-placement^="left"] .popper__arrow {
				border-width: 10px 0 10px 10px;
				border-top-color: transparent;
				border-right-color: transparent;
				border-bottom-color: transparent;
				right: -9px;
				top: calc(50% - 5px);
				margin-left: 0;
				margin-right: 0;
			}

		.add-event-region {
			margin-top: 12px;
			border-top: 1px solid #D8DCE0;
			padding-top: 20px;
		}

			.add-event-region .form-group {
				margin-bottom: 10px;
			}

				.add-event-region .form-group label {
					margin-bottom: 5px;
				}
	</style>
}
@inject IStringLocalizer Localizer

<div class="row">
	<div class="col calendar-controls">
	</div>
</div>
<div class="row">
	<div class="col-md-3">
		<div class="card">
			<div class="card-body">
				<h4 class="card-title">Drag and Drop Your Event</h4>
				<div class="row">
					<div class="col">
						<div id="calendar-events" class="m-t-20">
						</div>
						<!-- checkbox -->
						<div class="checkbox">
							<input id="drop-remove" type="checkbox">
							<label for="drop-remove">
								Remove after drop
							</label>
						</div>
					</div>
				</div>
				<div class="add-event-region">
					<form id="add-event">
						<div class="form-group">
							<label for="add-event-title">@Localizer["system_calendar_event_title"]</label>
							<input type="text" id="add-event-title" class="form-control event-title" required>
						</div>
						<div class="form-group">
							<label for="add-event-details">@Localizer["system_calendar_event_details"]</label>
							<textarea id="add-event-details" class="form-control event-details"></textarea>
						</div>
						<div class="form-group">
							<label for="add-event-location">@Localizer["system_calendar_event_location"]</label>
							<input type="text" id="add-event-location" class="form-control event-location">
						</div>
						<div class="form-group">
							<label for="add-event-priority">@Localizer["system_calendar_event_priority"]</label>
							<select id="add-event-priority" class="form-control event-priority"></select>
						</div>
						<div class="form-group">
							<label for="add-event-members">@Localizer["system_calendar_event_members"]</label>
							<select id="add-event-members" class="form-control event-members" multiple></select>
						</div>
						<button id="add-form-submit" type="submit" class="btn btn-outline-primary w-100">
							@Localizer["save"]
						</button>
					</form>
				</div>
			</div>
		</div>
	</div>
	<div class="col-md-9 calendar-grid">
		<div class="card">
			<div class="card-block">
				<div id="calendar"></div>
			</div>
		</div>
	</div>
</div>

<!-- Details popper-->
<div class="popper details-popup">
</div>

<!-- Details poupup actions popup -->
@*<div class="details-popup-actions-popup">
		<span class="edit-event">Edit</span>
		<span class="delete-event">Delete</span>
	</div>*@

@section Scripts
{
	<script src="~/lib/moment.js/moment.js"></script>
	<script src="~/lib/fullcalendar/fullcalendar.js"></script>
	<script src="~/lib/tooltip.js/popper.min.js"></script>
	<script src="~/lib/tooltip.js/tooltip.min.js"></script>
	@*<script src="~/calendar/js/internal-calendar-plugin-v1.js"></script>*@

	<script>
		class Calendar {
			ajaxRequest(requestUrl, requestType, requestData) {
				const baseUrl = '/api/Calendar';
				return new Promise((resolve, reject) => {
					$.ajax({
						url: baseUrl + requestUrl,
						type: requestType,
						data: requestData,
						success: (data) => {
							if (data.is_success) {
								resolve(data.result);
							} else if (data.is_success === false) {
								reject(data.error_keys);
							} else {
								resolve(data);
							}
						},
						error: (e) => {
							reject(e);
						}
					});
				});
			}

			addEvent(event = {
				title: '',
				details: '',
				location: '',
				startDate: '',
				endDate: '',
				priority: '',
				members: []
			}) {
				const requestUrl = '/AddEvent';
				return this.ajaxRequest(requestUrl, 'post', event).then(result => {
					return result;
				}).catch(e => {
					return e;
				});
			}

			updateEvent(event = {
				id: '',
				title: '',
				details: '',
				location: '',
				startDate: '',
				endDate: '',
				priority: '',
				members: [],
				organizer: ''
			}) {
				const requestUrl = '/UpdateEvent';
				return this.ajaxRequest(requestUrl, 'post', event).then(result => {
					return result;
				}).catch(e => {
					return e;
				});
			}

			changeMemberEventAcceptance(event = {
				eventId: '',
				memberId: '',
				acceptance: ''
			}) {
				const requestUrl = '/ChangeMemberEventAcceptance';
				return this.ajaxRequest(requestUrl, 'post', event).then(result => {
					return result;
				}).catch(e => {
					return e;
				});
			}

			getAllEventsOrganizedByMe() {
				const requestUrl = '/GetAllEventsOrganizedByMe';
				return this.ajaxRequest(requestUrl, 'get', null).then(result => {
					return result;
				}).catch(e => {
					return e;
				});
			}

			getOrganizationUserEvents(config = {
				userId: '',
				startDate: '',
				endDate: ''
			}) {
				const requestUrl = '/GetOrganizationUserEvents';
				return this.ajaxRequest(requestUrl, 'get', config).then(result => {
					return result;
				}).catch(e => {
					return e;
				});
			}

			getMyEvents(config = {
				startDate: '',
				endDate: ''
			}) {
				const requestUrl = '/GetMyEvents';
				return this.ajaxRequest(requestUrl, 'get', config).then(result => {
					return result;
				}).catch(e => {
					return e;
				});
			}

			getUserEventsByTimeLine(config = {
				userId: '',
				timeLineType: 'month',
				expandDayPrecision: 0
			}) {
				const requestUrl = '/GetUserEventsByTimeLine';
				return this.ajaxRequest(requestUrl, 'get', config).then(result => {
					return result;
				}).catch(e => {
					return e;
				});
			}

			getEventById(config = {
				eventId: '',
			}) {
				const requestUrl = '/GetEventById';
				return this.ajaxRequest(requestUrl, 'get', config).then(result => {
					return result;
				}).catch(e => {
					return e;
				});
			}

			getHelpers() {
				const requestUrl = '/Helpers';
				return this.ajaxRequest(requestUrl, 'get', null).then(result => {
					return result;
				}).catch(e => {
					return e;
				});
			}

			getOrganizationUsers() {
				const requestUrl = '/GetOrganizationUsers';
				return this.ajaxRequest(requestUrl, 'get', null).then(result => {
					return result;
				}).catch(e => {
					return e;
				});
			}

			deletePermanently(config = {
				eventId: ''
			}) {
				const requestUrl = '/DeletePermanently';
				return this.ajaxRequest(requestUrl, 'post', config).then(result => {
					return result;
				}).catch(e => {
					return e;
				});
			}

			deleteLogically(config = {
				eventId: ''
			}) {
				const requestUrl = '/DeleteLogically';
				return this.ajaxRequest(requestUrl, 'post', config).then(result => {
					return result;
				}).catch(e => {
					return e;
				});
			}

			restore(config = {
				eventId: ''
			}) {
				const requestUrl = '/Restore';
				return this.ajaxRequest(requestUrl, 'post', config).then(result => {
					return result;
				}).catch(e => {
					return e;
				});
			}

			helpers = {};
			loadHelpers() {
				const scope = this;
				return new Promise((resolve, reject) => {
					if (scope.helpers.length > 0) {
						resolve(scope.helpers);
					} else {
						scope.getHelpers().then(result => {
							scope.helpers = result;
							resolve(scope.helpers);
						}).catch(e => {
							console.warn(e);
							toast.notifyErrorList(e);
						});
					}
				})
			}

		}
	</script>

	<script id="eventTemplate" type="text/x-jsrender">
		<div class="fc-content" data-event-id="{{:id}}">
			<span class="fc-time">{{:time}}</span>
			<span class="fc-title">{{:title}}</span>
		</div>
	</script>

	<script id="teamMember" type="text/x-jsrender">
		<div class="event-member" data-member-id="{{:id}}">
			<div class="d-flex">
				<span class="member-acceptance acceptance-{{:acceptance}}"></span>
				<div class="member-name"><span>{{:firstName}}</span><span>{{:lastName}}</span></div>
			</div>
		</div>
	</script>

	<script id="teamMemberEdit" type="text/x-jsrender">
		<div class="event-member" data-member-id="{{:id}}">
			<div class="d-flex">
				<span class="member-acceptance acceptance-{{:acceptance}}"></span>
				<div class="member-name"><span>{{:firstName}}</span><span>{{:lastName}}</span></div>
				<div class="member-dismissa align-self-end"><i class="material-icons text-danger">close</i></div>
			</div>
		</div>
	</script>

	<script id="eventPopup" type="text/x-jsrender">
		<div class="popup-content">
			<div class="details-popup-section details-popup-header">
				<div class="details-popup-title">{{:title}}</div>
				<div class="details-popup-priority"><span class="event-priority-bullet priority-{{:~priority}}"></span>{{:~priority}}</div>
				<div class="details-popup-actions dropright">
					<div class="cursor" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
						<i class="material-icons">more_vert</i>
					</div>
					<div class="dropdown-menu">
						<a class="dropdown-item event-edit" data-event-id="{{:id}}">
							<i class="material-icons">edit</i>
						</a>
						<a class="dropdown-item event-delete" data-event-id="{{:id}}">
							<i class="material-icons">delete_outline</i>
						</a>
						<div class="dropdown-arrow"></div>
					</div>
				</div>
			</div>
			<div class="details-popup-section details-popup-date">
				<div class="row">
					<div class="col-6">
						<div class="details-popup-date">{{:~startDate}}</div>
					</div>
					<div class="col-6">
						<div class="d-flex">
							<div class="details-popup-time mr-2">{{:~startTime}}</div>
							<span>@Localizer["system_calendar_time_tosystem_casystem_ca"]</span>
							<div class="details-popup-time ml-2">{{:~endTime}}</div>
						</div>
					</div>
				</div>
			</div>
			<div class="details-popup-section details-popup-members">
				<div class="details-popup-members-list">

				</div>
			</div>
			<div class="details-popup-section details-popup-description">
				<p>
					{{:details}}
				</p>
			</div>
		</div>
		<div class="popper__arrow" x-arrow></div>
	</script>

	<script id="eventPopupEdit" type="text/x-jsrender">
		<div class="popup-content">
			<form id="edit-event" data-event-id="{{:id}}">
				<div class="details-popup-section details-popup-header">
					<div class="details-popup-title">
						<input type="text" class="input-inline-editing event-title" value="{{:title}}">
					</div>
					<div class="details-popup-priority">
						<select class="select-inline-editing event-proprity"></select>
					</div>
				</div>
				<div class="details-popup-section details-popup-date">
					<div class="details-popup-date">
						<input type="date" class="date-inline-editing event-start-date" value="{{:startDate}}">
						<input type="time" class="time-inline-editing event-start-time" value="{{:startTime}}">
					</div>
					<div class="details-popup-time">
						<input type="date" class="date-inline-editing event-end-date" value="{{:endDate}}">
						<input type="time" class="date-inline-editing event-end-time" value="{{:endTime}}">
					</div>
				</div>
				<div class="details-popup-section details-popup-members">
					<div class="details-popup-members-list">
					</div>
					<input class="input-inline-editing event-new-guest" type="text" placeholder="@Localizer["system_calendar_add_guest"])" />
				</div>
				<div class="details-popup-section details-popup-description">
					<textarea class="textarea-inline-editing event-details">
						{{:details}}
					</textarea>
				</div>
				<div class="pull-right pb-4 pr-4">
					<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
					<button type="submit" class="submit-add-task btn btn-success text-white" form="add-task">@Localizer["system_taskmanager_save_task"]</button>
				</div>
			</form>
		</div>
		<div class="popper__arrow" x-arrow></div>
	</script>

	<script id="eventDraftList" type="text/x-jsrender">
		<div class="calendar-events" data-class=""><i class="fa fa-circle text-info"></i></div>
	</script>

	<script>
		!function ($) {
			"use strict";

			const calendar = new Calendar();
			const eventTemplate = $.templates("#eventTemplate");

			var CalendarApp = function () {
				this.$body = $("body")
				this.$calendar = $('#calendar'),
					this.$event = ('#calendar-events div.calendar-events'),
					this.$categoryForm = $('#add-new-event form'),
					this.$extEvents = $('#calendar-events'),
					this.$modal = $('#my-event'),
					this.$saveCategoryBtn = $('.save-category'),
					this.$calendarObj = null
			};

			/* on drop */
			CalendarApp.prototype.onDrop = function (eventObj, date) {
				var $this = this;
				// retrieve the dropped element's stored Event Object
				var originalEventObject = eventObj.data('eventObject');
				var $categoryClass = eventObj.attr('data-class');
				// we need to copy it, so that multiple events don't have a reference to the same object
				var copiedEventObject = $.extend({}, originalEventObject);
				// assign it the date that was reported
				copiedEventObject.start = date;
				if ($categoryClass)
					copiedEventObject['className'] = [$categoryClass];
				// render the event on the calendar
				$this.$calendar.fullCalendar('renderEvent', copiedEventObject, true);
				// is the "remove after drop" checkbox checked?
				if ($('#drop-remove').is(':checked')) {
					// if so, remove the element from the "Draggable Events" list
					eventObj.remove();
				}
			},

				/* on click on event */
				CalendarApp.prototype.onEventClick = function (calEvent, jsEvent, view) {
					detailsPopup.show();
				},
				/* on select */
				CalendarApp.prototype.onSelect = function (start, end, allDay) {
					var $this = this;
					$this.$modal.modal({
						backdrop: 'static'
					});
					var form = $("<form></form>");
					form.append("<div class='row'></div>");
					form.find(".row")
						.append("<div class='col-md-6'><div class='form-group'><label class='control-label'>Event Name</label><input class='form-control' placeholder='Insert Event Name' type='text' name='title' /></div></div>")
						.append("<div class='col-md-6'><div class='form-group'><label class='control-label'>Category</label><select class='form-control' name='category'></select></div></div>")
						.find("select[name='category']")
						.append("<option value='bg-danger'>Danger</option>")
						.append("<option value='bg-success'>Success</option>")
						.append("<option value='bg-purple'>Purple</option>")
						.append("<option value='bg-primary'>Primary</option>")
						.append("<option value='bg-pink'>Pink</option>")
						.append("<option value='bg-info'>Info</option>")
						.append("<option value='bg-warning'>Warning</option></div></div>");
					$this.$modal.find('.delete-event').hide().end().find('.save-event').show().end().find('.modal-body').empty().prepend(form).end().find('.save-event').unbind('click').click(function () {
						form.submit();
					});
					$this.$modal.find('form').on('submit', function () {
						var title = form.find("input[name='title']").val();
						var beginning = form.find("input[name='beginning']").val();
						var ending = form.find("input[name='ending']").val();
						var categoryClass = form.find("select[name='category'] option:checked").val();
						if (title !== null && title.length != 0) {
							$this.$calendarObj.fullCalendar('renderEvent', {
								title: title,
								start: start,
								end: end,
								allDay: false,
								className: categoryClass
							}, true);
							$this.$modal.modal('hide');
						}
						else {
							alert('You have to give a title to your event');
						}
						return false;

					});
					$this.$calendarObj.fullCalendar('unselect');
				},
				CalendarApp.prototype.enableDrag = function () {
					//init events
					$(this.$event).each(function () {
						// create an Event Object (http://arshaw.com/fullcalendar/docs/event_data/Event_Object/)
						// it doesn't need to have a start or end
						var eventObject = {
							title: $.trim($(this).text()) // use the element's text as the event title
						};
						// store the Event Object in the DOM element so we can get to it later
						$(this).data('eventObject', eventObject);
						// make the event draggable using jQuery UI
						$(this).draggable({
							zIndex: 999,
							revert: true,      // will cause the event to go back to its
							revertDuration: 0  //  original position after the drag
						});
					});
				}
			/* Initializing */
			CalendarApp.prototype.init = function () {
				this.enableDrag();
				/*  Initialize the calendar  */
				var date = new Date();
				var d = date.getDate();
				var m = date.getMonth();
				var y = date.getFullYear();
				var form = '';
				var today = new Date($.now());
				var $this = this;

				const getConfig = {
					userId: settings.user.id,
					timeLyneType: 'month',
					expandDayPrecision: 6
				}

				let events = [];
				return calendar.getUserEventsByTimeLine(getConfig).then(result => {
					$.each(result.events, function () {
						const scope = this;
						events.push({
							title: scope.title,
							start: scope.startDate,
							end: scope.endDate,
							extendedProps: {
								id: scope.id,
								description: scope.description
							},
						});
					});
					$this.$calendarObj = $this.$calendar.fullCalendar({
						slotDuration: '00:15:00', /* If we want to split day time each 15minutes */
						minTime: '08:00:00',
						maxTime: '19:00:00',
						defaultView: 'month',
						handleWindowResize: true,

						header: {
							left: 'month,agendaWeek,agendaDay',
							center: 'title',
							right: 'prev,next today'
						},
						events: events,
						eventRender: function (event, element, view) {
							const time = moment(event.start._i, event.start._f).format('hha');
							const htmlOutput = eventTemplate.render({
								id: event.extendedProps.id,
								time: time,
								title: event.title
							});
							element.html(htmlOutput);
						},
						editable: true,
						droppable: true, // this allows things to be dropped onto the calendar !!!
						eventLimit: true, // allow "more" link when too many events
						selectable: true,
						drop: function (date) { $this.onDrop($(this), date); },
						select: function (start, end, allDay) { $this.onSelect(start, end, allDay); },
						//eventClick: function (calEvent, jsEvent, view) {
						//	$this.onEventClick(calEvent, jsEvent, view);
						//}

					});

					//on new event
					this.$saveCategoryBtn.on('click', function () {
						var categoryName = $this.$categoryForm.find("input[name='category-name']").val();
						var categoryColor = $this.$categoryForm.find("select[name='category-color']").val();
						if (categoryName !== null && categoryName.length != 0) {
							$this.$extEvents.append('<div class="calendar-events bg-' + categoryColor + '" data-class="bg-' + categoryColor + '" style="position: relative;"><i class="fa fa-move"></i>' + categoryName + '</div>')
							$this.enableDrag();
						}

					});
				});


			},

				//init CalendarApp
				$.CalendarApp = new CalendarApp, $.CalendarApp.Constructor = CalendarApp

		}(window.jQuery),

			//initializing CalendarApp
			function ($) {
				"use strict";
				const toast = new ToastNotifier();
				const calendar = new Calendar();
				const templates = {
					eventPopup: $.templates("#eventPopup"),
					eventPopupEdit: $.templates("#eventPopupEdit"),
					teamMember: $.templates("#teamMember"),
					teamMemberEdit: $.templates("#teamMemberEdit")
				}
				const detailsPopup = $('.details-popup');
				let helpers = [];
				detailsPopup.hide();

				$(document).ready(function () {
					loadHelpers();

					$('#add-event').submit(function (e) {
						e.preventDefault();
					});
				});

				function calendarRequest(request) {
					return request.then(result => {
						return result;
					}).catch(e => {
						toast.notifyErrorList(e);
					});
				}

				function loadHelpers() {
					calendarRequest(calendar.getOrganizationUsers()).then(users => {
						fillMembersSelect(users, $('#add-event .event-members'));
						calendarRequest(calendar.getHelpers()).then(data => {
							helpers = data;
							//fillSelect(helpers.EventPriority, $('#add-event .event-priority'), true);
							initCalendar();
						});
					});
				}

				function fillSelect(options, selectTarget, translatable) {
					selectTarget.html('');
					$.each(options, function () {
						let newOption = new Option(this.text, this.value);
						if (translatable) {
							newOption = new Option(window.translate(this.translateKey), this.value);;
						}
						selectTarget.append(newOption);
					});
					window.forceTranslate(selectTarget);
					selectTarget.select2();
				}

				function fillMembersSelect(options, selectTarget) {
					selectTarget.html('');
					$.each(options, function () {
						let newOption = new Option(`${this.firstName} ${this.lastName}`, this.id);
						if (this.firstName === null || this.lastName === null) {
							newOption = new Option(this.userName, this.id);
						}
						selectTarget.append(newOption);
					});
					window.forceTranslate(selectTarget);
					selectTarget.select2();
				}

				function initCalendar() {
					$.CalendarApp.init().then(() => {
						$('.calendar-controls').prepend($('.fc-toolbar'));
						$('.fc-today-button').insertAfter($('.fc-prev-button'));
						$('.fc-toolbar').addClass('row align-items-end');
						$('.fc-toolbar .fc-left').addClass('col-md-3 text-left');
						$('.fc-toolbar .fc-center').addClass('col text-left').insertAfter($('.fc-toolbar .fc-left'));
						$('.fc-toolbar .fc-right').addClass('col-auto');
						eventOnClick();
					});
				}

				function eventOnClick() {
					$(document).on('click', function (e) {
						//e.preventDefault();
						let target = $(e.target);

						const isEvent = target.is('.fc-day-grid-event.fc-event');
						const isEventElement = target.is('.fc-day-grid-event.fc-event *');
						const isPopup = target.is('.details-popup');
						const isPopupElement = target.is('.details-popup *');
						const isPopupAction = target.is('.details-popup .event-edit i') || target.is('.details-popup .event-delete i');
						const popupCase = isPopup || isPopupElement;
						if (isEvent) {
							addPopup(target, 'eventPopup');
						} else if (isEventElement) {
							addPopup(target.closest('.fc-day-grid-event.fc-event'), 'eventPopup');
						} else if (!isPopupAction && popupCase) {
							return;
						} else {
							$('.details-popup').data('visibility', 'hidden').hide();
						}
					});
				}

				function loadMembersInPopup(membersList, template) {
					const loadPlace = $('.details-popup-members-list');
					let htmlOutput = null;
					loadPlace.html('');
					if (membersList.length > 0) {
						loadPlace.closest('.details-popup-members').show();
						$.each(membersList, function (index, value) {
							if (template != 'teamMember') {
								htmlOutput = templates.teamMemberEdit.render(value);
							} else {
								htmlOutput = templates.teamMember.render(value);
							}
							loadPlace.append(htmlOutput);
						});
					}
					else {
						loadPlace.closest('.details-popup-members').hide();
					}
				}

				function attachEventsPopupActions(target) {
					$('.details-popup .event-edit').on('click', function (e) {
						e.preventDefault();
						$('.details-popup').data('visibility', 'null');
						addPopup(target, 'eventPopupEdit');
					});
				}

				function addPopup(targetPopup, template) {
					let eventId = targetPopup.children('.fc-content').data('event-id');
					let htmlOutput = null;
					if ($('.details-popup').data('visibility') === `visible-${eventId}`) {
						return;
					}
					calendarRequest(calendar.getEventById({ eventId: eventId })).then(event => {
						const renderHelpers = {
							startDate: moment(event.startDate, "YYYY-MM-DDTHH:mm:ss").format('MMM D, YYYY'),
							startTime: moment(event.startDate, "YYYY-MM-DDTHH:mm:ss").format('HH:mm'),
							endTime: moment(event.endDate, "YYYY-MM-DDTHH:mm:ss").format('HH:mm'),
							priority: helpers.EventPriority[event.priority],
						};

						if (template != 'eventPopup') {
							htmlOutput = templates.eventPopupEdit.render(event, renderHelpers);
							loadMembersInPopup(event.invitedUsers, 'teamMemberEdit');
							$('.details-popup').html(htmlOutput);
						} else {
							htmlOutput = templates.eventPopup.render(event, renderHelpers);
							loadMembersInPopup(event.invitedUsers, 'teamMember');
							$('.details-popup').html(htmlOutput);
							attachEventsPopupActions(targetPopup);
						}


						let popper = new Popper(targetPopup, $('.details-popup'), {
							placement: 'right',
							arrow: {
								enabled: true,
								element: '.popup__arrow'
							}
						});
						$('.details-popup').data('visibility', `visible-${eventId}`).show();
					});
				}

			}(window.jQuery);

	</script>
}
