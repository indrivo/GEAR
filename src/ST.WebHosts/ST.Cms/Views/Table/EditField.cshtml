@using ST.Entities.Abstractions.Constants
@model ST.Entities.ViewModels.Table.CreateTableFieldViewModel

@{
	ViewData["Title"] = "EditField";
}

<div class="row">
	<div class="col-lg-12">
		<div class="card card-outline-primary">
			<div class="card-header">
				<h4 class="m-b-0 text-white">Edit Field</h4>
			</div>
			<div class="card-body">
				<form asp-action="EditField" role="form">
					<input type="hidden" asp-for="Id"/>
					<input type="hidden" asp-for="TableId"/>
					<input type="hidden" asp-for="TableFieldTypeId"/>
					<input type="hidden" asp-for="DataType"/>
					<input type="hidden" asp-for="Parameter"/>
					<div class="form-body">
						<h3 class="card-title">General information about field.</h3>
						<hr>
						<div asp-validation-summary="ModelOnly" class="text-danger"></div>
						<div class="row p-t-20">
							<div class="col-md-6">
								<div class="form-group">
									<label asp-for="Name" class="control-label"></label>
									<input asp-for="Name" value="@Model.Name" class="form-control" readonly="readonly"/>
									<span asp-validation-for="Name" class="text-danger"></span>
								</div>
							</div>
						</div>
						<div class="row">
							<div class="col-md-6">
								<div class="form-group">
									<label asp-for="Description" class="control-label"></label>
									<textarea rows="3" asp-for="Description" class="form-control" value="@Model.Description"></textarea>
									<span asp-validation-for="Description" class="text-danger"></span>
								</div>
							</div>
						</div>
						<div class="row">
							<div class="col-md-6">
								<div class="form-group">
									<label asp-for="DisplayName" class="control-label"></label>
									<input asp-for="DisplayName" class="form-control"/>
									<span asp-validation-for="DisplayName" class="text-danger"></span>
								</div>
							</div>
						</div>
						<div class="row">
							<div class="col-md-6">
								<div class="form-group checkbox checkbox-primary pull-left p-t-0">
									<input asp-for="AllowNull"/>
									<label asp-for="AllowNull">Allow NULL values.</label>
								</div>
							</div>
						</div>
						<div class="row">
							<div class="col-md-6">
								<div class="form-group">
									<div class="header">Field configuration.</div><br/>

									@if (Model.Configurations.Any())
									{
										var i = 0;
										foreach (var item in Model.Configurations)
										{
											if (Model.Parameter == FieldType.EntityReference)
											{
												<div class="field">
													<p>
														@Html.DisplayFor(modelItem => item.Name)<i> (@Html.DisplayFor(modelItem => item.Description))</i>
													</p>
													<input disabled name="Configurations[@i].Value" value="@item.Value" type="text" class="form-control"/>
													<input type="hidden" name="Configurations[@i].Name" value="@item.Name"/>
													<input type="hidden" name="Configurations[@i].ConfigId" value="@item.ConfigId"/>
												</div>
											}
											else
											{
												<div class="field">
													<p>
														@Html.DisplayFor(modelItem => item.Name)<i> (@Html.DisplayFor(modelItem => item.Description))</i>
													</p>
													@switch (item.Type)
													{
														case "int":
														case "decimal":
															<input disabled name="Configurations[@i].Value" value="@item.Value" type="number" class="form-control"/>
															break;
														case "string":
															<input disabled name="Configurations[@i].Value" value="@item.Value" type="text" maxlength="100" class="form-control"/>
															break;
														case "bool":
															<div class="ui slider checkbox">
																<input disabled type="checkbox" name="Configurations[@i].Value" value="@item.Value" class="form-control" checked="checked"/>
																<label for="@Model.AllowNull">Set default value true or false.</label>
															</div>
															break;
														case "char":
															<input disabled name="Configurations[@i].Value" value="@item.Value" type="text" maxlength="1" class="form-control"/>
															break;
														case "time":
														case "datetime":
														case "date":
															<div class="ui slider checkbox">
																<input disabled type="checkbox" name="Configurations[@i].Value" value="@item.Value" class="form-control" checked="checked"/>
																<label for="@Model.AllowNull">Set default value current date or time.</label>
															</div>
															break;
														default:
															<input disabled name="Configurations[@i].Value" value="@item.Value" type="text" maxlength="100" class="form-control"/>
															break;
													}
													<input type="hidden" name="Configurations[@i].Name" value="@item.Name"/>
													<input type="hidden" name="Configurations[@i].ConfigId" value="@item.ConfigId"/>
												</div>
											}
											i++;
										}
									}
								</div>
							</div>


						</div>
					</div>
					<div class="row button-group">
						<div class="col-lg-2 col-md-3">
							<button type="submit" class="btn btn-block btn-success"> <i class="fa fa-check"></i> Update</button>
						</div>
						<div class="col-lg-2 col-md-3">
							<a asp-action="Edit" asp-route-id="@Model.TableId" asp-route-tab="two" class="btn btn-block btn-link"> Back To Entity</a>
						</div>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

@section Scripts
{
	@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
