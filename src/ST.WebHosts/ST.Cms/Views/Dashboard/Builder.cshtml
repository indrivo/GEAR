@using ST.Dashboard.Abstractions
@{
	ViewData["Title"] = "Dashboard builder";
}

@inject IDashboardDbContext Context

@section Scripts{
	<script>
		$(function () {
			const helper = new ST();
			const toast = new ToastNotifier();
			const dashboardId = helper.getParamFormUrl("dashboardId");
			if (!dashboardId) {
				location.href = "/dashboard";
			}
			const manager = new DashboardManager();
			manager.set("dashboardId", dashboardId);
			manager.init();
			$("#saveConfiguration").on("click",
				function () {
					manager.saveAsync().then(response => {
						toast.notify({
							text: "Saved",
							icon: "success"
						});
					}).catch(e => {
						toast.notify({
							text: "Error"
						});
					});
				});
		});

		class BaseClass {
			get(parameterName = "") {
				return this[parameterName];
			}

			set(parameterName = "", value = "") {
				this[parameterName] = value;
			}
		}

		class DashboardManager extends BaseClass {
			/**
			 * Constructor
			 */
			constructor() {
				super();
				//Inject helper
				this.helper = new ST();

				$(".droppable-row").sortable({ axis: "y" });
				$(".droppable-row").on("sortchange",
					function (event, ui) {
						console.log(ui);
					});
			}

			/**
			 * Init service
			 */
			init() {
				const scope = this;
				scope.setConfiguration();
				scope.loadServerConfiguration();
				$(".draggable-row, .draggable-widget").draggable({
					revert: "invalid",
					helper: "clone",
					cursor: "move"
				});

				//drag rows
				$(".droppable-row").droppable({
					accept: ".draggable-row",
					drop: function (event, ui) {
						scope.addRow();
					}
				});

				this.initDraggableWidgets();
			}

			setConfiguration() {
				const scope = this;
				this.set("widgetMenuConf", [
					{
						label: "Configuration",
						events: ["click"],
						eventHandlers: {
							click: function () {
								$("#widget-configuration-modal").modal("show");
								$(this).closest(".options-menu").remove();
							}
						}
					},
					{
						label: "Save",
						events: ["click"],
						eventHandlers: {
							click: function () {
								$(this).closest(".options-menu").remove();
							}
						}
					},
					{
						label: "Remove",
						events: ["click"],
						eventHandlers: {
							click: function () {
								console.log($(this));
								$(this).closest(".options-menu").remove();
							}
						}
					}
				]);

				this.set("rowMenuConf", [
					{
						label: "Remove",
						events: ["click"],
						eventHandlers: {
							click: function () {
								const menu = $(this).closest(".options-menu");
								const rowId = menu.attr("data-row-id");
								scope.removeRow(rowId);
								$(this).closest(".options-menu").remove();
							}
						}
					}
				]);
			}

			removeRow(rowId = "") {
				if (rowId) {
					const row = $(".droppable-row").find(`div[data-id='${rowId}']`);
					row.remove();
				} else {

				}
			}

			addRow(id = "") {
				const scope = this;
				const row = $(`<div data-id="${id}" class="row droppable-widget draggable-row-injected"></div>`);
				$(".droppable-row").append(row);
				row.contextmenu(function (event) {
					if ($(event.target).hasClass("draggable-widget-injected")) return;
					event.preventDefault();
					const rowId = $(this).attr("data-id");
					$(".options-menu").remove();
					const x = event.pageX;
					const y = event.pageY;
					const el = $(scope.getMenuConfiguration("rowMenuConf"));
					el.css("position", "absolute");
					el.css("left", `${x}px`);
					el.css("top", `${y}px`);
					el.menu();
					el.attr("data-row-id", rowId);
					$("body").append(el);

					$("*:not(.options-menu)").on("click",
						function () {
							$(".options-menu").remove();
							$(this).off("click");
						});
				});
				this.initDraggableWidgets();
			}

			loadServerConfiguration() {
				const scope = this;
				$.ajax({
					url: "/api/Dashboard/GetDashboardRows",
					data: {
						dashboardId: scope.get("dashboardId")
					},
					success: (data) => {
						if (data.is_success) {
							$.each(data.result, (i, item) => {
								scope.addRow(item.rowId);
							});
						}
					},
					error: (e) => {

					}
				});
			}

			//init draggable events for widgets
			initDraggableWidgets() {
				const scope = this;
				//drag widgets
				$(".droppable-widget").droppable({
					accept: ".draggable-widget",
					drop: function (event, ui) {
						const source = $(ui.draggable);
						const widgetIdentifier = scope.helper.newGuid();
						const widget = $(`<div class="col-md draggable-widget-injected
																																						idf_${widgetIdentifier}" data-idf="${
							widgetIdentifier}">${
							source
								.text()
							}</div>`);
						$(this).append(widget);
						scope.registerDroppableWidgets();
					}
				});
			}

			registerDroppableWidgets() {
				const scope = this;
				const ctx = $(".draggable-widget-injected");
				ctx.draggable({
					revert: "invalid",
					helper: "clone",
					cursor: "move"
				});

				ctx.contextmenu(function (event) {
					event.preventDefault();
					$(".options-menu").remove();
					const x = event.pageX;
					const y = event.pageY;
					const el = scope.getMenuConfiguration("widgetMenuConf");
					$(el).css("position", "absolute");
					$(el).css("left", `${x}px`);
					$(el).css("top", `${y}px`);
					$(el).menu();
					$("body").append(el);

					$("*:not(.options-menu)").on("click",
						function () {
							$(".options-menu").remove();
							$(this).off("click");
						});
				});
			}

			getMenuConfiguration(id = "") {
				const scope = this;
				const menuBlock = document.createElement("ul");
				menuBlock.setAttribute("class", "options-menu card");
				const configurations = scope.get(id);
				for (let i = 0; i < configurations.length; i++) {
					const item = document.createElement("li");
					item.innerHTML = configurations[i].label;
					for (let j = 0; j < configurations[i].events.length; j++) {
						const evt = configurations[i].events[j];
						item.addEventListener(evt, configurations[i].eventHandlers[evt]);
					}
					menuBlock.appendChild(item);
				}

				return menuBlock;
			}

			saveAsync() {
				const conf = {
					dashboardId: this.get("dashboardId"),
					rows: []
				};
				const domRows = $(".droppable-row").find(".draggable-row-injected");
				$.each(domRows,
					(index, item) => {
						const jItem = $(item);
						conf.rows.push({
							order: index,
							rowId: jItem.attr("data-id"),
							widgets: []
						});
					});

				return new Promise((resolve, reject) => {
					$.ajax({
						url: "/api/Dashboard/SaveDashboardConfiguration",
						data: conf,
						method: "post",
						success: (data) => {
							if (data.is_success) {
								$.each(data.result, (i, item) => {
									$(domRows[item.order]).attr("data-id", item.rowId);
								});
								resolve(data.result);
							} else {
								reject(data.error_keys);
							}
						},
						error: (err) => {
							reject(err);
						}
					});
				});
			}
		}
	</script>
}

<div class="row">
	<div class="col-12">
		<a id="saveConfiguration" href="#" class="btn btn-success float-right m-3">@Localizer["save"]</a>
	</div>
</div>

<div class="card">
	<div class="card-body">
		<div class="row">
			<div class="col-md-9">
				<div class="card">
					<div class="card-body">
						<h5 class="card-title">Canvas</h5>
						<div class="left-canvas droppable-row" id="canvas">

						</div>
					</div>
				</div>
			</div>
			<div class="col-md-3">
				<div class="card">
					<div class="card-body">
						<h5 class="card-title">Common</h5>
						<ul class="list-group">
							<li class="list-group-item draggable-row" data-type="row">Row</li>
						</ul>
						@foreach (var group in Context.WidgetGroups.OrderBy(x => x.Order).ToList())
						{
							<h5 class="card-title mt-2">@group.Name</h5>
							<ul class="list-group">
								@for (var i = 1; i < 3; i++)
								{
									<li class="list-group-item draggable-widget">Widget @i  {@group.Name}</li>
								}
							</ul>
						}

					</div>
				</div>
			</div>
		</div>
	</div>
</div>



<div class="modal leftright-slide right-align fade" id="widget-configuration-modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header px-4">
				<h5 class="modal-title">Widget configuration</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span class="material-icons">close</span>
				</button>
			</div>
			<div class="modal-body p-4">

			</div>
			<div class="modal-footer px-4">
				<button type="button" class="btn btn-secondary" data-dismiss="modal" translate="close">Close</button>
				<button type="button" class="btn btn-primary" translate="save">Save</button>
			</div>
		</div>
	</div>
</div>



@section Styles{
	<style>
		.left-canvas {
			min-height: 30em;
		}

		.draggable-row-injected {
			min-height: 8em;
			border-style: dashed;
			margin: 0.2em;
			border-color: #2a4b65;
			margin-bottom: 1em;
			padding: 0.5em;
		}

			.draggable-row-injected:hover {
				border-color: orange;
				border-style: solid;
			}

			.draggable-row-injected:active {
				cursor: move;
			}

		.draggable-widget-injected {
			min-height: 7em;
			border-style: dashed;
			margin: 0.2em;
			border-color: #2a4b65;
		}

			.draggable-widget-injected:hover {
				border-color: orange;
				border-style: solid;
			}

		.options-menu {
			padding: 0.5em;
		}

			.options-menu li {
				list-style-type: none;
			}

				.options-menu li:hover {
					cursor: pointer;
				}
	</style>
}