@{
	ViewData["Title"] = "CreateDynamic";
}

@section PreScripts
{
	<script src="~/lib/Chart.js/Chart.bundle.min.js"></script>
	<script src="~/lib/Chart.js/Chart.min.js"></script>
}

@section Styles
{
	<link href="~/lib/Chart.js/Chart.min.css" />
	<style>
		#queryResultTable table {
			width: 100%;
			border: 1px solid #C0C0C0;
			border-collapse: unset !important;
			border-radius: 3px;
		}

			#queryResultTable table td, #queryResultTable th {
				border-left: 1px solid #C0C0C0;
				padding: 8px;
			}

				#queryResultTable table td:first-child, #queryResultTable th:first-child {
					border-left: 0;
				}

			#queryResultTable table tr:nth-child(even) {
				background-color: wheat;
			}

			#queryResultTable table tr:hover {
				background-color: #ddd;
			}

			#queryResultTable table th {
				padding-top: 12px;
				padding-bottom: 12px;
				text-align: center;
				background-color: #778899;
				color: white;
			}


		table.pivot th {
			padding: 0px !important;
		}

			table.pivot th:last-child {
				outline: 0;
			}

			table.pivot th span {
				padding: 10px;
			}

		table.pivot .sup {
			display: block;
			position: relative;
			width: 50%;
			float: left;
			padding-bottom: 3%;
			padding-top: 1%;
			height: 100%;
			text-align: center;
			z-index: 1;
		}

		table.pivot .inf {
			display: block;
			position: relative;
			width: 50%;
			float: left;
			padding-top: 3%;
			padding-bottom: 1%;
			height: 100%;
			text-align: center;
			z-index: 1;
		}

		table.pivot .sup::after {
			content: "";
			position: absolute;
			z-index: 0;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background-color: rgba(255,255,255,.3);
			background-size: cover;
			clip-path: polygon(0% 50%, 0% 100%, 100% 100%);
		}

		table.pivot .inf::after {
			content: "";
			position: absolute;
			z-index: 0;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background-color: rgba(255,255,255,.3);
			background-size: cover;
			clip-path: polygon(0% 0%, 200% 100%, 0% 100%);
		}

		.select2-results__options ul li {
			padding-top: 2px !important;
			padding-bottom: 2px !important;
		}

		.select2-container--default .select2-results__group {
			font-weight: bold;
		}

		.select2-selection--single .select2-selection__rendered {
			line-height: 34px !important;
		}

		.select2-container .select2-selection--single {
			height: 37px !important;
		}

		.select2-selection__arrow {
			height: 36px !important;
		}

		.fieldSelectBox .select2-selection__choice {
			width: 100%;
			line-height: 36px;
		}

			.fieldSelectBox .select2-selection__choice .select2-selection__choice__remove {
				float: left;
			}

			.fieldSelectBox .select2-selection__choice .displayField {
				line-height: 18px;
				margin: 2px;
			}

		.card-block {
			min-height: 0px;
			border-top: 1px solid rgba(0, 0, 0, 0.125);
		}

		.card-header {
			border-bottom: 0;
		}
	</style>
}

<h2>Create Dynamic Report:</h2>

<div class="card mb-3">
	<div class="card-header">
		Data options
	</div>
	<div class="card-block pl-3 pt-2">
		<div class="row">
			<div class="col-2">
				<div class="form-group">
					<label for="tableSelect">Select table:</label>
					<select class="form-control tableSelect" id="tableSelect"></select>
				</div>
			</div>
			<!--#region Relationships-->
			<div class="col-md-1">
				<div class="form-group">
					<label>Relationships : </label>
					<br />
					<button class="btn btn-info text-white" id="AddRelationship"
							role="button">
						Add Relationship
					</button>
				</div>
			</div>
			<div class="col-6" id="pnlRelationships"></div>
			<!--#endregion Relationships-->
		</div>
	</div>
</div>


<div class="card mb-3">
	<div class="card-header">
		Display options
		<button class="btn btn-info text-white ml-2" id="AddField" role="button">Add Field</button>
	</div>
	<div class="card-block pl-3 pt-2" style="display:none" id="cbFields">
		<div class="row">
			<div class="col-6" id="pnlFields"></div>
		</div>
	</div>
</div>

<div class="card mb-3">
	<div class="card-header">
		Filters and agregates options
		<button class="btn btn-info text-white ml-2" id="AddFilter" role="button">Add Filter</button>
	</div>
	<div class="card-block pl-3 pt-2" style="display:none" id="cbFilters">
		<div class="row">
			<div class="col-6" id="pnlFilters"></div>
		</div>
	</div>
</div>

<div class="card mb-3">
	<div class="card-header">
		<div class="row">
			<div class="mt-1 ml-1">
				Charts
			</div>
			<div class="col-md-2">
				<div class="form-group">
					<select class="form-control chartSelector" id="chartSelector">
					</select>
				</div>
			</div>
			<div class="col-md-1">
				<button class="btn btn-info text-white ml-2" id="AddChart" role="button">Add Chart</button>
			</div>
		</div>
	</div>
	<div class="card-block pl-3 pt-2" style="display:none" id="cbCharts">
		<div class="row">
			<div class="col-10" id="pnlCharts">
			</div>
		</div>
	</div>
</div>
<div class="modal fade" id="saveReportModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLabel">Add Report</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<div class="row">
					<div class="col-md-12">
						<form>
							<div class="form-group">
								<div class="row">
									<label class="col-md-4"><span class="pull-right">Name</span></label>
									<div class="col-md-1"></div>
									<input class="form-control col-md-6" id="reportName" />
								</div>
								<div class="row mt-2">
									<label class="col-md-4"><span class="pull-right">Folder name</span></label>
									<div class="col-md-1"></div>
									<select id="folderSelector" asp-items="@(new SelectList(ViewBag.Folders, "Id", "Name", null))" class="form-control col-md-6 custom-select"></select>
								</div>
							</div>
							<div class="modal-footer">
								<a class="btn btn-success text-white" id="saveReport">Add</a>
								<button type="button" class="btn btn-inverse " data-dismiss="modal">Close</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<div class="row ml-1">
	<div class="mt-3 mb-3 mr-2" id="queryResultTable">
		<button class="btn btn-danger m-t-20" id="openReportModal">Save</button>
	</div>
	<div class="mt-3 mb-3" id="queryResultTable">
		<button class="btn btn-info m-t-20" id="runReport">Run</button>
	</div>
</div>
<div class="mt-3 mb-3 row col-10" id="queryResultTable">
</div>

<div id="chart-box">

</div>

@section Scripts
{
	<script>
        //script for generation of report
        $('#openReportModal').click(function () {
            $('#saveReportModal').modal('show');
            $('#saveReport').click(function (e) {

                GenerateData('@Url.Action("CreateDynamic", "DynamicReports")');
                $('#saveReportModal').modal('hide');
                e.stopImmediatePropagation();
            });

        });
        $('#runReport').click(function () {
            GenerateData('@Url.Action("GetDynamicReportData", "DynamicReports")');
        });

	</script>
	<script>
		$(document).ready(function () {
			var relationId = 0;
			var fieldId = 0;
			var filterId = 0;
			var chartId = 0;
			var items = [];
			var allFields = [];

			function updateReportList(action, data, selectOptions) {
				$("#" + selectOptions).html("");
				var callback = function (data) {
					var s;
					for (let i = 0; i < data.length; i++) {
						s += `<option value="${data[i]}">${data[i]}</option>`;
					}
					$("#" + selectOptions).html(s);
				};
				GetDataList(action, data, callback);
			}

			function updateReportListKeyValue(action, data, selectOptions) {
				$("#" + selectOptions).html("");
				var callback = function (data) {
					var s;
					for (let i = 0; i < data.length; i++) {
						s += `<option value="${data[i].id}">${data[i].text}</option>`;
					}
					$("#" + selectOptions).html(s);
				};
				GetDataList(action, data, callback);
			}

			function GetDataList(action, data, callback) {
				var requestAction = action;
				$.ajax({
					type: "POST",
					url: requestAction,
					dataType: 'json',
					data: data,
					success: function (data) {
						callback(data);
					}
				});
			}

			//#endregion Common

			//#region Data

			updateReportList("@Url.Action("GetTablesAjax", "DynamicReports")", null, "tableSelect");

			$('#tableSelect').select2({
					placeholder: " - Select tables - ",
					multiple: true
				})
				.change(function () {
					items = $(this).val();
					SetRelValues();

					allFields = [];
					var tableRequests = [];

					$.each(items, function (i, option) {
						tableRequests.push(prepareFields(allFields, option));
					});

					$.when.apply($, tableRequests).done(function () { SetFieldValues(allFields);SetFilterValues(allFields);});
			}).on('select2:unselecting', function() {
				$(this).data('unselecting', true);
			}).on('select2:opening', function (e) {
				if ($(this).data('unselecting')) {
					$(this).removeData('unselecting');
					e.preventDefault();
				}
			});


			updateReportListKeyValue("@Url.Action("GetChartTypes", "DynamicReports")", null, "chartSelector");

			$('#chartSelector').select2({
				placeholder: " - Select chart - ",
				multiple: false
			});



			function prepareFields($n, option) {
				var dfd = $.Deferred();
				var callback = function (data) {
					var children = new Array();
					$.each(data, function (i, field) {
						children.push({ id: '"' + option + '"."' + field + '"', text: field });
					});
					$n.push( {
						id: option,
						text: option,
						children: children
					});
					dfd.resolve();
					return 1;
				};
				var param = { tableName: option };
				GetDataList("@Url.Action("GetTableColumnsAjax", "DynamicReports")", param, callback);
				return dfd.promise();
			}

			//#endregion Data

			//#region Relationships

			$("#pnlRelationships").on("click", ".removeRelationship", function () {
				var parent = $(this).parent().parent();
				Swal.fire({
					title: 'Are you sure?',
					text: "You won't be able to revert this!",
					type: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#3085d6',
					cancelButtonColor: '#d33',
					confirmButtonText: 'Yes, delete it!'
				}).then((result) => {
					if (result.value) {
						Swal.fire(
							'Deleted!',
							'Your file has been deleted.',
							'success'
						);
						$(parent).remove();
					}
				});
			});

			function SetRelValues() {
				$('#pnlRelationships > .row').each(function () {

					var primaryKeyTableSelect = $(this).find(".primaryKeyTableSelect");
					var foreignKeyTableSelect = $(this).find(".foreignKeyTableSelect");

					var prevValuePKT = primaryKeyTableSelect.val();

					primaryKeyTableSelect.val(null).empty();

					$.each(items, function (i, option) {
						var newOption = new Option(option, option, false, false);
						primaryKeyTableSelect.append(newOption).trigger('change');
						if (prevValuePKT == option) {
							primaryKeyTableSelect.val(option);
						}
					});

					var prevValueFKT = foreignKeyTableSelect.val();

					foreignKeyTableSelect.val(null).empty();

					$.each(items, function (i, option) {
						var newOption = new Option(option, option, false, false);
						foreignKeyTableSelect.append(newOption).trigger('change');
						if (prevValueFKT == option) {
							foreignKeyTableSelect.val(option);
						}
					});

				});
			}

			$("#AddRelationship").click(function () {
				relationId++;
				var currentHtml = `
				<div class="row">
					<div class="col-3">
						<div class="form-group">
							<label for="primaryKeyTableSelect`+relationId+`">Primary key table:</label>
							<select class="form-control primaryKeyTableSelect" id="primaryKeyTableSelect`+relationId+`"><option></option></select>
						</div>
					</div>
					<div class="col-3">
						<div class="form-group">
							<label for="foreignKeyTableSelect`+relationId+`">Foreign key table:</label>
							<select class="form-control foreignKeyTableSelect" id="foreignKeyTableSelect`+relationId+`"><option></option></select>
						</div>
					</div>
					<div class="col-3">
						<div class="form-group">
							<label for="foreignKeySelect`+relationId+`">Foreign key:</label>
							<select class="form-control foreignKeySelect" id="foreignKeySelect`+relationId+`"><option></option></select>
						</div>
					</div>
					<div class="col-2">
						<label>&nbsp;</label>
						<button class="btn btn-danger removeRelationship">Remove Relationship</button>
					</div>
				</div>`;
				$("#pnlRelationships").append(currentHtml);
				$('#primaryKeyTableSelect'+relationId).select2({
					placeholder: " - Select table - ",
					multiple: false
				});
				$('#foreignKeyTableSelect'+relationId).select2({
					placeholder: " - Select table - ",
					multiple: false
				}).change(function () {
					var data = { tableName : $(this).val() };
					updateReportList("@Url.Action("GetTableColumnsAjax", "DynamicReports")", data, "foreignKeySelect"+relationId);
				});
				$('#foreignKeySelect'+relationId).select2({
					placeholder: " - Select key - ",
					multiple: false
				});

				SetRelValues();
			});


			//#region Fields

			$("#pnlFields").on("click", ".removeField", function () {
				var parent = $(this).parent().parent().parent();
				Swal.fire({
					title: 'Are you sure?',
					text: "You won't be able to revert this!",
					type: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#3085d6',
					cancelButtonColor: '#d33',
					confirmButtonText: 'Yes, delete it!'
				}).then((result) => {
					if (result.value) {
						Swal.fire(
							'Deleted!',
							'Your file has been deleted.',
							'success'
						);
						$(parent).remove();
						if ($('#pnlFields > div').length == 0) {
							$('#cbFields').hide();
						}
						var fields = [];
						$.each($('#pnlFields > .row'), function (i, option) {
							var fieldsSelect = $(option).find(".fieldSelector");
							var fieldData = fieldsSelect.select2('data')[0];
							if (fieldData) {
								fields.push({ id: fieldData.id, text: fieldData.element.parentElement.value + ' (' + fieldData.text + ')', index:i });
							}
						});
						SetChartValues(fields);
					}
				});
			});

			function SetFieldValues(data) {
				if (data.length > 0) {
					$('#pnlFields > .row').each(function () {

						var fieldsSelect = $(this).find(".fieldSelector");
						var prevValueFields = [];
						prevValueFields.push(fieldsSelect.val());
						var currentDataFields = [];
						$.each(data, function (i, option) {
							if (option.children != null && option.children.length > 0) {
								$.map(option.children, function (val, i) {
									currentDataFields.push(val.id);
								});
							}
						});

						var intersection = $(prevValueFields).filter(currentDataFields);

						fieldsSelect.val(null).empty();
						fieldsSelect.select2({
							placeholder: " - Select fields - ",
							multiple: false,
							templateSelection: function (item) {
								var $option = $(item.element);
								var $optGroup = $option.parent();
								if ($optGroup.attr('label')) {
									return $optGroup.attr('label') + ' (' + item.text + ')';
								}
								else {
									return " - Select fields - ";
								}
							},
							data: data
						});

						fieldsSelect.val(intersection).trigger('change');
					});
				}
			}


			$("#AddField").click(function () {
				fieldId++;
				$('#cbFields').show();
				var currentHtml = `
				<div class="row">
					<div class="col-12 row m-t-20">
						<div class="col-md-4">
							<div class="form-group">
								<label>Field:</label>
								<select class="form-control fieldSelector" id="fieldSelector`+fieldId+`">
								</select>
							</div>
						</div>
						<div class="col-4">
							<div class="form-group">
								<label>Aggregates/Groups:</label>
								<select class="form-control fieldOperationSelector" id="fieldOperationSelector`+fieldId+`">
								</select>
							</div>
						</div>
						<div class="col-md-3">
							<div class="form-group">
								<label>Caption:</label>
								<input class="form-control filterValueSelector" type="text" id="fieldCaptionSelector`+fieldId+`">
							</div>
						</div>
						<div class="col-1">
							<label>&nbsp;</label>
							<button class="btn btn-danger removeField">Remove Field</button>
						</div>
					</div>
				</div>`;
				$("#pnlFields").append(currentHtml);

				$('#fieldSelector'+fieldId).select2({
					placeholder: " - Select field - ",
					multiple: false
				}).change(function () {
					var fields = [];
						$.each($('#pnlFields > .row'), function (i, option) {
							var fieldsSelect = $(option).find(".fieldSelector");
							var fieldData = fieldsSelect.select2('data')[0];
							if (fieldData) {
								fields.push({ id: fieldData.id, text: fieldData.element.parentElement.value + ' (' + fieldData.text + ')', index:i });
							}
						});
					SetChartValues(fields);
				});
				$('#fieldOperationSelector'+fieldId).select2({
					placeholder: " - Select operation - ",
					multiple: false
				});
				updateReportListKeyValue("@Url.Action("GetAggregateTypes", "DynamicReports")", null, 'fieldOperationSelector' + fieldId);

				SetFieldValues(allFields);
			});

			//#endregion Fields

			//#region Filters

			$("#pnlFilters").on("click", ".removeFilter", function () {
				var parent = $(this).parent().parent().parent();
				Swal.fire({
					title: 'Are you sure?',
					text: "You won't be able to revert this!",
					type: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#3085d6',
					cancelButtonColor: '#d33',
					confirmButtonText: 'Yes, delete it!'
				}).then((result) => {
					if (result.value) {
						Swal.fire(
							'Deleted!',
							'Your file has been deleted.',
							'success'
						);
						$(parent).remove();
						if ($('#pnlFilters > div').length == 0) {
							$('#cbFilters').hide();
						}
					}
				});
			});

			function SetFilterValues(data) {
				if (data.length > 0) {
					$('#pnlFilters > .row').each(function () {

						var filterFieldSelector = $(this).find(".filterFieldSelector");
						var prevValueFields = [];
						prevValueFields.push(filterFieldSelector.val());
						var currentDataFields = [];
						$.each(data, function (i, option) {
							if (option.children != null && option.children.length > 0) {
								$.map(option.children, function (val, i) {
									currentDataFields.push(val.id);
								});
							}
						});

						var intersection = $(prevValueFields).filter(currentDataFields);

						filterFieldSelector.val(null).empty();
						filterFieldSelector.select2({
							placeholder: " - Select field - ",
							multiple: false,
							templateSelection: function (item) {
								var $option = $(item.element);
								var $optGroup = $option.parent();
								if ($optGroup.attr('label')) {
									return $optGroup.attr('label') + ' (' + item.text + ')';
								}
								else {
									return " - Select field - ";
								}
							},
							data: data
						});

						filterFieldSelector.val(intersection).trigger('change');
					});
				}
			}


			$("#AddFilter").click(function () {
				filterId++;
				$('#cbFilters').show();
				var currentHtml = `
				<div class="row">
					<div class="col-12 row m-t-20 changedRow">
						<div class="col-md-4">
							<div class="form-group">
								<label>Field:</label>
								<select class="form-control filterFieldSelector" id="filterFieldSelector`+filterId+`">
								</select>
							</div>
						</div>
						<div class="col-4">
							<div class="form-group">
								<label>Operation:</label>
								<select class="form-control filterOperationSelector" id="filterOperationSelector`+filterId+`">
								</select>
							</div>
						</div>
						<div class="col-md-3">
							<div class="form-group">
								<label>Value:</label>
								<input class="form-control filterValueSelector" type="text" id="filterValueSelector`+filterId+`">
							</div>
						</div>
						<div class="col-1">
							<label>&nbsp;</label>
							<button class="btn btn-danger removeFilter">Remove Filter</button>
						</div>
					</div>
				</div>`;
				$("#pnlFilters").append(currentHtml);
				$('#filterFieldSelector'+filterId).select2({
					placeholder: " - Select field - ",
					multiple: false
				});
				$('#filterOperationSelector'+filterId).select2({
					placeholder: " - Select operation - ",
					multiple: false
				});

				updateReportListKeyValue("@Url.Action("GetFilterTypes", "DynamicReports")", null, 'filterOperationSelector'+filterId)

				SetFilterValues(allFields);
			});

			//#endregion Filters


			//#region Charts

			$("#pnlCharts").on("click", ".removeChart", function () {
				var parent = $(this).parent().parent().parent();
				Swal.fire({
					title: 'Are you sure?',
					text: "You won't be able to revert this!",
					type: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#3085d6',
					cancelButtonColor: '#d33',
					confirmButtonText: 'Yes, delete it!'
				}).then((result) => {
					if (result.value) {
						Swal.fire(
							'Deleted!',
							'Your file has been deleted.',
							'success'
						);
						$(parent).remove();
						if ($('#pnlCharts > div').length == 0) {
							$('#cbCharts').hide();
						}
					}
				});
			});

			$("#AddChart").click(function () {
				chartId++;
				$('#cbCharts').show();
				var callback = function (data) {
					var chartType = $('#chartSelector').select2('data')
					var currentHtml = `
						<div class="row">
							<div class="col-12 row m-t-20 changedRow">
								<input name="chartType" type="hidden" value="` + chartType[0].id + `" />
								<div class="col-md-1">
									<div class="form-group">
										<label>Chart type:</label>
										<div class="font-weight-bold">
											` + chartType[0].text + `
										</div>
									</div>
								</div>
								<div class="col-md-2">
									<div class="form-group">
										<label>Chart title:</label>
										<input class="form-control chartTitle" name="chartTitle" type="text" id="chartTitle`+chartId+`">
									</div>
								</div>

					`;
					$.each(data, function (i, item) {
						currentHtml += `
						<div class="col-md-2">
							<div class="form-group">
								<label>`+ item.text + `:</label>
								<select class="form-control chartFieldSelector" id="chartField_`+ item.id + "_" + chartId + `">
								</select>
								<input name="fieldType" type="hidden" value="`+ item.id + `" />
							</div>
						</div>`;
					});
					currentHtml += `<div class="col-1">
										<label>&nbsp;</label>
										<button class="btn btn-danger removeChart">Remove Chart</button>
									</div>
								</div>
							</div>`;
					$("#pnlCharts").append(currentHtml);


					$('#pnlCharts > .row').each(function () {
						var chartFieldCollection = $(this).find(".chartFieldSelector");
						chartFieldCollection.each(function () {
							chartField = $(this);
							chartField.select2({
								placeholder: " - Select field - ",
								multiple: false
							});
						});
					});


					var fields = [];
						$.each($('#pnlFields > .row'), function (i, option) {
							var fieldsSelect = $(option).find(".fieldSelector");
							var fieldData = fieldsSelect.select2('data')[0];
							if (fieldData) {
								fields.push({ id: fieldData.id, text: fieldData.element.parentElement.value + ' (' + fieldData.text + ')', index:i });
							}
						});
					SetChartValues(fields);
				};
				GetDataList("@Url.Action("GetChartFieldTypes", "DynamicReports")", { chartType: $("#chartSelector").val() }, callback);
			});

			function SetChartValues(data) {
				if (data.length > 0) {
					var currentDataFields = [];
					$.map(data, function (val, i) {
						currentDataFields.push(val.id);
					});
					$('#pnlCharts > .row').each(function () {

						var chartFieldCollection = $(this).find(".chartFieldSelector");
						var fieldType = chartFieldCollection.parent().find("input[name=fieldType]");

						var isMultiselect = false;

						if (fieldType.val() == 0) {
							isMultiselect = true;
						}

						chartFieldCollection.each(function () {
							chartFieldSelector = $(this);
							var prevValueFields = [];
							if (chartFieldSelector.val()) {
								if ($.isArray(chartFieldSelector.val())) {
									prevValueFields = chartFieldSelector.val();
								}
								else {
									prevValueFields.push(chartFieldSelector.val());
								}
							}
							var intersection = $(prevValueFields).filter(currentDataFields);
							chartFieldSelector.val(null).empty();
							chartFieldSelector.select2({
								placeholder: " - Select field - ",
								multiple: isMultiselect,
								data: data
							});

							chartFieldSelector.val(intersection).trigger('change');
						});
					});
				}
			}

			//#endregion Charts

        });
	</script>

	<script>
		$('#runReport').click(function () {
            GenerateData('@Url.Action("GetReportData", "DynamicReports")');
		});


		function GetReportData() {

			var tables = $('#tableSelect').val();
			var relations = [];
			var fieldsList = [];
			var filtersList = [];


			$('#pnlRelationships > .row').each(function () {

				var primaryKeyTableSelect = $(this).find(".primaryKeyTableSelect");
				var foreignKeyTableSelect = $(this).find(".foreignKeyTableSelect");
				var foreignKeySelect = $(this).find(".foreignKeySelect");

				relations.push({
					"primaryKeyTable": primaryKeyTableSelect.val(),
					"foreignKeyTable": foreignKeyTableSelect.val(),
					"foreignKey": foreignKeySelect.val()
				});
			});

			$('#pnlFields > .row').each(function () {

				var fieldsSelect = $(this).find(".fieldSelector");
				var fieldOperationSelector = $(this).find(".fieldOperationSelector");
				var filterValueSelector = $(this).find(".filterValueSelector");

				fieldsList.push({
					"fieldName": fieldsSelect.val(),
					"fieldAlias": filterValueSelector.val(),
					"aggregateType": fieldOperationSelector.val()
				});

			});

			$('#pnlFilters > .row').each(function () {
				var filterFieldSelector = $(this).find(".filterFieldSelector");
				var filterOperationSelector = $(this).find(".filterOperationSelector");
				var filterValueSelector = $(this).find(".filterValueSelector");

				filtersList.push({
					"fieldName": filterFieldSelector.val(),
					"filterType": filterOperationSelector.val(),
					"value": filterValueSelector.val()
				});
			});

			var charts = [];

			$('#pnlCharts > .row').each(function () {

				var chartType = $(this).find("input[name=chartType]");
				var chartTitle = $(this).find("input[name=chartTitle]");
				var chartFields = [];

				var chartFieldCollection = $(this).find(".chartFieldSelector");

				chartFieldCollection.each(function () {
					chartField = $(this);
					var chartFieldData = chartField.select2('data');
					var fieldType = $(this).parent().find("input[name=fieldType]");
					$.each(chartFieldData, function (i, chartFieldOption) {
						chartFields.push({
							fieldIndex: chartFieldOption.index,
							fieldName: chartFieldOption.id,
							chartFieldType: fieldType.val()
						});
					});
				});

				charts.push({
					chartTitle: chartTitle.val(),
					chartType: chartType.val(),
					dynamicReportChartFields: chartFields
				});
			});

			return {
				"id": "00000000-0000-0000-0000-000000000000",
				"name": 'Test',
				"tables": tables,
				"relations": relations,
				"fieldsList": fieldsList,
				"filtersList": filtersList,
				"dynamicReportCharts": charts
			}
		}


		function GenerateData(graphUrl) {

			var data = GetReportData();

			//Send data and receive model
			$.ajax({
				url: graphUrl,
				content: "application/json; charset=utf-8",
				type: 'POST',
				data: data,
				success: function (result) {
					result = {
						"charts": [
							{
								"chartType": 3,
								"dynamicReportChartFields": [
									{
										"fieldIndex": 1,
										"fieldName": "\"MenuItem\".\"MenuId\"",
										"chartFieldType": 1
									},
									{
										"fieldIndex": 0,
										"fieldName": "\"MenuItem\".\"Id\"",
										"chartFieldType": 2
									}
								]
							},
							{
								"chartType": 5,
								"dynamicReportChartFields": [
									{
										"fieldIndex": 1,
										"fieldName": "\"MenuItem\".\"MenuId\"",
										"chartFieldType": 1
									},
									{
										"fieldIndex": 0,
										"fieldName": "\"MenuItem\".\"Id\"",
										"chartFieldType": 2
									}
								]
							}
						],
						"data": [
							{
								"MenuItem.Id": 85,
								"MenuItem.MenuId": "46eacba3-d515-47b0-9ba7-5391ce1d26b1"
							},
							{
								"MenuItem.Id": 5,
								"MenuItem.MenuId": "b02f6702-1bfe-4fdb-8f7a-a86447620b7e"
							}
						]
					};
					//result.charts = [{
					//	"chartType": 2,
					//	"dynamicReportChartFields": [
					//		{
					//			"fieldIndex": 0,
					//			"fieldName": "\"Menu\".\"Name\"",
					//			"chartFieldType": 1
					//		},
					//		{
					//			"fieldIndex": 1,
					//			"fieldName": "\"MenuItem\".\"Order\"",
					//			"chartFieldType": 2
					//		},
					//		{
					//			"fieldIndex": 2,
					//			"fieldName": "\"MenuItem\".\"Id\"",
					//			"chartFieldType": 3
					//		}
					//	]
					//}];

				 //   result.data = [
					//	{
					//		"Menu.Name": "Commerce Landing page",
					//		"MenuItem.Order": "1",
					//		"MenuItem.Id": 1
					//	},
					//	{
					//		"Menu.Name": "Left navbar",
					//		"MenuItem.Order": "2",
					//		"MenuItem.Id": 6
					//	},
					//	{
					//		"Menu.Name": "Left navbar",
					//		"MenuItem.Order": "9",
					//		"MenuItem.Id": 1
					//	},
					//	{
					//		"Menu.Name": "Left navbar",
					//		"MenuItem.Order": "15",
					//		"MenuItem.Id": 1
					//	},
					//	{
					//		"Menu.Name": "Left navbar",
					//		"MenuItem.Order": "14",
					//		"MenuItem.Id": 1
					//	},
					//	{
					//		"Menu.Name": "Commerce Landing page",
					//		"MenuItem.Order": "4",
					//		"MenuItem.Id": 1
					//	},
					//	{
					//		"Menu.Name": "Left navbar",
					//		"MenuItem.Order": "10",
					//		"MenuItem.Id": 1
					//	},
					//	{
					//		"Menu.Name": "Left navbar",
					//		"MenuItem.Order": "7",
					//		"MenuItem.Id": 3
					//	},
					//	{
					//		"Menu.Name": "Left navbar",
					//		"MenuItem.Order": "5",
					//		"MenuItem.Id": 4
					//	},
					//	{
					//		"Menu.Name": "Left navbar",
					//		"MenuItem.Order": "18",
					//		"MenuItem.Id": 1
					//	},
					//	{
					//		"Menu.Name": "Left navbar",
					//		"MenuItem.Order": "6",
					//		"MenuItem.Id": 3
					//	},
					//	{
					//		"Menu.Name": "Left navbar",
					//		"MenuItem.Order": "4",
					//		"MenuItem.Id": 4
					//	},
					//	{
					//		"Menu.Name": "Left navbar",
					//		"MenuItem.Order": "13",
					//		"MenuItem.Id": 1
					//	},
					//	{
					//		"Menu.Name": "Left navbar",
					//		"MenuItem.Order": "1",
					//		"MenuItem.Id": 50
					//	},
					//	{
					//		"Menu.Name": "Commerce Landing page",
					//		"MenuItem.Order": "3",
					//		"MenuItem.Id": 1
					//	},
					//	{
					//		"Menu.Name": "Commerce Landing page",
					//		"MenuItem.Order": "5",
					//		"MenuItem.Id": 1
					//	},
					//	{
					//		"Menu.Name": "Left navbar",
					//		"MenuItem.Order": "17",
					//		"MenuItem.Id": 1
					//	},
					//	{
					//		"Menu.Name": "Commerce Landing page",
					//		"MenuItem.Order": "2",
					//		"MenuItem.Id": 1
					//	},
					//	{
					//		"Menu.Name": "Left navbar",
					//		"MenuItem.Order": "3",
					//		"MenuItem.Id": 5
					//	},
					//	{
					//		"Menu.Name": "Left navbar",
					//		"MenuItem.Order": "8",
					//		"MenuItem.Id": 3
					//	}
					//];
					if (result.charts) {
						$("#queryResultTable").html('');
						$('#chart-box').html('');
						$.each(result.charts, function (i, chart) {
							if (chart.chartType == 1) {
								var table = $.makeTable(result.data);
								$(table).appendTo("#queryResultTable");
							}
							else if (chart.chartType == 2) {
								var tablePivot = $.makePivotTable(result.data, chart);
								$(tablePivot).appendTo("#queryResultTable");
							}
							else if (chart.chartType == 3) {
								console.log(result);
								generateChart('pie', result.data, chart);
							}
							else if (chart.chartType == 5) {
								console.log(result);
								generateChart('bar', result.data, chart);
							}
						});
					}

				},
				error: function (jqXHR, textStatus, errorThrown) {
					ShowError(jqXHR.status);
				}
			});
		}

		$.makeTable = function (mydata) {
			var table = $('<table class="mb-4" cellspacing="0" cellpadding="0">');
			var tblHeader = "<tr>";
			for (var k in mydata[0]) tblHeader += "<th>" + k + "</th>";
			tblHeader += "</tr>";
			$(tblHeader).appendTo(table);
			$.each(mydata, function (index, value) {
				var TableRow = "<tr>";
				$.each(value, function (key, val) {
					TableRow += "<td>" + val + "</td>";
				});
				TableRow += "</tr>";
				$(table).append(TableRow);
			});
			return ($(table));
		};

		$.makePivotTable = function (dataArray, chatData) {
			var table = $('<table class="pivot mb-4" cellspacing="0" cellpadding="0">');
			var labels = [];
			var xAxis = [];

			var label = $.grep(chatData.dynamicReportChartFields, function (a) {
				return a.chartFieldType == 1;
			});

			var x = $.grep(chatData.dynamicReportChartFields, function (a) {
				return a.chartFieldType == 2;
			});

			var y = $.grep(chatData.dynamicReportChartFields, function (a) {
				return a.chartFieldType == 3;
			});

			$.each(dataArray, function (index, value) {
				labels.push(value[Object.keys(value)[label[0].fieldIndex]]);
			});

			labels = $.unique(labels.sort(function (a, b) {
				if (isNaN(a) || isNaN(b)) {
					return a > b ? 1 : -1;
				}
				return a - b;
			}));

			$.each(dataArray, function (index, value) {
				xAxis.push(parseInt(value[Object.keys(value)[x[0].fieldIndex]]));
			});

			xAxis = $.unique(xAxis.sort(function (a, b) {
				if (isNaN(a) || isNaN(b)) {
					return a > b ? 1 : -1;
				}
				return a - b;
			}));


			var tblHeader = "<tr>";
			var firstHeaderCell = [];
			for (var k in dataArray[label[0].fieldIndex]) firstHeaderCell.push(k);
			tblHeader += "<th class='diag'><span class='inf'>"+firstHeaderCell[label[0].fieldIndex]+"</span><span class='sup'>"+firstHeaderCell[x[0].fieldIndex]+"</span></th>";
			$.each(xAxis, function (index, xValue) {
				tblHeader += "<th>" + xValue + "</th>";
			});
			tblHeader += "</tr>";
			$(tblHeader).appendTo(table);

			$.each(labels, function (index, yValue) {
				var TableRow = "<tr>";
				TableRow += "<td>" + yValue + "</td>";
				$.each(xAxis, function (index, xValue) {
					var arr = $.grep(dataArray, function (a) {
						return a[Object.keys(a)[label[0].fieldIndex]] == yValue && a[Object.keys(a)[x[0].fieldIndex]] == xValue;
					});

					if (arr[0]) {
						TableRow += "<td>" + arr[0][Object.keys(arr[0])[y[0].fieldIndex]] + "</td>";
					}
					else {
						TableRow += "<td> - </td>";
					}
				});

				TableRow += "</tr>";
				$(table).append(TableRow);

			});
			return ($(table));
		};

		function generateChart(type, dataArray, chatData) {
            var chartLabels = [];
            var tableValues = [];
			var colorSets = [];
			var chartData = [];

			var options;

			if (type == 'pie') {

				var label = $.grep(chatData.dynamicReportChartFields, function (a) {
					return a.chartFieldType == 1;
				});

				var x = $.grep(chatData.dynamicReportChartFields, function (a) {
					return a.chartFieldType == 2;
				});


				$.each(dataArray, function (index, value) {
					chartLabels.push(value[Object.keys(value)[label[0].fieldIndex]]);
				});

				$.each(dataArray, function (index, value) {
					tableValues.push(value[Object.keys(value)[x[0].fieldIndex]]);
				});


				chartData = {
                    labels: chartLabels,
                    datasets: [{
                        data: tableValues,
                        backgroundColor: colorSets,
                        borderColor: colorSets,
                        borderWidth: 1
                    }]
				}

				options = {
					title: {
						display: true,
						text: 'test'
					}
				};

			}
			else if (type == "bar") {
				var datasets = [];

				var label = $.grep(chatData.dynamicReportChartFields, function (a) {
					return a.chartFieldType == 1;
				});

				var x = $.grep(chatData.dynamicReportChartFields, function (a) {
					return a.chartFieldType == 2;
				});


				$.each(dataArray, function (index, value) {
					datasets.push({
						label: value[Object.keys(value)[label[0].fieldIndex]],
						backgroundColor: getRandomColor(),
						data: [value[Object.keys(value)[x[0].fieldIndex]]],
					});
				});

				console.log(datasets);

				chartData = {
					labels: [''],
					datasets: datasets
				}

				options = {
					scaleShowLabels: false,
					scales: {
						yAxes: [{
							scaleLabel: {
								display: true,
								labelString: Object.keys(dataArray[0])[x[0].fieldIndex]
							},
							ticks: {
								beginAtZero: true,
								display: true,
							}
						}],
						xAxes: [{
							scaleLabel: {
								display: true,
								labelString: Object.keys(dataArray[0])[label[0].fieldIndex]
							},
							ticks: {
								beginAtZero: true,
								display: true,
							}
						}],
					},
					title: {
						display: true,
						text: 'test'
					}
				};
				console.log(options);
			}
			else if (type == 'line') {
				var datasets = [];
				var xAxis = [];
				var labels = [];

				var label = $.grep(chatData.dynamicReportChartFields, function (a) {
					return a.chartFieldType == 1;
				});

				var x = $.grep(chatData.dynamicReportChartFields, function (a) {
					return a.chartFieldType == 2;
				});

				var y = $.grep(chatData.dynamicReportChartFields, function (a) {
					return a.chartFieldType == 3;
				});


				$.each(dataArray, function (index, value) {
					labels.push(value[Object.keys(value)[label[0].fieldIndex]]);
				});

				labels = $.unique(labels.sort(function (a, b) {
					if (isNaN(a) || isNaN(b)) {
						return a > b ? 1 : -1;
					}
					return a - b;
				}));

				$.each(dataArray, function (index, value) {
					xAxis.push(parseInt(value[Object.keys(value)[x[0].fieldIndex]]));
				});

				xAxis = $.unique(xAxis.sort(function (a, b) {
					if (isNaN(a) || isNaN(b)) {
						return a > b ? 1 : -1;
					}
					return a - b;
				}));


				$.each(labels, function (index, yValue) {
					var ds = [];
					$.each(xAxis, function (index, xValue) {
						var arr = $.grep(dataArray, function( a ) {
							return a[Object.keys(a)[label[0].fieldIndex]] == yValue && a[Object.keys(a)[x[0].fieldIndex]] == xValue;
						});
						if (arr[0]) {
							ds.push(arr[0][Object.keys(arr[0])[y[0].fieldIndex]]);
						}
						else {
							ds.push(0);
						}
					});
					datasets.push({
						label: yValue,
						borderColor: getRandomColor(),
						data: ds,
						lineTension: 0,
						fill: false,
						backgroundColor: 'transparent',
						pointStyle: 'rectRounded'
					});
				});

				chartData = {
					labels: xAxis,
					datasets: datasets
				};

				options = {
					scaleShowLabels: false,
					scales: {
						yAxes: [{
							scaleLabel: {
								display: true,
								labelString: [Object.keys(dataArray[0])[y[0].fieldIndex]]
							},
							ticks: {
								beginAtZero: true,
								display: true
							}
						}],
						xAxes: [{
							scaleLabel: {
								display: true,
								labelString: [Object.keys(dataArray[0])[x[0].fieldIndex]]
							},
							ticks: {
								beginAtZero: true,
								display: true,
							}
						}],
					},
					title: {
						display: true,
						text: 'test'
					}
				};
            }

            if (type == 'doughnut') {
                var obj = $.parseJSON(result.queryData);
            }

            tableValues.forEach(function () {
                colorSets.push(getRandomColor());
			});



            //Change for colors
            if (type == 'line') {
                colorSets = [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                ];
			}


			$('#chart-box').append($('<canvas class="col-10" id="myChart'+type+'" style="width:1000px; height:278px"></canvas>'));

			var canvas = document.getElementById("myChart"+type);
			var ctx = canvas.getContext('2d');

            new Chart(ctx, {
                type: type,
				data: chartData,
				options: options
            });
        }

	</script>
}
