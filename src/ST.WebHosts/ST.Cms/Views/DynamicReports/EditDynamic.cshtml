@model ST.Report.Abstractions.Models.DynamicReport
@{
    ViewData["Title"] = "EditDynamic";
}

<style>
    #queryResultTable {
        font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

        #queryResultTable td, #queryResultTable th {
            border: 1px solid #ddd;
            padding: 8px;
        }

        #queryResultTable tr:nth-child(even) {
            background-color: wheat;
        }

        #queryResultTable tr:hover {
            background-color: #ddd;
        }

        #queryResultTable th {
            padding-top: 12px;
            padding-bottom: 12px;
            text-align: left;
            background-color: #4CAF50;
            color: white;
        }
</style>
<h2>@Model.Name</h2>
<div class="row">
    <div class="col-2">
        <div class="form-group">
            <label for="tableSelect">Select table:</label>
            <select class="form-control tableSelect" id="tableSelect">
                <option selected="selected">
                    @Model.InitialTable
                </option>
            </select>
        </div>
        <div class="form-group">
            <label for="timeFrameTypeSelect">Time Frame Type:</label>
            <select class="form-control" id="timeFrameTypeSelect">
                <option>Day</option>
                <option>Week</option>
                <option>Month</option>
            </select>
        </div>
    </div>
    <div class="col-2">
        <div class="form-group">
            <label for="graphTypeSelect">Graph Type:</label>
            <select class="form-control" id="graphTypeSelect">
                <option>List</option>
                <option>Bar</option>
                <option>Line</option>
                <option>Pie</option>
                <option>Doughnut</option>
            </select>
        </div>
        <div class="form-group">
            <label for="chartTypeSelect">Chart Type:</label>
            <select class="form-control" id="chartTypeSelect">
                <option>Count</option>
                <option>Total</option>
            </select>
        </div>
    </div>
    <div class="col-6">
        <div class="row">
            <div class="form-group col-6">
                <label for="columnSelect">Select column:</label>
                <select class="form-control columnSelect select2" multiple id="columnSelect">
                    @foreach (var column in ViewBag.Columns)
                    {
                        var match = Model.ColumnList.Where(x => x.DataColumn == column).Any();
                        if (match)
                        {
                            <option selected="selected">
                                @column
                            </option>
                        }
                        else
                        {
                            <option>
                                @column
                            </option>
                        }
                    }
                </select>
            </div>
            <div class="col-6 row">
                <div class="col-12 row">
                    <label class="col-6">Advanced:</label>
                    <div class="col-6">
                        <button class="btn btn-primary m-b-10" type="button" data-toggle="collapse" data-target="#EnhancedColumns" aria-expanded="false" aria-controls="collapseExample">
                            Show
                        </button>
                    </div>
                </div>
                <div class="col-12 row collapse" id="EnhancedColumns">
                    <!--Here will be the enhanced options-->
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="col-md-9">
            <div class="form-group">
                <label>Select start date:</label>
                @Html.TextBoxFor(m => m.StartDateTime, "{0:yyyy-MM-ddThh:mm}", new { @class = "form-control datepicker", type = "datetime-local", id = "startDateSelect" })
            </div>
            <div class="form-group">
                <label>Select end date:</label>
                @Html.TextBoxFor(m => m.EndDateTime, "{0:yyyy-MM-ddThh:mm}", new { @class = "form-control datepicker", type = "datetime-local", id = "endDateSelect" })
            </div>
        </div>
    </div>
    <!--FiltersList Region-->
    <div class="col-md-6">
        <div class="form-group">
            <label>Add FiltersList or Groups : </label>
            <button class="btn btn-info text-white" id="ShowFilters" data-toggle="collapse" href="#filterCollapse"
                    role="button" aria-expanded="false" aria-controls="collapseExample">
                Show FiltersList
            </button>
            <button class="btn btn-info text-white" id="AddFilter"
                    role="button">
                Add Filter
            </button>
            <div id="filterCollapse" class="collapse">
                @foreach (var filter in @Model.Filters)
                {
                    <div class="col-12 row m-t-20 changedRow">
                        <div class="col-md-2">
                            <div class="form-group">
                                <label>Type:</label>
                                <select class="form-control filterTypeSelector">
                                    <option selected="selected">@filter.FilterType</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>Column:</label>
                                <select class="form-control filterColumnSelector">
                                    <option selected="selected">
                                        @filter.ColumnName
                                    </option>
                                </select>
                            </div>
                        </div>
                        <div class="col-2">
                            <div class="form-group">
                                <label>Operation:</label>
                                <select class="form-control filterOperationSelector">
                                    <option selected="selected">
                                        @filter.Operation
                                    </option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>Value:</label>
                                <input class="form-control filterValueSelector" value="@filter.Value"/>
                            </div>
                        </div>
                        <div class="col-2">
                            <button class="btn btn-danger m-t-30 removeFilter">Remove Filter</button>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>
    <!--FiltersList Region-->
</div>
<div class="modal fade" id="saveReportModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Add Contact</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12">
                        <form>
                            <div class="form-group">
                                <div class="row">
                                    <label class="col-md-4"><span class="pull-right">Name</span></label>
                                    <div class="col-md-1"></div>
                                    <input class="form-control col-md-6" id="reportName" value="@Model.Name"/>
                                </div>
                                <div class="row m-t-10">
                                    <label class="col-md-4"><span class="pull-right">Organization</span></label>
                                    <div class="col-md-1"></div>
                                    <select id="folderSelector" asp-items="@(new SelectList(ViewBag.Folders, "Id", "Name", null))" class="form-control col-md-6 custom-select"></select>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <a class="btn btn-success text-white" id="saveReport">Save</a>
                                <button type="button" class="btn btn-inverse " data-dismiss="modal">Close</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<button class="btn btn-danger m-t-20" id="openReportModal">Save</button>
<button class="btn btn-info m-t-20" id="runReport">Run</button>

<div class="m-t-30 bg-white">
    <table id="queryResultTable"></table>
</div>

<canvas class="col-10" id="myChart" style="width:1000px; height:278px"></canvas>


@section Scripts{
    <script>
        $(document).ready(function () {
            $('#columnSelect').select2({
                placeholder: "--Select columns--",
                multiple: true
            });
            addEnhancedColumn();
        });

    </script>
    <script>
        //general scripts
        function updateReportList(action, selectOptions) {
            $("." + selectOptions).html("");
            var requestAction = action;
            $.ajax({
                type: "POST",
                url: requestAction,
                dataType: 'json',
                success: function (data) {
                    var s;
                    for (let i = 0; i < data.length; i++) {
                        s += `<option value="${data[i]}">${data[i]}</option>`;
                    }
                    $("." + selectOptions).html(s);
                }
            });
        }
    </script>
    <script>
        //Script to generate the enhanced Columns
        var columns = $('#columnSelect').val();

        $('#columnSelect').on("change", function () {
            addEnhancedColumn();
        });

        function addEnhancedColumn() {
            var columns = $('#columnSelect').val();
            $("#EnhancedColumns").html("");
            columns.forEach(function (element) {
                var html = $("#EnhancedColumns").html();
                var appenedChild =
                    "<div class=\"enhancedRow row\"><div class=\"col-6 enhancedColumnName\">" + element + "</div><div class=\"col-6 form-group\">" +
                    "<select class=\"form-control enhancedOption\">" +
                    "<option></option>" +
                    "<option>AVG</option>" +
                    "<option>COUNT</option>" +
                    "<option>SUM</option>" +
                    "<option>MIN</option>" +
                    "<option>MAX</option>" +
                    "</select></div></div>";
                $("#EnhancedColumns").html(html + appenedChild);
            });
        }
    </script>
    <script>
        //Script to Generate filters
        $("#AddFilter").click(function () {
            var currentHtml = '<div class=\"col-12 row m-t-20 changedRow\"><div class=\"col-md-2\">' +
                '<div class=\"form-group\"><label>Type:</label><select class=\"form-control filterTypeSelector\">' +
                '<option></option><option>ORDER BY</option><option>GROUP BY</option><option>AND</option><option>OR</option></select></div></div><div class=\"col-md-3\"><div class=\"form-group\">' +
                '<label>Column:</label><select class=\"form-control filterColumnSelector\"></select></div></div><div class=\"col-2\">' +
                '<div class=\"form-group\"><label>Operation:</label><select class=\"form-control filterOperationSelector\"><option></option><option>=</option><option>!=</option><option>MIN</option><option>MAX</option><option>AVG</option></select></div></div>' +
                '<div class=\"col-md-3\"><div class=\"form-group\"><label>Value:</label><input class=\"form-control filterValueSelector\"/></div></div><div class=\"col-2\">' +
                '<button class=\"btn btn-danger m-t-30 removeFilter\">Remove Filter</button></div></div>';
            $("#filterCollapse").append(currentHtml);
            updateReportList(`@Url.Action("GetTableColumnsAjax", "DynamicReports")?tableName=${$('#tableSelect').val()}`,
                "filterColumnSelector");
        });
        //Script to Delete FiltersList
        $("#filterCollapse").on("click", ".removeFilter", function () {
            var parent = $(this).parent().parent();
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.value) {
                    Swal.fire(
                        'Deleted!',
                        'Your file has been deleted.',
                        'success'
                    );
                    $(parent).remove();
                }
            });
        });
    </script>
    <script>
        //Script to create the filter value
        $("#filterCollapse").on("change", ".filterColumnSelector", function (e) {
            var tmp = null;
            //Gather Data
            var data = {
                tableName: $('#tableSelect').val(),
                columnName: $(e.target).val()
            };
            var division = $(this).parent().parent().parent();
            var parent = $(this).parent().parent().parent();
            //Get the type of the input
            $.ajax({
                url: '@Url.Action("GetColumnTypeClient", "DynamicReports")',
                content: "application/json; charset=utf-8",
                type: 'POST',
                data: data,
                success: function (result) {
                    if (result.success == true) {
                        tmp = result.message;
                        if (tmp == "DateTime") {
                            division.find(".filterValueSelector").replaceWith("<input class=\"form-control filterValueSelector\"/>");
                            division.find("input").prop('type', 'date');
                        } else if (tmp == "String") {
                            division.find(".filterValueSelector").replaceWith("<input class=\"form-control filterValueSelector\"/>");
                            division.find("input").prop('type', 'text');
                        } else if (tmp == "Decimal") {
                            division.find(".filterValueSelector").replaceWith("<input class=\"form-control filterValueSelector\"/>");
                            division.find("input").prop('type', 'number');
                        } else if (tmp == "Float") {
                            division.find(".filterValueSelector").replaceWith("<input class=\"form-control filterValueSelector\"/>");
                            division.find("input").prop('type', 'number');
                        } else if (tmp == "Int") {
                            division.find(".filterValueSelector").replaceWith("<input class=\"form-control filterValueSelector\"/>");
                            division.find("input").prop('type', 'number');
                        } else if (tmp == "Guid") {
                            $.ajax({
                                url: '@Url.Action("GetForeignColumnDataForSelection","DynamicReports")',
                                content: "application/json; charset=utf-8",
                                type: "POST",
                                data: data,
                                success: function(result) {
                                    var response = "<option value=\"\">Null</option>";
                                    if (result.success == true) {
                                        for (let i = 0; i < result.message.value.length; i++) {
                                            response += `<option value="${result.message.value[i].id}">${result.message.value[i]
                                                .name}</option>`;
                                        };
                                        debugger;
                                        parent.find(".filterValueSelector").html(response);
                                    }
                                },
                                error: function(jqXHR, textStatus, errorThrown) {
                                    ShowError(jqXHR.status);
                                }
                            });
                            division.find("input").replaceWith("<select class=\"form-control select filterValueSelector\"></select>");
                        } else if (tmp == "Nullable`1") {
                            $.ajax({
                                url: '@Url.Action("GetForeignColumnDataForSelection","DynamicReports")',
                                content: "application/json; charset=utf-8",
                                type: "POST",
                                data: data,
                                success: function(result) {
                                    var response = "<option value=\"\">Null</option>";
                                    if (result.success == true) {
                                        for (let i = 0; i < result.message.value.length; i++) {
                                            response += `<option value="${result.message.value[i].id}">${result.message.value[i]
                                                .name}</option>`;
                                        };
                                        debugger;
                                        parent.find(".filterValueSelector").html(response);
                                    }
                                },
                                error: function(jqXHR, textStatus, errorThrown) {
                                    ShowError(jqXHR.status);
                                }
                            });
                            division.find("input").replaceWith("<select class=\"form-control select filterValueSelector\"></select>");
                        } else if (tmp == "Boolean") {
                            division.find(".filterValueSelector").replaceWith("<input class=\"form-control select filterValueSelector\"/>");
                            division.find("input").prop('type', 'checkbox');
                        } else {
                            $.ajax({
                                url: '@Url.Action("GetForeignColumnDataForSelection","DynamicReports")',
                                content: "application/json; charset=utf-8",
                                type: "POST",
                                data: data,
                                success: function(result) {
                                    var response = "<option value=\"\">Null</option>";
                                    if (result.success == true) {
                                        for (let i = 0; i < result.message.value.length; i++) {
                                            response += `<option value="${result.message.value[i].id}">${result.message.value[i]
                                                .name}</option>`;
                                        };
                                        debugger;
                                        parent.find(".filterValueSelector").html(response);
                                    }
                                },
                                error: function(jqXHR, textStatus, errorThrown) {
                                    ShowError(jqXHR.status);
                                }
                            });
                            division.find("input").replaceWith("<select class=\"form-control select filterValueSelector\"></select>");
                            division.find("input").prop('type', 'text');
                        };
                    } else {
                        swal({
                            position: 'top-end',
                            type: 'error',
                            title: result.message,
                            showConfirmButton: false,
                            timer: 1500
                        });
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    ShowError(jqXHR.status);
                }
            });
        });
    </script>
    <script>
        //script for generation of report
        $('#openReportModal').click(function () {
            $('#saveReportModal').modal('show');
            $('#saveReport').click(function () {
                GenerateData("@Url.Action("EditDynamic", "DynamicReports")");
                $('#saveReportModal').modal('hide');
            });

        });
        $('#runReport').click(function () {
            GenerateData('@Url.Action("GetDynamicReportData", "DynamicReports")');
        });

    </script>
    <script>
        function GenerateData(graphUrl) {

            //Create EnhancedColumnClass for data
            class EnhancedColumn {
                constructor(dataColumn, prefix) {
                    this.dataColumn = dataColumn;
                    this.prefix = prefix;
                }
            }

            var enhancedColumnsArray = [];

            $('#EnhancedColumns').find('.enhancedRow').each(function (e) {
                enhancementColumn = new EnhancedColumn(
                    $(this).find(".enhancedColumnName").text(),
                    $(this).find(".enhancedOption").val()
                );
                enhancedColumnsArray.push(enhancementColumn);
            });

            //Create Filter class for data
            class Filter {
                constructor(filterType, columnName, operation, value) {
                    this.FilterType = filterType;
                    this.ColumnName = columnName;
                    this.Operation = operation;
                    this.Value = value;
                }
            }
            var array = [];

            //Create a list of FiltersList
            $('#filterCollapse').find('.changedRow').each(function (e) {
                debugger;
                filter = new Filter(
                    $(this).find(".filterTypeSelector").val(),
                    $(this).find(".filterColumnSelector").val(),
                    $(this).find(".filterOperationSelector").val(),
                    $(this).find(".filterValueSelector").val()
                );
                array.push(filter);
            });

            //Create data to send to server
            var data = {
                id : "@Model.Id",
                tableName: $('#tableSelect').val(),
                columnList: enhancedColumnsArray,
                startDateTime: $('#startDateSelect').val(),
                endDateTime: $('#endDateSelect').val(),
                FiltersList: array,
                name: $('#reportName').val(),
                dynamicReportFolderId: $('#folderSelector').val(),
                ChartDto: {
                    graphType: $('#graphTypeSelect').val(),
                    chartType: $('#chartTypeSelect').val(),
                    timeFrameEnum: $('#timeFrameTypeSelect').val()
                }
            }

            //Send data and receive model
            $.ajax({
                url: graphUrl,
                content: "application/json; charset=utf-8",
                type: 'POST',
                data: data,
                success: function (result) {
                    debugger;
                    if (result.success == true) {
                        swal({
                            position: 'top-end',
                            type: 'success',
                            title: result.message,
                            showConfirmButton: false,
                            timer: 1500
                        });

                        document.getElementById("queryResultTable").innerHTML = "";
                        const canvas = document.getElementById("myChart");

                        const context = canvas.getContext('2d');
                        context.clearRect(0, 0, '1000px', '278px');

                        if (result.graphType == "List") {
                            //Parse Response to create tables
                            var obj = $.parseJSON(result.queryData);
                            var tableHeaderString = "";
                            var tableValuesString = "";

                            for (i = 0; i < 1; i++) {
                                for (j = 0; j < obj[i].Columns.length; j++) {
                                    tableHeaderString += "<td>" + obj[i].Columns[j].Column + "</td>";
                                }
                            }

                            tableHeaderString = "<tr>" + tableHeaderString + "</tr>";

                            for (i = 0; i < obj.length; i++) {
                                tableValuesString += "<tr>";
                                for (j = 0; j < obj[i].Columns.length; j++) {
                                    tableValuesString += "<td>" + obj[i].Columns[j].Value + "</td>";
                                }
                                tableValuesString += "</tr>";
                            }
                            document.getElementById("queryResultTable").innerHTML = tableHeaderString + tableValuesString;
                        }

                        if (result.graphType == "Pie") {
                            generateChart('pie', result.queryData);
                        }
                        if (result.graphType == "Line") {
                            generateChart('line', result.queryData);
                        }
                        if (result.graphType == "Bar") {
                            generateChart('bar', result.queryData);
                        }
                        if (result.graphType == "Doughnut") {
                            generateChart('doughnut', result.queryData);
                        }
                    } else {
                        swal({
                            position: 'top-end',
                            type: 'error',
                            title: result.message,
                            showConfirmButton: false,
                            timer: 1500
                        });
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowError(jqXHR.status);
                }
            });
        }
    </script>
    <script>
        function generateChart(type, dataArray) {
            debugger;
            var chartLabels = [];
            var tableValues = [];
            var colorSets = [];

            if (type == 'pie') {
                var obj = $.parseJSON(dataArray);
                for (i = 0; i < 1; i++) {
                    for (j = 0; j < obj[i].Columns.length; j++) {
                        chartLabels.push(obj[i].Columns[j].Column);
                    }
                }
                for (i = 0; i < obj.length; i++) {
                    for (j = 0; j < obj[i].Columns.length; j++) {
                        tableValues.push(obj[i].Columns[j].Value);
                    }
                }
            }

            if (type == 'line' || type == "bar") {
                tableValues = $.parseJSON(dataArray);
                var addingValue = 1;
                var startDateTime = new Date($('#startDateSelect').val());
                if ($("#timeFrameTypeSelect").val() == "Week") {
                    addingValue = 7;
                }
                if ($("#timeFrameTypeSelect").val() == "Month") {
                    addingValue = 30;
                }
                tableValues.forEach(function () {
                    chartLabels.push(startDateTime.toDateString());
                    startDateTime.setDate(startDateTime.getDate() + addingValue);
                });
            }

            if (type == 'doughnut') {
                var obj = $.parseJSON(result.queryData);
                console.log(obj);
            }

            tableValues.forEach(function () {
                colorSets.push(getRandomColor());
            });

            //Change for colors
            if (type == 'line') {
                colorSets = [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                ];
            }

            var ctx = document.getElementById("myChart").getContext('2d');
            var myChart = new Chart(ctx, {
                type: type,
                data: {
                    label: '# of Votes',
                    labels: chartLabels,
                    datasets: [{
                        data: tableValues,
                        backgroundColor: colorSets,
                        borderColor: colorSets,
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            });
        }
    </script>
}
