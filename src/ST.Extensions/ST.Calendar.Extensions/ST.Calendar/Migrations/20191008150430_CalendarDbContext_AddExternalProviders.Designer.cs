// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ST.Calendar.Data;

namespace ST.Calendar.Migrations
{
    [DbContext(typeof(CalendarDbContext))]
    [Migration("20191008150430_CalendarDbContext_AddExternalProviders")]
    partial class CalendarDbContext_AddExternalProviders
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Calendar")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ST.Audit.Abstractions.Models.TrackAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("DatabaseContextName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("RecordId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("TrackEventType");

                    b.Property<string>("TypeFullName");

                    b.Property<string>("UserName");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("TrackAudits");
                });

            modelBuilder.Entity("ST.Audit.Abstractions.Models.TrackAuditDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("PropertyName");

                    b.Property<string>("PropertyType");

                    b.Property<Guid?>("TenantId");

                    b.Property<Guid>("TrackAuditId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TrackAuditId");

                    b.ToTable("TrackAuditDetails");
                });

            modelBuilder.Entity("ST.Calendar.Abstractions.Models.CalendarEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Details");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Location");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("Organizer");

                    b.Property<int>("Priority");

                    b.Property<DateTime>("StartDate");

                    b.Property<bool>("Synced");

                    b.Property<Guid?>("TenantId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("Organizer");

                    b.HasIndex("StartDate", "EndDate");

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("ST.Calendar.Abstractions.Models.EventMember", b =>
                {
                    b.Property<Guid>("EventId");

                    b.Property<Guid>("UserId");

                    b.Property<int>("Acceptance");

                    b.HasKey("EventId", "UserId");

                    b.ToTable("EventMembers");
                });

            modelBuilder.Entity("ST.Calendar.Abstractions.Models.ExternalProviderToken", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("Attribute");

                    b.Property<string>("ProviderName");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "Attribute", "ProviderName");

                    b.ToTable("ExternalProviderTokens");
                });

            modelBuilder.Entity("ST.Calendar.Abstractions.Models.UserProviderSyncPreference", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("Provider");

                    b.Property<bool>("Sync");

                    b.HasKey("UserId", "Provider");

                    b.ToTable("UserProviderSyncPreferences");
                });

            modelBuilder.Entity("ST.Audit.Abstractions.Models.TrackAuditDetails", b =>
                {
                    b.HasOne("ST.Audit.Abstractions.Models.TrackAudit")
                        .WithMany("AuditDetailses")
                        .HasForeignKey("TrackAuditId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Calendar.Abstractions.Models.EventMember", b =>
                {
                    b.HasOne("ST.Calendar.Abstractions.Models.CalendarEvent", "Event")
                        .WithMany("EventMembers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
