// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ST.Forms.Data;

namespace ST.Forms.Migrations
{
    [DbContext(typeof(FormDbContext))]
    partial class FormDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Forms")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ST.Audit.Models.TrackAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("DatabaseContextName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("RecordId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("TrackEventType");

                    b.Property<string>("TypeFullName");

                    b.Property<string>("UserName");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("TrackAudits");
                });

            modelBuilder.Entity("ST.Audit.Models.TrackAuditDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("PropertyName");

                    b.Property<string>("PropertyType");

                    b.Property<Guid?>("TenantId");

                    b.Property<Guid>("TrackAuditId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TrackAuditId");

                    b.ToTable("TrackAuditDetails");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Attrs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("FieldId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid?>("RowId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Type");

                    b.Property<string>("Value");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("RowId");

                    b.ToTable("Attrs");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<string>("ClassName");

                    b.Property<Guid>("ConfigId");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("FormId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid?>("RowId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ConfigId");

                    b.HasIndex("FormId");

                    b.HasIndex("RowId");

                    b.ToTable("Columns");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.ColumnField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<Guid>("ColumnId");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("FieldId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("Order");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("ColumnFields");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Config", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("Editable");

                    b.Property<bool>("Fieldset");

                    b.Property<bool>("HideLabel");

                    b.Property<bool>("InputGroup");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Label");

                    b.Property<string>("Legend");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.Property<string>("Width");

                    b.HasKey("Id");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.DisabledAttr", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<Guid>("ConfigId");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ConfigId");

                    b.ToTable("DisabledAttrs");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<Guid?>("ColumnId");

                    b.Property<Guid>("ConfigId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("Created");

                    b.Property<string>("FMap");

                    b.Property<Guid>("FormId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("MetaId");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("Order");

                    b.Property<Guid?>("TableFieldId");

                    b.Property<string>("Tag");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("ConfigId");

                    b.HasIndex("FormId");

                    b.HasIndex("MetaId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<string>("PostUrl");

                    b.Property<string>("RedirectUrl");

                    b.Property<Guid>("SettingsId");

                    b.Property<Guid>("TableId");

                    b.Property<Guid?>("TenantId");

                    b.Property<Guid>("TypeId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("SettingsId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TypeId");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.FormFieldEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<int>("Event");

                    b.Property<Guid>("FieldId");

                    b.Property<string>("Handler")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("FormFieldEvents");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.FormType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<string>("Code")
                        .HasColumnType("char(4)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSystem");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("FormTypes");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Meta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Group");

                    b.Property<string>("Icon");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("Meta");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<string>("ClassName");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("FieldId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Label");

                    b.Property<string>("ModifiedBy");

                    b.Property<bool>("Selected");

                    b.Property<Guid?>("TenantId");

                    b.Property<string>("TypeLabel");

                    b.Property<string>("TypeValue");

                    b.Property<string>("Value");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<Guid>("ConfigId");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("FormId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid?>("StageId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ConfigId");

                    b.HasIndex("FormId");

                    b.HasIndex("StageId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.RowColumn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<Guid>("ColumnId");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("RowId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("RowColumns");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Settings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Stage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("FormId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid?>("SettingsId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("SettingsId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.StageRows", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("RowId");

                    b.Property<Guid>("StageId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("StageRows");
                });

            modelBuilder.Entity("ST.Audit.Models.TrackAuditDetails", b =>
                {
                    b.HasOne("ST.Audit.Models.TrackAudit")
                        .WithMany("AuditDetailses")
                        .HasForeignKey("TrackAuditId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Attrs", b =>
                {
                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Field", "Field")
                        .WithMany("Attrs")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Row", "Row")
                        .WithMany("Attrs")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Column", b =>
                {
                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Config", "Config")
                        .WithMany()
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Form")
                        .WithMany("Columns")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Row")
                        .WithMany("Columns")
                        .HasForeignKey("RowId");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.DisabledAttr", b =>
                {
                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Config")
                        .WithMany("DisabledAttrs")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Field", b =>
                {
                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Column")
                        .WithMany("Fields")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Config", "Config")
                        .WithMany()
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Form", "Form")
                        .WithMany("Fields")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Meta", "Meta")
                        .WithMany()
                        .HasForeignKey("MetaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Form", b =>
                {
                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Settings", "Settings")
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.FormType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.FormFieldEvent", b =>
                {
                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Field", "Field")
                        .WithMany("FieldEvents")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Option", b =>
                {
                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Field")
                        .WithMany("Options")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Row", b =>
                {
                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Config", "Config")
                        .WithMany()
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Form")
                        .WithMany("Rows")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Stage")
                        .WithMany("Rows")
                        .HasForeignKey("StageId");
                });

            modelBuilder.Entity("ST.Forms.Abstractions.Models.FormModels.Stage", b =>
                {
                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Form")
                        .WithMany("Stages")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Forms.Abstractions.Models.FormModels.Settings", "Settings")
                        .WithMany()
                        .HasForeignKey("SettingsId");
                });
#pragma warning restore 612, 618
        }
    }
}
