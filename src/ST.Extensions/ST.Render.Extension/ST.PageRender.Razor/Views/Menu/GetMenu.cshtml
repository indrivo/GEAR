@using ST.Entities.Models.Pages
@inject IStringLocalizer Localizer
@{
	ViewData["Title"] = "Menu items";
	Menu menu = (Menu)ViewBag.Menu;
	MenuItem parent = (MenuItem)ViewBag.Parent;
}
<div class="card">
	<div class="card-body">
		<h4 class="card-title">Menu items</h4>
		<h6 class="card-subtitle">List of menu items</h6>
		<div class="table-responsive">
			<div class="mt-2">
				<div class="d-flex">
					<div class="mr-auto">
						<div class="form-group">
							<a href="/Menu/CreateItem?menuId=@ViewBag.MenuId&&parentId=@ViewBag.ParentId" class="btn btn-primary btn-sm">
								<i class="mdi mdi-circle-edit-outline mr-2" aria-hidden="true"></i>Add menu item
							</a>
							<small>New menu item will be added.</small>
						</div>
						<div class="form-group">
							<span>
								<b>Menu: </b>
							</span><code>@menu.Name</code><br />
							<span>
								<b>Parent: </b>
							</span><code>@parent?.Name</code>
						</div>
					</div>
				</div>
			</div>
			<table class="table table-striped table-bordered" id="menuTable">
				<thead>
					<tr>
						<th>Name</th>
						<th>Href</th>
						<th>@Localizer["created"]</th>
						<th>@Localizer["changed"]</th>
                        <th>@Localizer["author"]</th>
                        <th>@Localizer["is_deleted"]</th>
                        <th>@Localizer["list_actions"]</th>
					</tr>
				</thead>
				<tbody></tbody>
				<tfoot></tfoot>
			</table>
		</div>
	</div>
</div>

@section Scripts{
	<script type="text/javascript" language="javascript">
		function getTokenAntiForgery() {
			const token = '@Html.AntiForgeryToken()';
			return $(token).val();
		}
	</script>
	<script type="text/javascript" language="javascript">
		$(document).ready(function($) {
			const tableId = '#menuTable';
			if ($.fn.DataTable.isDataTable(tableId)) {
				$(tableId).dataTable().fnDestroy();
				$(tableId).dataTable().empty();
			}
			$(tableId).DataTable({
				"language": {
					"url": `http://cdn.datatables.net/plug-ins/1.10.19/i18n/${window.getCookie("language")}.json`
				},
				dom: '<"CustomizeColumns">lBfrtip',
				"processing": true, // for show progress bar
				"serverSide": true, // for process server side
				"filter": true, // this is for disable filter (search box)
				"orderMulti": false, // for disable multiple column at once
				"destroy": true,
				"ajax": {
					"url": '@Url.Action("LoadMenuItems")',
					"type": "POST",
					"data": {
						"menuId": "@ViewBag.MenuId",
						"parentId": "@ViewBag.ParentId"
					}
				},
				"columns": [
					{ "data": "name" },
					{ "data": "href" },
					{ "data": "created" },
					{ "data": "changed" },
					{ "data": "author" },
					{ "data": "isDeleted" },
					{
						data: null,
						"render": function(data, type, row, meta) {
							$(".roles-access").on("click", menuItemClickHandler);
							return `<div class="btn-group" role="group" aria-label="Action buttons">
									<a class="btn btn-warning btn-sm" href="@Url.Action("GetMenu")?menuId=@ViewBag.MenuId&&parentId=${
								row.id}">Childs</a>
									<a class="btn btn-info btn-sm" href="@Url.Action("EditItem")?itemId=${row.id
								}">Edit</a>
									<a class="btn btn-primary btn-sm roles-access" data-id="${row.id
								}" href="#">Role Access</a>
									<button type="button" class='btn btn-danger btn-sm' onclick=createAlert('${row.id
								}'); >Delete</button>
									</div>`;
						}
					}
				]
			});
		});

		function createAlert(rowId) {
			const object = {
				alertTitle: "Delete this menu items?",
				alertText: "Are you sure that you want to leave this menu item?",
				confirmButtonText: "Yes, delete it!",
				rowId: rowId,
				tableId: "#pageTable",
				urlForDelete: '@Url.Action("DeleteMenuItem")',
				type: "warning",
				onDeleteSuccess: "Menu has been deleted.",
				onDeleteFail: "Something wrong",
				onServerNoResponse: "Api not respond or not have permissions."
			};
			DeleteData(object);
		}


		function getSystemRoles() {
			return load("/PageRender/GetRoles");
		}

		function menuItemClickHandler() {
			const context = this;
			let storeMenuId = "";
			swal({
				title: 'Select allowed roles what can view this',
				html:
					'<label for="role-select"></label><select class="swal2-select" multiple id="role-select"></select',
				showCancelButton: true,
				preConfirm: function() {
					return new Promise(function(resolve) {
						resolve([
							$('#role-select').val()
						]);
					});
				},
				onOpen: function() {
					const roles = getSystemRoles();

					const menuId = $(context).attr("data-id");
					console.log(menuId);
					storeMenuId = menuId;

					const chosedRoles = load(`/PageRender/GetMenuItemRoles?menuId=${menuId}`);

					var options = $("#role-select");
					options.html(null);
					$.each(roles,
						function() {
							options.append(new Option(this.name, this.name));
						});
					$.each(chosedRoles,
						function() {
							$("#role-select [value=\"" + this + "\"]").attr("selected", "selected");
						});

					$('#role-select').focus();
				}
			}).then(function(result) {
				if (result.value) {
					const roles = [];
					console.log(typeof result.value);
					$.each(Array.from(result.value[0]),
						function (index, role) {
							console.log(role);
							roles.push(role);
						});

					const response = load("/PageRender/UpdateMenuItemRoleAccess",
						{
							menuId: storeMenuId,
							roles: roles
						},
						"post");
					if (response.is_success) {
						swal("Success!", "Data has been saved!", "success");
					} else {
						swal("Fail!", "Internal server error", "error");
					}
				}
			});
		}
	</script>
}