@model ST.Identity.Razor.Users.ViewModels.UserViewModels.ChangeUserPasswordViewModel

@{
    ViewData["Title"] = $"{Localizer["system_user_change_password_for"]} {Model.Email}";
}


<div class="row">
    <div class="col-lg-12">
        <div class="card card-outline-info">
            <div class="card-header">
                <h4 class="mb-0 text-black">    
                    @Localizer["system_user_change_password_for"] <code>@Model.Email</code>
                </h4>
            </div>
            <div class="card-body">
                <div class="field">
                    <h5> @Localizer["system_user_change_password_info"] </h5>
                </div>
                <hr/>
                <div class="mt-4">
                    <div class="d-flex">
                        <div class="mr-auto">
                            <div class="form-group">
                                <a id="generatePasswordEvent" href="javascript:void(0)" class="btn btn-primary btn-sm">
                                    <i class="mdi mdi-circle-edit-outline mr-2" aria-hidden="true"></i>
                                    @Localizer["system_generate_password"]
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                <form asp-action="ChangeUserPassword" asp-controller="Users" role="form">
                    @Html.HiddenFor(x => x.AuthenticationType)
                    @Html.HiddenFor(x => x.UserId)
                    @Html.HiddenFor(x => x.CallBackUrl)
                    <div class="row">
                        <div class="col-md-12">
                            <span>Generated password: </span><code id="newGenPass"></code>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label asp-for="Password" class="control-label"></label>
                                <input asp-for="Password" class="form-control"/>
                                <span asp-validation-for="Password" class="text-danger"></span><br />
                                <small>@Localizer["pass_info2"]</small>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label asp-for="RepeatPassword" class="control-label"></label>
                                <input asp-for="RepeatPassword" class="form-control"/>
                                <span asp-validation-for="RepeatPassword" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="form-actions">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col-md-offset-3 col-md-9">
                                        <button type="submit" class="btn btn-success">
                                            <i class="fa fa-check"></i> @Localizer["save"]</button>
                                        <a asp-action="Index" class="btn btn-link"> @Localizer["back"]</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script type="text/javascript">
        const Password = {
            _pattern: /[a-zA-Z0-9_\-\+\.]/,
            _getRandomByte: function() {
                if (window.crypto && window.crypto.getRandomValues) {
                    var result = new Uint8Array(1);
                    window.crypto.getRandomValues(result);
                    return result[0];
                } else if (window.msCrypto && window.msCrypto.getRandomValues) {
                    var result = new Uint8Array(1);
                    window.msCrypto.getRandomValues(result);
                    return result[0];
                } else {
                    return Math.floor(Math.random() * 256);
                }
            },
            generate: function(length) {
                return Array.apply(null, { 'length': length })
                    .map(function() {
                            var result;
                            while (true) {
                                result = String.fromCharCode(this._getRandomByte());
                                if (this._pattern.test(result)) {
                                    return result;
                                }
                            }
                        },
                        this)
                    .join('');
            }
        };
        $(document).ready(function() {
            $("#generatePasswordEvent").on("click",
                function() {
                    swal({
                        title: 'Select password length',
                        html:
                            '<label for="passwordLength"></label><select class="swal2-select" id="passwordLength"></select',
                        showCancelButton: true,
                        preConfirm: function() {
                            return new Promise(function(resolve) {
                                resolve([
                                    $('#passwordLength').val()
                                ]);
                            });
                        },
                        onOpen: function() {
                            const options = $("#passwordLength");
                            const weakOptgroup = addOptionsToOptGroup($('<optgroup>'), 6, 16, "Weak");
                            const stringOptgroup = addOptionsToOptGroup($('<optgroup>'), 16, 128, "Strong");
                            const veryStrongOptgroup = addOptionsToOptGroup($('<optgroup>'), 128, 512, "Very Strong");
                            options.append(weakOptgroup);
                            options.append(stringOptgroup);
                            options.append(veryStrongOptgroup);
                            options.focus();
                        }
                    }).then(function(result) {
                        if (result.value) {
                            const newGeneratedPass = Password.generate(result.value);
                            Swal.fire({
                                title: `Are you sure to use this password? :  ${newGeneratedPass}`,
                                text: "You should copy this password",
                                type: 'warning',
                                showCancelButton: true,
                                confirmButtonColor: '#3085d6',
                                cancelButtonColor: '#d33',
                                confirmButtonText: 'Yes, use this password'
                            }).then((result) => {
                                if (result.value) {
                                    $("#Password").val(newGeneratedPass);
                                    $("#RepeatPassword").val(newGeneratedPass);
                                    $("#newGenPass").html(newGeneratedPass);
                                    Swal.fire(
                                        'Password applied, now you can press save button!',
                                        '',
                                        'success'
                                    );
                                }
                            });
                        }
                    });
                });

            function addOptionsToOptGroup(optgroup, start, end, name) {
                optgroup.attr('label', name);
                for (let i = start; i < end; i++) {
                    const option = $("<option></option>");
                    option.val(i);
                    option.text(i);
                    optgroup.append(option);
                }
                return optgroup;
            }
        });
    </script>
    <partial name="_ValidationScriptsPartial"/>
}