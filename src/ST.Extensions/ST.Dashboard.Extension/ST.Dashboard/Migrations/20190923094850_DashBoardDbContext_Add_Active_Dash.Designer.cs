// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ST.Dashboard.Data;

namespace ST.Dashboard.Migrations
{
    [DbContext(typeof(DashBoardDbContext))]
    [Migration("20190923094850_DashBoardDbContext_Add_Active_Dash")]
    partial class DashBoardDbContext_Add_Active_Dash
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("DashBoard")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ST.Audit.Abstractions.Models.TrackAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("DatabaseContextName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("RecordId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("TrackEventType");

                    b.Property<string>("TypeFullName");

                    b.Property<string>("UserName");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("TrackAudits");
                });

            modelBuilder.Entity("ST.Audit.Abstractions.Models.TrackAuditDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("PropertyName");

                    b.Property<string>("PropertyType");

                    b.Property<Guid?>("TenantId");

                    b.Property<Guid>("TrackAuditId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TrackAuditId");

                    b.ToTable("TrackAuditDetails");
                });

            modelBuilder.Entity("ST.Dashboard.Abstractions.Models.CustomWidget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowCache");

                    b.Property<string>("Author");

                    b.Property<string>("BackGroundColor");

                    b.Property<int>("BorderRadius");

                    b.Property<string>("BorderStyle");

                    b.Property<TimeSpan>("CacheRefreshSpan");

                    b.Property<DateTime>("Changed");

                    b.Property<string>("ClassAttribute");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Height");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastRefreshTime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<Guid>("RowId");

                    b.Property<string>("Template")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.Property<Guid>("WidgetGroupId");

                    b.Property<int>("WidgetTemplateType");

                    b.Property<string>("Width");

                    b.HasKey("Id");

                    b.HasIndex("RowId");

                    b.HasIndex("WidgetGroupId");

                    b.ToTable("CustomWidgets");
                });

            modelBuilder.Entity("ST.Dashboard.Abstractions.Models.DashBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("ST.Dashboard.Abstractions.Models.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("DashboardId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("ST.Dashboard.Abstractions.Models.WidgetGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("WidgetGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12e6ffae-7b23-474c-a190-6c374c6785fc"),
                            Changed = new DateTime(2019, 9, 23, 9, 48, 50, 141, DateTimeKind.Utc).AddTicks(3942),
                            Created = new DateTime(2019, 9, 23, 9, 48, 50, 141, DateTimeKind.Utc).AddTicks(3129),
                            IsDeleted = false,
                            Name = "Charts",
                            Order = 1,
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("72a4e0d4-9e1e-40c5-8c41-fccc0c16b653"),
                            Changed = new DateTime(2019, 9, 23, 9, 48, 50, 171, DateTimeKind.Utc).AddTicks(3797),
                            Created = new DateTime(2019, 9, 23, 9, 48, 50, 171, DateTimeKind.Utc).AddTicks(3792),
                            IsDeleted = false,
                            Name = "Reports",
                            Order = 2,
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("ef761fae-ff74-4f35-9e4e-5a1e74dea628"),
                            Changed = new DateTime(2019, 9, 23, 9, 48, 50, 171, DateTimeKind.Utc).AddTicks(4109),
                            Created = new DateTime(2019, 9, 23, 9, 48, 50, 171, DateTimeKind.Utc).AddTicks(4108),
                            IsDeleted = false,
                            Name = "Custom",
                            Order = 3,
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("d72ff788-0ecd-41a0-962b-b350ef40b6fc"),
                            Changed = new DateTime(2019, 9, 23, 9, 48, 50, 171, DateTimeKind.Utc).AddTicks(4194),
                            Created = new DateTime(2019, 9, 23, 9, 48, 50, 171, DateTimeKind.Utc).AddTicks(4193),
                            IsDeleted = false,
                            Name = "Samples",
                            Order = 4,
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("354baeff-f03b-448b-9f52-824d1fab4c7e"),
                            Changed = new DateTime(2019, 9, 23, 9, 48, 50, 171, DateTimeKind.Utc).AddTicks(4218),
                            Created = new DateTime(2019, 9, 23, 9, 48, 50, 171, DateTimeKind.Utc).AddTicks(4218),
                            IsDeleted = false,
                            Name = "Custom",
                            Order = 5,
                            Version = 0
                        });
                });

            modelBuilder.Entity("ST.Dashboard.Abstractions.Models.WidgetTypes.ChartWidget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowCache");

                    b.Property<string>("Author");

                    b.Property<string>("BackGroundColor");

                    b.Property<int>("BorderRadius");

                    b.Property<string>("BorderStyle");

                    b.Property<TimeSpan>("CacheRefreshSpan");

                    b.Property<DateTime>("Changed");

                    b.Property<string>("ClassAttribute");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Height");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastRefreshTime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<Guid>("RowId");

                    b.Property<string>("Template")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.Property<Guid>("WidgetGroupId");

                    b.Property<int>("WidgetTemplateType");

                    b.Property<string>("Width");

                    b.HasKey("Id");

                    b.HasIndex("RowId");

                    b.HasIndex("WidgetGroupId");

                    b.ToTable("ChartWidgets");
                });

            modelBuilder.Entity("ST.Dashboard.Abstractions.Models.WidgetTypes.ListWidget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowCache");

                    b.Property<string>("Author");

                    b.Property<string>("BackGroundColor");

                    b.Property<int>("BorderRadius");

                    b.Property<string>("BorderStyle");

                    b.Property<TimeSpan>("CacheRefreshSpan");

                    b.Property<DateTime>("Changed");

                    b.Property<string>("ClassAttribute");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Height");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastRefreshTime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<Guid>("RowId");

                    b.Property<string>("Template")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.Property<Guid>("WidgetGroupId");

                    b.Property<int>("WidgetTemplateType");

                    b.Property<string>("Width");

                    b.HasKey("Id");

                    b.HasIndex("RowId");

                    b.HasIndex("WidgetGroupId");

                    b.ToTable("ListWidgets");
                });

            modelBuilder.Entity("ST.Dashboard.Abstractions.Models.WidgetTypes.ReportWidget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowCache");

                    b.Property<string>("Author");

                    b.Property<string>("BackGroundColor");

                    b.Property<int>("BorderRadius");

                    b.Property<string>("BorderStyle");

                    b.Property<TimeSpan>("CacheRefreshSpan");

                    b.Property<DateTime>("Changed");

                    b.Property<string>("ClassAttribute");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Height");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastRefreshTime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<Guid>("RowId");

                    b.Property<string>("Template")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.Property<Guid>("WidgetGroupId");

                    b.Property<int>("WidgetTemplateType");

                    b.Property<string>("Width");

                    b.HasKey("Id");

                    b.HasIndex("RowId");

                    b.HasIndex("WidgetGroupId");

                    b.ToTable("ReportWidgets");
                });

            modelBuilder.Entity("ST.Dashboard.Abstractions.Models.WidgetTypes.TabbedWidget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowCache");

                    b.Property<string>("Author");

                    b.Property<string>("BackGroundColor");

                    b.Property<int>("BorderRadius");

                    b.Property<string>("BorderStyle");

                    b.Property<TimeSpan>("CacheRefreshSpan");

                    b.Property<DateTime>("Changed");

                    b.Property<string>("ClassAttribute");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Height");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastRefreshTime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<Guid>("RowId");

                    b.Property<string>("Template")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.Property<Guid>("WidgetGroupId");

                    b.Property<int>("WidgetTemplateType");

                    b.Property<string>("Width");

                    b.HasKey("Id");

                    b.HasIndex("RowId");

                    b.HasIndex("WidgetGroupId");

                    b.ToTable("TabbedWidgets");
                });

            modelBuilder.Entity("ST.Audit.Abstractions.Models.TrackAuditDetails", b =>
                {
                    b.HasOne("ST.Audit.Abstractions.Models.TrackAudit")
                        .WithMany("AuditDetailses")
                        .HasForeignKey("TrackAuditId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Dashboard.Abstractions.Models.CustomWidget", b =>
                {
                    b.HasOne("ST.Dashboard.Abstractions.Models.Row", "Row")
                        .WithMany()
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Dashboard.Abstractions.Models.WidgetGroup", "WidgetGroup")
                        .WithMany()
                        .HasForeignKey("WidgetGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Dashboard.Abstractions.Models.Row", b =>
                {
                    b.HasOne("ST.Dashboard.Abstractions.Models.DashBoard", "DashBoard")
                        .WithMany("Rows")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Dashboard.Abstractions.Models.WidgetTypes.ChartWidget", b =>
                {
                    b.HasOne("ST.Dashboard.Abstractions.Models.Row", "Row")
                        .WithMany("ChartWidgets")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Dashboard.Abstractions.Models.WidgetGroup", "WidgetGroup")
                        .WithMany()
                        .HasForeignKey("WidgetGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Dashboard.Abstractions.Models.WidgetTypes.ListWidget", b =>
                {
                    b.HasOne("ST.Dashboard.Abstractions.Models.Row", "Row")
                        .WithMany("ListWidgets")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Dashboard.Abstractions.Models.WidgetGroup", "WidgetGroup")
                        .WithMany()
                        .HasForeignKey("WidgetGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Dashboard.Abstractions.Models.WidgetTypes.ReportWidget", b =>
                {
                    b.HasOne("ST.Dashboard.Abstractions.Models.Row", "Row")
                        .WithMany("ReportWidgets")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Dashboard.Abstractions.Models.WidgetGroup", "WidgetGroup")
                        .WithMany()
                        .HasForeignKey("WidgetGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Dashboard.Abstractions.Models.WidgetTypes.TabbedWidget", b =>
                {
                    b.HasOne("ST.Dashboard.Abstractions.Models.Row", "Row")
                        .WithMany("TabbedWidgets")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Dashboard.Abstractions.Models.WidgetGroup", "WidgetGroup")
                        .WithMany()
                        .HasForeignKey("WidgetGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
