// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ST.Entities.Data;

namespace ST.Entities.Migrations
{
    [DbContext(typeof(EntitiesDbContext))]
    [Migration("20190517085557_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Entities")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ST.Audit.Models.TrackAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("DatabaseContextName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("RecordId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("TrackEventType");

                    b.Property<string>("TypeFullName");

                    b.Property<string>("UserName");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("TrackAudits");
                });

            modelBuilder.Entity("ST.Audit.Models.TrackAuditDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("PropertyName");

                    b.Property<string>("PropertyType");

                    b.Property<Guid?>("TenantId");

                    b.Property<Guid>("TrackAuditId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TrackAuditId");

                    b.ToTable("TrackAuditDetails");
                });

            modelBuilder.Entity("ST.Entities.Abstractions.Models.Tables.EntityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSystem");

                    b.Property<string>("MachineName");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("EntityTypes");
                });

            modelBuilder.Entity("ST.Entities.Abstractions.Models.Tables.TableFieldConfigValues", b =>
                {
                    b.Property<Guid>("TableModelFieldId");

                    b.Property<Guid>("TableFieldConfigId");

                    b.Property<string>("Value");

                    b.HasKey("TableModelFieldId", "TableFieldConfigId");

                    b.HasIndex("TableFieldConfigId");

                    b.ToTable("TableFieldConfigValues");
                });

            modelBuilder.Entity("ST.Entities.Abstractions.Models.Tables.TableFieldConfigs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasColumnType("char(4)");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<Guid>("TableFieldTypeId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TableFieldTypeId");

                    b.ToTable("TableFieldConfigs");
                });

            modelBuilder.Entity("ST.Entities.Abstractions.Models.Tables.TableFieldGroups", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("GroupName");

                    b.HasKey("Id");

                    b.ToTable("TableFieldGroups");
                });

            modelBuilder.Entity("ST.Entities.Abstractions.Models.Tables.TableFieldTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasColumnType("char(2)");

                    b.Property<string>("DataType");

                    b.Property<string>("Name");

                    b.Property<Guid>("TableFieldGroupsId");

                    b.HasKey("Id");

                    b.HasIndex("TableFieldGroupsId");

                    b.ToTable("TableFieldTypes");
                });

            modelBuilder.Entity("ST.Entities.Abstractions.Models.Tables.TableModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("EntityType");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPartOfDbContext");

                    b.Property<bool>("IsSystem");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Table");
                });

            modelBuilder.Entity("ST.Entities.Abstractions.Models.Tables.TableModelFields", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowNull");

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("DataType");

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSystem");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Synchronized");

                    b.Property<Guid>("TableFieldTypeId");

                    b.Property<Guid>("TableId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("TableFieldTypeId");

                    b.HasIndex("TableId");

                    b.HasIndex("TenantId");

                    b.ToTable("TableFields");
                });

            modelBuilder.Entity("ST.Entities.Models.Pages.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<Guid>("BlockCategoryId");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CssCode");

                    b.Property<string>("Description");

                    b.Property<string>("FaIcon");

                    b.Property<string>("HtmlCode");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TableModelId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("BlockCategoryId");

                    b.HasIndex("TableModelId");

                    b.HasIndex("TenantId");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("ST.Entities.Models.Pages.BlockAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<Guid>("BlockId");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("DefaultValue");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TenantId");

                    b.Property<string>("Value");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.ToTable("BlockAttributes");
                });

            modelBuilder.Entity("ST.Entities.Models.Pages.BlockCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("BlockCategories");
                });

            modelBuilder.Entity("ST.Entities.Models.Pages.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLayout");

                    b.Property<bool>("IsSystem");

                    b.Property<Guid?>("LayoutId");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("PageTypeId");

                    b.Property<string>("Path");

                    b.Property<Guid?>("SettingsId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("LayoutId");

                    b.HasIndex("PageTypeId");

                    b.HasIndex("SettingsId");

                    b.HasIndex("TenantId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("ST.Entities.Models.Pages.PageScript", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("Order");

                    b.Property<Guid>("PageId");

                    b.Property<string>("Script");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("PageScripts");
                });

            modelBuilder.Entity("ST.Entities.Models.Pages.PageSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CssCode");

                    b.Property<string>("Description");

                    b.Property<string>("HtmlCode");

                    b.Property<string>("Icon");

                    b.Property<string>("Identifier");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("JsCode");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TenantId");

                    b.Property<string>("Title");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("PageSettings");
                });

            modelBuilder.Entity("ST.Entities.Models.Pages.PageStyle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("Order");

                    b.Property<Guid>("PageId");

                    b.Property<string>("Script");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("PageStyles");
                });

            modelBuilder.Entity("ST.Entities.Models.Pages.PageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSystem");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("PageTypes");
                });

            modelBuilder.Entity("ST.Entities.Models.RenderTemplates.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("IdentifierName")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<string>("Value");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("ST.Entities.Models.ViewModels.ViewModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<Guid>("TableModelId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("TableModelId");

                    b.HasIndex("TenantId");

                    b.ToTable("ViewModels");
                });

            modelBuilder.Entity("ST.Entities.Models.ViewModels.ViewModelFields", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<Guid?>("TableModelFieldsId");

                    b.Property<string>("Template");

                    b.Property<Guid?>("TenantId");

                    b.Property<string>("Translate");

                    b.Property<int>("Version");

                    b.Property<Guid>("ViewModelId");

                    b.HasKey("Id");

                    b.HasIndex("TableModelFieldsId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ViewModelId");

                    b.ToTable("ViewModelFields");
                });

            modelBuilder.Entity("ST.Entities.Security.Models.EntityFieldPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApplicationRoleId");

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<int>("FieldAccessType");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("TableModelFieldId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("TableModelFieldId");

                    b.ToTable("EntityFieldPermissions");
                });

            modelBuilder.Entity("ST.Entities.Security.Models.EntityPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApplicationRoleId");

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("TableModelId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("TableModelId");

                    b.ToTable("EntityPermissions");
                });

            modelBuilder.Entity("ST.Entities.Security.Models.EntityPermissionAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessType");

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("EntityPermissionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("EntityPermissionId");

                    b.ToTable("EntityPermissionAccesses");
                });

            modelBuilder.Entity("ST.Audit.Models.TrackAuditDetails", b =>
                {
                    b.HasOne("ST.Audit.Models.TrackAudit")
                        .WithMany("AuditDetailses")
                        .HasForeignKey("TrackAuditId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Entities.Abstractions.Models.Tables.TableFieldConfigValues", b =>
                {
                    b.HasOne("ST.Entities.Abstractions.Models.Tables.TableFieldConfigs", "TableFieldConfig")
                        .WithMany()
                        .HasForeignKey("TableFieldConfigId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Entities.Abstractions.Models.Tables.TableModelFields", "TableModelField")
                        .WithMany("TableFieldConfigValues")
                        .HasForeignKey("TableModelFieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Entities.Abstractions.Models.Tables.TableFieldConfigs", b =>
                {
                    b.HasOne("ST.Entities.Abstractions.Models.Tables.TableFieldTypes", "TableFieldType")
                        .WithMany("TableFieldConfigs")
                        .HasForeignKey("TableFieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Entities.Abstractions.Models.Tables.TableFieldTypes", b =>
                {
                    b.HasOne("ST.Entities.Abstractions.Models.Tables.TableFieldGroups", "TableFieldGroups")
                        .WithMany("TableFieldTypes")
                        .HasForeignKey("TableFieldGroupsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Entities.Abstractions.Models.Tables.TableModelFields", b =>
                {
                    b.HasOne("ST.Entities.Abstractions.Models.Tables.TableFieldTypes", "TableFieldType")
                        .WithMany()
                        .HasForeignKey("TableFieldTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ST.Entities.Abstractions.Models.Tables.TableModel", "Table")
                        .WithMany("TableFields")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Entities.Models.Pages.Block", b =>
                {
                    b.HasOne("ST.Entities.Models.Pages.BlockCategory", "BlockCategory")
                        .WithMany()
                        .HasForeignKey("BlockCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Entities.Abstractions.Models.Tables.TableModel", "TableModel")
                        .WithMany()
                        .HasForeignKey("TableModelId");
                });

            modelBuilder.Entity("ST.Entities.Models.Pages.BlockAttribute", b =>
                {
                    b.HasOne("ST.Entities.Models.Pages.Block")
                        .WithMany("Attributes")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Entities.Models.Pages.Page", b =>
                {
                    b.HasOne("ST.Entities.Models.Pages.Page", "Layout")
                        .WithMany()
                        .HasForeignKey("LayoutId");

                    b.HasOne("ST.Entities.Models.Pages.PageType", "PageType")
                        .WithMany()
                        .HasForeignKey("PageTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ST.Entities.Models.Pages.PageSettings", "Settings")
                        .WithMany()
                        .HasForeignKey("SettingsId");
                });

            modelBuilder.Entity("ST.Entities.Models.Pages.PageScript", b =>
                {
                    b.HasOne("ST.Entities.Models.Pages.Page")
                        .WithMany("PageScripts")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Entities.Models.Pages.PageStyle", b =>
                {
                    b.HasOne("ST.Entities.Models.Pages.Page")
                        .WithMany("PageStyles")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Entities.Models.ViewModels.ViewModel", b =>
                {
                    b.HasOne("ST.Entities.Abstractions.Models.Tables.TableModel", "TableModel")
                        .WithMany()
                        .HasForeignKey("TableModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Entities.Models.ViewModels.ViewModelFields", b =>
                {
                    b.HasOne("ST.Entities.Abstractions.Models.Tables.TableModelFields", "TableModelFields")
                        .WithMany()
                        .HasForeignKey("TableModelFieldsId");

                    b.HasOne("ST.Entities.Models.ViewModels.ViewModel")
                        .WithMany("ViewModelFields")
                        .HasForeignKey("ViewModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Entities.Security.Models.EntityFieldPermission", b =>
                {
                    b.HasOne("ST.Entities.Abstractions.Models.Tables.TableModelFields", "TableModelField")
                        .WithMany()
                        .HasForeignKey("TableModelFieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Entities.Security.Models.EntityPermission", b =>
                {
                    b.HasOne("ST.Entities.Abstractions.Models.Tables.TableModel", "TableModel")
                        .WithMany()
                        .HasForeignKey("TableModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ST.Entities.Security.Models.EntityPermissionAccess", b =>
                {
                    b.HasOne("ST.Entities.Security.Models.EntityPermission", "EntityPermission")
                        .WithMany("EntityPermissionAccesses")
                        .HasForeignKey("EntityPermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
